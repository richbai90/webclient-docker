<?php
include_once('stdinclude.php');
include_once('classportalsession.php'); //-- php session is started
include_once('xmlmc.php'); //-- php session is started
include_once('helpers/resultparser.php'); //-- php session is started
include_once('classdatabaseaccess.php'); //-- php session is started

//-- Constants used by the userdb.webflag column
@define("OPTION_HAS_WEB_ACCESS",				1);
@define("OPTION_CAN_LOG_CALLS",				2);
@define("OPTION_CAN_UPDATE_CALLS",			4);
@define("OPTION_CAN_VIEW_CALLS",				8);
@define("OPTION_CAN_VIEW_SITECALLS",			16);
@define("OPTION_CAN_VIEW_ORGCALLS",			32);


@define("LOGIN_FAILED_NO_SERVER",			1);
@define("LOGIN_FAILED_NOT_NOTREGISTERED",	2);
@define("LOGIN_FAILED_NO_NOACCESS",			3);
@define("LOGIN_FAILED_SERVER_ERROR",			4);
@define("LOGIN_FAILED_CHECK_CREDENTIALS",	5);
@define("CUSTOMER_LOGIN_OK",					6);

@define("WEBSESSION_FLAG_ENABLEKB",			1);
@define("WEBSESSION_FLAG_FORCEKBSEARCH",		2);
@define("WEBSESSION_FLAG_SHOWISSUES",		4);

class classCustomerSession extends classPortalSession
{
	function initialiseCustomerSession($instance_name, $server_name, $app_path = "" , $timeout = 15)
	{
		//--  set portal mode so can use in other pages to id what we are doing
		$_SESSION['portalmode']="CUSTOMER";

		$pos = strpos($server_name,":");
		if(is_integer($pos))
		{
			$_SESSION["server_name"] = substr($server_name,0,$pos);
			$_SESSION["server_port"] = substr($server_name,$pos + 1);
		}
		else
		{
			$_SESSION["server_name"] = $server_name;
			$_SESSION["server_port"] = 80;
		}
		
		//-- set session vars
		if($app_path == "")$app_path = "/sw/" . $instance_name ."/";

		//--
		//-- SET WEBSERVER PATH
		$httptype = "http://";
		if($GLOBALS["HTTPS"]=="on")$httptype = "https://";
		$_SESSION["www_portalroot"] = $httptype. $_SESSION["server_name"] . ":" . $_SESSION["server_port"] . $app_path;


		$_SESSION["app_path"] = $app_path;
		$_SESSION["sessiontimeout"] = $timeout;
		$_SESSION["connector_instance"] = $instance_name;
		$_SESSION["connector_password"] = base64_encode($instance_name);


	}

	function GetSiteName()
	{
		if($_SESSION['site_name']!="") return $_SESSION['site_name'];

		$dbConn = new CSwLocalDbConnection;
		$boolConnected = $dbConn->Connect("syscache");
		$strSQL = "SELECT value FROM websession_config WHERE name='sitename' and InstanceID = '" . PrepareForSql($_SESSION['connector_instance']) . "'";
		$retRS = $dbConn->Query($strSQL,true);
		while(!$retRS->eof)
		{	
			$_SESSION['site_name'] = $retRS->f("value");
			return $_SESSION['site_name'];
		}

		return "";
	}

	// -- Function to load session->getSessionInfo2 using the sessionId that is generated by session->selfServiceLogon
	function getSessionInfo2($sessionId)
	{
		$host = $_SESSION['server_name'];
		$xmlmc = new XmlMethodCall();
		$xmlmc->SetParam("sessionId",$sessionId);
		$xmlmc->Invoke("session","getSessionInfo2",$host);
		$strLastError = $xmlmc->GetLastError();
		
		if($strLastError=="")
		{
			$arrRows = $xmlmc->xmlDom->get_elements_by_tagname("params");
			foreach($arrRows as $cats)
			{
				$children = $cats->child_nodes();
				$dTotal = count($children);
				for ($i=0;$i<$dTotal;$i++)
				{
					$colNode = $children[$i];
					if($colNode->node_name()!="#text" && $colNode->node_name()!="#comment")
					{
						$strColName = strtolower($colNode->tagname());
						// -- Get Database SQL type in SESSION
						if($strColName == 'mssqlinuse') $_SESSION['mssqlinuse'] = $colNode->get_content();
						if($strColName == 'oracleinuse') $_SESSION['oracleinuse'] = $colNode->get_content();
					}
				}
			}
		}
	}

	//-- perform a customer login
	function CustomerLogin($loginid, $loginpass)
	{
		//-- New style customer web login validation. We use the helpdesk API to do the login validation
		//echo $customerid .":". $password;
		//-- No access to start with
		$_SESSION['cust_webflag'] = 0;

		$host = $_SESSION['server_name'];
		$wssmInstance = $_SESSION['connector_instance'];
		$xmlmc = new XmlMethodCall();
		$xmlmc->SetParam("selfServiceInstance",$wssmInstance);
		$xmlmc->SetParam("customerId",$loginid);
		$xmlmc->SetParam("password",base64_encode($loginpass));
		$xmlmc->Invoke("session","selfServiceLogon",$host);
		$strLastError = $xmlmc->GetLastError();
		//	var_dump($xmlmc);
		if($strLastError=="")
		{
			$arrDM = $xmlmc->xmlDom->get_elements_by_tagname("params");
			$xmlMD = $arrDM[0];
			if($xmlMD)
			{
				$_SESSION['sw_sessionid'] =_getxml_childnode_content($xmlMD,"sessionId");
				$_SESSION['cust_webflag'] =_getxml_childnode_content($xmlMD,"webFlags");
				$_SESSION['cust_firstname'] = _getxml_childnode_content($xmlMD,"firstName");
				$_SESSION['cust_lastname'] = _getxml_childnode_content($xmlMD,"lastName");
				$_SESSION['config_callclass'] = _getxml_childnode_content($xmlMD,"callClass");
				$_SESSION['config_suppgroup'] = _getxml_childnode_content($xmlMD,"assignGroup");
				$_SESSION['config_owner'] = _getxml_childnode_content($xmlMD,"assignAnalyst");
				$_SESSION['config_dd'] = _getxml_childnode_content($xmlMD,"dataDictionary");
				$_SESSION['sessiontimeout'] = _getxml_childnode_content($xmlMD,"sessionTimeout");

				settype($_SESSION['cust_webflag'], "integer");
				settype($_SESSION['sessiontimeout'], "integer");

				if($_SESSION['cust_webflag'] & OPTION_HAS_WEB_ACCESS)
				{
					$_SESSION['customerid'] = $loginid;
					$_SESSION['customerpass'] = $loginpass;
					$_SESSION['customername'] = $_SESSION['cust_firstname'] . " " . $_SESSION['cust_lastname'];
					
					//-- create protal session info
					$sessionid = $_SESSION['cust_webflag'] . ":" . $customerid . ":" . $_SESSION['cust_firstname'] . ":" . $_SESSION['cust_lastname'] . ":" . $loginpass . ":" . $_SESSION['callclass'] . ":" . $_SESSION['assigngroup'] . ":" . $_SESSION['assignanalyst'] . ":" . $_SESSION['dd'];
					$this->CreatePortalSession($sessionid, $_SESSION['sessiontimeout']);				
					$this->LoadPortalConfig();
					// -- Call to session->getSessionInfo2 
					$this->getSessionInfo2($_SESSION['sw_sessionid']);
					//-- load dti
					swdti_load($_SESSION['config_dd']);
					
					// Load available class classes.
					if(defined('_CALLCLASS_SELECT'))
					{
					    $_SESSION['config_callclasses'] = array();
						$sql = "
                                SELECT
                                  CallClass
                                FROM
                                  dd_lcf
                                WHERE
                                  DdName = '" . $_SESSION["config_dd"] . "'
                                ORDER BY
                                  CallClass ASC
                               ";
						$dbConn = new CSwLocalDbConnection;
						$boolConnected = $dbConn->Connect("syscache");
						$retRS = $dbConn->Query($sql,true);
						$strAuthStatus = "";
						
						while(!$retRS->eof)
						{	
							$callclass = $retRS->f("callclass");
                            array_push($_SESSION['config_callclasses'], $row['CallClass']);
							$retRS->movenext();
						}
					}
					else
					{
					    $_SESSOPM['config_callclasses'] = $_SESSION['config_callclass'];
					}

					//-- select userdb info and store in 
					if(!$this->LoadCustomerDetails())
					{
						return LOGIN_FAILED_SERVER_ERROR;
					}
				}
				return CUSTOMER_LOGIN_OK;
			}
		}

		return $strLastError;
	}

	function IsOption($option)
	{
		return ($option & $_SESSION['cust_webflag']);
	}

	function LoadCustomerDetails()
	{
		//-- go get instance site name
		$this->GetSiteName();
		$dbConn = new CSwDbConnection;
		$boolConnected = $dbConn->Connect("swdata");

		$strSQL = "select * from ".$_SESSION['config_ac_table']." where ".PrepareForSql($_SESSION['config_ac_id'])." = '" . PrepareForSql($_SESSION['customerid']) . "'";
		$retRS = $dbConn->Query($strSQL,true);
		while(!$retRS->eof)
		{	
			foreach($retRS->row() as $field_name=>$objColumn)
			{
				$_SESSION["userdb_".$field_name] = $objColumn->value;
			}
			$retRS->movenext();
		}


		//-- NWJ - 14.07.2008 - load company if it has one
		if($_SESSION["userdb_fk_company_id"] != "")
		{
			$strSQL ="select * from company where pk_company_id= '".PrepareForSql($_SESSION['userdb_fk_company_id']) . "'";
			$retRS = $dbConn->Query($strSQL,true);
			while(!$retRS->eof)
			{	
				foreach($retRS->row() as $field_name=>$objColumn)
				{
					$_SESSION["company_".$field_name] = $objColumn->value;
				}
				$retRS->movenext();
			}
		}
		if($_SESSION["userdb_priority"] == "[Use SLA Default Priority]")
		{
			$strSQL ="select * from itsmsp_slad where pk_slad_id=".PrepareForSql($_SESSION['userdb_sld']);
			$retRS = $dbConn->Query($strSQL,true);
			while(!$retRS->eof)
			{	
				$_SESSION["userdb_priority"] = $retRS->f("fk_ssla");
				$retRS->movenext();
			}
		}
		return true;
	}
}

	function prepareforxml($strValue)
	{
		$xmlchars = array("&", "<", ">",'"',"'");
		$escapechars = array("&amp;", "&lt;", "&gt;","&quot;","&apos;");
		return (str_replace($xmlchars, $escapechars, $strValue));
	}

?>
