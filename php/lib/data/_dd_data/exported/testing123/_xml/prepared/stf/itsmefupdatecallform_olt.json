{"espForm":{"configuration":{"settings":{"name":"itsmEfUpdateCallForm_OLT","title":"Update Call Form","options":{"allowResize":"true","showMenubar":"false","showToolbar":"false","showStatusBar":"false"}},"tables":{"table":[{"name":"updatedb","type":"Main Details Table","flags":"5"},{"name":"opencall","type":"Extended Details Table","mainDetailsColumn":"callref","flags":"0"}]},"javascript":{"methods":{"method":[{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\tif (_swdoc.boolForceClose)\n\t{\n\t\treturn true;\n\t}\n\t\n\t\/\/-- required for modaless message box\n\tvar funcUnlockReset = function()\n\t{\n\t\t\/\/ Unlock our call(s)\n\t\tapp.global.UnlockCalls(_swdoc.strIncomingCallrefs);\n\t\n\t\t_swdoc.ResetData();\n\t\t\t\n\t\treturn true;\n\t}\n\t\n\t\/\/Check for Changes to any of the data fields\n\tif(_swdoc.bFormFieldChanged)\n\t{\n\t\tMessageBox(\"You have unsaved data on this form. Do you still want to close this form?\", MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t{\n\t\t\tif (intDecision === IDNO)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncUnlockReset();\n\t\t\t\t_swdoc.boolForceClose = true;\n\t\t\t\t_swdoc.CloseForm();\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\treturn funcUnlockReset();\n\t}\t\n}"},{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t\n\t_swdoc.strIncomingCallrefs = _swdoc._form[\"callrefs\"];\n\tif(_swdoc.strIncomingCallrefs==\"\")\n\t{\n\t\t\/\/-- see if we have passed any in\n\t\t_swdoc.strIncomingCallrefs = _swdoc.GetArg(\"in_callrefs\");\n\t}\n\t\n\t\n\t\/\/if analyst does not have permissions to\n\t\/\/update calls, don't open form.\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANUPDATECALLS, false))\n\t{\n\t\tMessageBox(\"I am sorry, you do not have the right to update calls.\\n Please contact your administrator\");\n\t\treturn false;\n\t}\n\n\t\/\/if one or more calls are locked, then don't open form.\n\tif(!app.global.LockCalls(_swdoc.strIncomingCallrefs,\"UPDATE\",true))\n\t{\n\t\t\/\/MessageBox(\"I am sorry, one or more of the selected calls is locked by another user.\");\n\t\treturn false;\n\t}\n\t\n\t\n\t\/\/ convert string of call references into an array\n\t_swdoc.arrCallRefs = _swdoc.strIncomingCallrefs.split(\",\");\n\t\n\t\/\/ set the page title\n\tvar strPageTitle = \"\";\n\tstrPageTitle = \"Update Operational Task\";\n\tif (_swdoc.arrCallRefs.length > 1)\n\t{\n\t\t\/\/if there is more than one call, set the page title to plural\n\t\tstrPageTitle += \"s\";\n\t}\n\t\n\tfor(var i=0; i<_swdoc.arrCallRefs.length; i++)\n\t{\n\t\tstrPageTitle += (i > 0) ? \", \" : \":\";\n\t\tstrPageTitle += \" \"+dd.tables.opencall.columns.callref.FormatValue(_swdoc.arrCallRefs[i]);\n\t}\n\t_swdoc.SetTitle(strPageTitle);\n\n\t\/\/ get current time, so we can check if call is being backdated later\n\t_swdoc.dtCurrentTime = new Date();\n\n\t\/\/ Set the default update text if it has been passed in\n\t_swdoc.updatedb.updatetxt = _form['updatetext'];\n\n\t\/\/ Get the Call Status information for various checks later\n\tfor(var i = 0; i<_swdoc.arrCallRefs.length; i++)\n\t{\n\t\tvar nCStatus = app.global.GetCallStatusInfo(_swdoc.arrCallRefs[i]).nStatus;\n\t\tif (nCStatus == 1)\n\t\t{\n\t\t\t_swdoc.bPending = true;\n\t\t}\t\t\n\t\tif (nCStatus == 2)\n\t\t{\n\t\t\t_swdoc.nUnassigned++;\n\t\t} \n\t\tif (nCStatus == 3)\n\t\t{\n\t\t\t_swdoc.nUnaccepted++;\n\t\t}\n\t\tif (nCStatus > 15 || nCStatus == 6)\n\t\t{\n\t\t\t_swdoc.bNotOpen = true;\n\t\t}\n\t\tif (nCStatus == 4)\n\t\t{\n\t\t\t_swdoc.bOnHold = true;\n\t\t}\n\t\t\n\t}\n\n\treturn true;\n}"},{"name":"OnSaveData","code":"OnSaveData()\n{\n\t\/\/ This should never get called, but if for some reason it does, we only want this form\n\t\/\/ to close if it is cancelled or if the analyst clicks one of the update buttons.\n\n\treturn false;\n}"},{"name":"(Globals)","code":"\/\/ Define global variables used by this form\nvar _swdoc = (IsObjectDefined(\"_bHtmlWebClient\"))?top:_swdoc;\nvar strIncomingCallrefs = \"\";\nvar arrCallRefs = null; \t\/\/ This is an array of the call references applied to this update\nvar dtCurrentTime = null; \t\/\/ This is the time the form was opened.\nvar strUpdateText = null;\t\/\/ This will store any update text that was passed to the form.\nvar nUnassigned = 0;     \/\/ The next few variables are to double-check statuses for various checks\nvar nUnaccepted = 0;\nvar bNotOpen = false;\nvar bPending = false;\nvar bOnHold = false;\nvar bFormFieldChanged = false;\t\/\/This var is used to check for changes to data fields and is set to true when any \n\t\t\t\t\t\t\t\t\/\/field data is changed\nvar boolForceClose = false;\nvar bTargetFixTimeChanged = false;\n\nvar strOrigOwner = \"\";\nvar strSupportGroup = \"\";\n\n\/\/-- mainform pointer\nfunction MF()\n{\n\treturn mainform;\n}\n\nfunction check_sla_response_flag()\n{\n\t\/\/--\n\t\/\/-- NWJ - 14.02.2006 - by default set to hidden. We will show if it needs responding to.\t\t\n\t\/\/-- if the logged-in analyst does not have permission to change call status, then they cannot mark this as SLA response\n\tapp._een(_swdoc.MF().flg_slaresponse, false);\n\tif(app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t{\n\t\t\/\/-- make sure the flag is visible\n\t\tapp._evi(_swdoc.MF().flg_slaresponse, true);\n\t\t\n\t\t\/\/-- if the calls have not been responded to previously, then give the analyst the option of marking this as the SLA response\t\n\t\tvar db = new SqlQuery;\t\t\n\t\tvar strParams = \"crfs=\"+app.pfu(_swdoc.strIncomingCallrefs);\n\t\tdb.InvokeStoredQuery(\"form\/updatecall\/get_resp_details\", strParams);\n\t\tif(db.Fetch())\n\t\t{\n\t\t\tvar nCount = db.GetValueAsNumber(0);\n\t\t\tif(nCount > 0)\n\t\t\t{\n\t\t\t\t\/\/-- can mark as sla response\n\t\t\t\tapp._een(_swdoc.MF().flg_slaresponse, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    \/\/sandra 17\/08\/2007 Bug 60006 Mark SLA response flag \n\t\t\t    \/\/-- nwj : why are we setting it to checked?? why not just hide it??\n\t\t\t\tapp._eva(_swdoc.MF().flg_slaresponse, 1);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t\/\/-- they do not have permission so hide the field\n\t\tapp._evi(_swdoc.MF().flg_slaresponse, false);\n\t}\n}"},{"name":"(User Defined Functions)","code":"\/*\n\tCreated by Hornbill Systems\n\t\n\tUpdates\n\t-------\n\t\n\tCode\tDate\t\tAuthor\t\t\t\t\tDescription\n\t-----------------------------------------------------------------------------------------\n\tind01\t11\/05\/07\tIvan Nicholas Dorosh\tError when accepting multiple calls Bug 57068\n\n*\/\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ this is the _swdoc.UpdateCalls function that is called when a user clicks\n\/\/ on either Update Call or Update and Assign.  It is being\n\/\/ defined here so that we can use it for either.\n\/\/ this function takes as an argument the analyst, if any, to whom you are assigning the call\nfunction UpdateCalls(strAssignToGroup, strAssignToAnalyst, boolThirdParty)\n{\n\t\/\/ -- Set the SLA text to null if the SLA field is not applicable (multiple calls, etc.)\n\tstrSLAtext = false;\n\t\n\t\/\/ -- Find modified values in OPENCALL table\n\tvar boolUpdatedValues = true;\n\tvar arrUpdateCallValues = new Array();\n\tvar strUpdateCallValues = \"\";\n\tif(rec = _swdoc.GetRecord(\"opencall\"))\n\t{\n\t\tvar nColCount = rec.GetCount();\n\t\tfor(x = 0; x < nColCount; x++)\n\t\t{\n\t\t\tif(!rec.IsModified(x))\n\t\t\t\tcontinue;\n\t\t\tif(!_swdoc.bUserSelectedFixCode && rec.GetColumnName(x)==\"fixcode\") \n\t\t\t\tcontinue;\n\t\t\tarrUpdateCallValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t}\n\t}\n\tfor (fieldName in arrUpdateCallValues)\n\t{\n\t\tstrUpdateCallValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrUpdateCallValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t}\n\t\/\/ -- Update call values using XMLMC API if we found modified values in OPENCALL table \n\tif(strUpdateCallValues!=\"\")\n\t{\n\t\tstrUpdateCallValues = \"<opencall>\"+strUpdateCallValues+\"<\/opencall>\";\n\t\tvar arrCallrefs = _swdoc.CallrefsCommaString;\n\t\t\/\/ -- Update call values using helpdesk::updateCallValues API \n\t\tvar xmlmc = new XmlMethodCall;\n\t\tvar strMethod = \"updateCallValues\";\n\t\tfor(var refCount = 0; refCount < arrCallrefs.length; refCount++)\n\t\t{\n\t\t\txmlmc.SetValue(\"callref\", arrCallrefs[refCount]);\n\t\t\txmlmc.SetParamAsComplexType(\"additionalCallValues\", strUpdateCallValues);\t\n\t\t\tif(xmlmc.Invoke(\"helpdesk\", strMethod))\n\t\t\t{\n\t    \t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\t\t\tvar objRes = app.XMCResult(strXML);\n\t\t\t\tif(!objRes.success)\n\t\t\t\t{\n\t\t\t\t\tboolUpdatedValues = false;\n\t\t\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboolUpdatedValues = false;\n\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\/\/ -- Update the call using XMLMC API\n\tvar xmlmc = new XmlMethodCall;\n\t\/\/ -- API method\n\tvar strMethod = \"updateCalls\";\n\t\/\/ -- Find modified values in UPDATEDB table\n\tvar arrExtraUpdateDbValues = new Array();\n\tvar strUpdateDbValues = \"\";\n\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t{\n\t\tvar nColCount = rec.GetCount();\n\t\tfor(x = 0; x < nColCount; x++)\n\t\t{\n\t\t\tif(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')\n\t\t\t\tcontinue;\n\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t}\n\t}\n\tfor (fieldName in arrExtraUpdateDbValues)\n\t{\n\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t}\n\t\n\t\/\/ -- Workout \"timeOfAction\" value\n\tvar strBackDate = new Date(mainform.dt_updatedate.text);\n\t\n\t\/\/ ** API params ** \/\/\n\tvar arrCallrefs = _swdoc.strIncomingCallrefs.split(\",\");\n \tfor(x in arrCallrefs)\n\t\txmlmc.SetValue(\"callref\", arrCallrefs[x]);\n\txmlmc.SetValue(\"timeSpent\", mainform.tm_timespent.value);\n\txmlmc.SetValue(\"description\", rec.updatetxt);\n\tvar boolPublicUpdate = (mainform.flg_updatepublic.text == \"1\" )? true : false;\n\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\txmlmc.SetValue(\"timeOfAction\", strBackDate);\n\tif(rec.udsource!=\"\")\n\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\tif(rec.udcode!=\"\")\n\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\n\tif(strAssignToGroup==undefined)\n\t\tstrAssignToGroup = \"\";\n\tif(strAssignToGroup!=\"\")\n\t{\n\t\tif(boolThirdParty)\n\t\t{\n\t\t\t\/\/ -- If \"Update and Assign to 3rd Party\" is selected, then change the API method\n\t\t\tstrMethod = \"updateAndAssignCallTo3rdParty\";\n\t\t\txmlmc.SetValue(\"assignThirdPartySupplier\", strAssignToGroup);\n\t\t\txmlmc.SetValue(\"assignThirdPartyContract\", strAssignToAnalyst);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/ -- \"Update and Assign\" is selected, then change the API method\n\t\t\tstrMethod = \"updateAndAssignCalls\";\n\t\t\txmlmc.SetValue(\"assignGroup\", strAssignToGroup);\n\t\t\tif(strAssignToAnalyst!=\"\")\n\t\t\t{\n\t\t\t\txmlmc.SetValue(\"assignAnalyst\", strAssignToAnalyst);\n\t\t\t}\n\t\t}\n\t}\t\n\tvar boolMarkAsSLAResponse = (mainform.flg_slaresponse.text == \"1\" )? true : false;\n\txmlmc.SetValue(\"markAsSLAResponse\", boolMarkAsSLAResponse);\n\tif(strSLAtext)\n\t\txmlmc.SetValue(\"priority\", strSLAtext);\t\n\tif (_swdoc.bTargetFixTimeChanged)\n\t\txmlmc.SetValue(\"targetFixTime\", mainform.tb_target.text);\n\t\/\/ -- fileAttachment param\n\tfor(i=0; i<mainform.fl_attachslist.rowCount();i++)\n\t{\n\t\tvar fileName = mainform.fl_attachslist.GetItemText(i,3);\n\t\tvar serverFile = fileName.indexOf(\"MFA:\");\n\t\tif(serverFile >= 0)\n\t\t{\n\t\t\t\/\/-- File was attached to email use serverFileAttachment API\n\t\t\tvar strFileName = mainform.fl_attachslist.GetItemText(i,0);\n\t\t\tvar strData = mainform.fl_attachslist.GetItemText(i,3);\n\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\tif(!app.bWebClient)\n\t\t\t\tstrXML += \"<fileSource>\"+strData+\"<\/fileSource>\";\n\t\t\txmlmc.SetParamAsComplexType(\"serverFileAttachment\",strXML);\n\t\t}else\n\t\t{\n\t\t\t\/\/-- File was Uploaded use fileAttachement API\n\t\t\tvar strFileName = mainform.fl_attachslist.GetItemText(i,0);\n\t\t\tvar strData = app.global.LoadFileInBase64(mainform.fl_attachslist.GetItemText(i,3));\n\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\tif(!app.bWebClient)\n\t\t\t\tstrXML += \"<fileData>\"+strData+\"<\/fileData>\";\n\t\t\txmlmc.SetParamAsComplexType(\"fileAttachment\",strXML);\n\t\t}\n    }\t\n\tif(strUpdateDbValues!=\"\")\n\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\n\t\/\/ ** EO API params ** \/\/\n\t\n\t\/\/ -- Invoke XMLMC API\n\tif(xmlmc.Invoke(\"helpdesk\",strMethod))\n\t{\n\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\tvar objRes = app.XMCResult(strXML);\n\t\tif(!objRes.success)\n\t\t{\n\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\treturn false;\n\t    }\n\t\telse\n\t\t{\n\t\t\tvar myXmlFile = new XmlFile(); \n\t\t\tbRet = myXmlFile.loadFromString(strXML); \n\t\t\tvar arrChildCallInfo = null;\n\t\t\tvar arrCallInfo = new Array();\n\t\t\tvar strDocs = \"\";\n\t\t\tfor (count = 0; count < myXmlFile.methodCallResult.params.length; count ++) \n\t\t\t{\n\t\t\t\tif(myXmlFile.methodCallResult.params[count].nodeName==\"callActionStatus\")\n\t\t\t\t{  \n\t\t\t\t\tvar boolSuccess = myXmlFile.methodCallResult.params[count]['success'].nodeValue;\n\t\t\t\t\tif(boolSuccess==\"false\")\n\t\t\t\t\t{\n\t\t\t\t\t\tvar strMessage =  myXmlFile.methodCallResult.params[count]['message'].nodeValue;\n\t\t\t\t\t\tMessageBox(strMessage);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar strCallref = myXmlFile.methodCallResult.params[count]['callref'].nodeValue;\n\t\t\t\t\tvar strIndex = myXmlFile.methodCallResult.params[count]['udIndex'].nodeValue;\n\t\t\t\t\t\n\t\t\t\t\tarrCallInfo[strCallref] = strIndex;\n\t\t\t\t}\n\t\t\t\telse if(myXmlFile.methodCallResult.params[count].nodeName==\"callFileAttachment\")\n\t\t\t\t{\n\t\t\t\t\tvar intCount = arrCallInfo.length;\n\t\t\t\t\tif(intCount==1)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar updateId = myXmlFile.methodCallResult.params[count]['updateId'].nodeValue;\n\t\t\t\t\t\t\tif(updateId==arrCallInfo[strCallref])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pathName = myXmlFile.methodCallResult.params[count]['pathName'].nodeValue;\n\t\t\t\t\t\t\t\tvar fileName = myXmlFile.methodCallResult.params[count]['fileName'].nodeValue;\n\t\t\t\t\t\t\t\tvar fileSize = myXmlFile.methodCallResult.params[count]['fileSize'].nodeValue;\n\t\t\t\t\t\t\t\tif(strDocs!=\"\") strDocs +=\"\\r\\n\";\n\t\t\t\t\t\t\t\tstrDocs +='displayname=\"'+fileName+'\"; path=\"'+pathName+'\"; size=\"'+fileSize+'\";';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/ --\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ If we have been invoked to update a call from an e-mail message, this update will \n\t\t\t\/\/ only relate to a single call. We can only handle e-mail audit trail if we are working\n\t\t\t\/\/ on a single-call update. \n\t\t\tif(_swdoc.arrCallRefs.length == 1 && \t\t\t\/\/ Are we only dealing with a single call reference?\n\t\t\t\t_swdoc._form[\"messagesource\"] && \t\/\/ Are we working from an e-mail message?\n\t\t\t\tdd.GetGlobalParamAsNumber(\"Email Audit Trail\/StoreEmailAuditTrail\")) \/\/ Are we configured?\n\t\t\t{\n\t\t\t\tapp.g.attach_message_to_call(_swdoc._form,_swdoc.arrCallRefs[0],arrCallInfo[_swdoc.arrCallRefs[0]]);\n\t\t\t}\n\t\t\t\n    \t\t\/\/ if we want to send an email to the customer AND there are file attachments, obtain the \n    \t\t\/\/ attachments to attach to the email as well\n    \t\tvar flSessionFilesInfo = \"\";\n    \t\t\n    \t\t\t\t\n\t\t\t\/\/ -- ADDITIONAL ACTIONS -- \/\/\n\t\t\t\/\/ -- if we need to get the op tasks parents to put on hold or apply\n\t\t\tvar strParents = \"\";\n\t\t\tif(mainform.flg_addtoparentdiary.value == 1)\n\t\t\t{\n\t\t\t\tvar strParams = \"crfs=\"+app.pfu(_swdoc.strIncomingCallrefs);\n\t\t\t\tvar oRS = app.g.get_sqrecordset(\"form\/updatecall\/get_parents_for_calls\",strParams);\n\t\t\t\twhile(oRS.Fetch())\n\t\t\t\t{\n\t\t\t\t\tif(strParents != \"\") strParents +=\",\";\n\t\t\t\t\tstrParents +=  app.g.get_field(oRS,\"bpm_parentcallref\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\/\/if we apply to parents, add parent callrefs to list\n\t\t\tif(mainform.flg_addtoparentdiary.value == 1)\n\t\t\t{\n\t\t\t\tif(strParents!=\"\")\n\t\t\t\t{\n\t\t\t\t\t\/\/ -- Update the call using XMLMC API\n\t\t\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\t\t\t\/\/ -- API method\n\t\t\t\t\tvar strMethod = \"updateCalls\";\n\t\t\t\t\t\/\/ -- Find modified values in UPDATEDB table\n\t\t\t\t\tvar arrExtraUpdateDbValues = new Array();\n\t\t\t\t\tvar strUpdateDbValues = \"\";\n\t\t\t\t\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar nColCount = rec.GetCount();\n\t\t\t\t\t\tfor(x = 0; x < nColCount; x++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (fieldName in arrExtraUpdateDbValues)\n\t\t\t\t\t{\n\t\t\t\t\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\/\/ -- Workout \"timeOfAction\" value\n\t\t\t\t\tvar strBackDate = new Date(mainform.dt_updatedate.text);\n\t\t\t\t\t\n\t\t\t\t\t\/\/ ** API params ** \/\/\n\t\t\t\t\tvar arrCallrefs = strParents.split(\",\");\n \t\t\t\t\tfor(x in arrCallrefs)\n\t\t\t\t\t\txmlmc.SetValue(\"callref\", arrCallrefs[x]);\n\t\t\t\t\txmlmc.SetValue(\"timeSpent\", mainform.tm_timespent.value);\n\t\t\t\t\txmlmc.SetValue(\"description\", rec.updatetxt);\n\t\t\t\t\tvar boolPublicUpdate = (mainform.flg_updatepublic.text == \"1\" )? true : false;\n\t\t\t\t\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\t\t\t\t\txmlmc.SetValue(\"timeOfAction\", strBackDate);\n\t\t\t\t\tif(rec.udsource!=\"\")\n\t\t\t\t\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\t\t\t\t\tif(rec.udcode!=\"\")\n\t\t\t\t\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\n\t\t\t\t\tvar boolMarkAsSLAResponse = (mainform.flg_slaresponse.text == \"1\" )? true : false;\n\t\t\t\t\txmlmc.SetValue(\"markAsSLAResponse\", boolMarkAsSLAResponse);\n\t\t\t\t\tif(strSLAtext)\n\t\t\t\t\t\txmlmc.SetValue(\"priority\", strSLAtext);\t\n\t\t\t\t\tif (_swdoc.bTargetFixTimeChanged)\n\t\t\t\t\t\txmlmc.SetValue(\"targetFixTime\", mainform.tb_target.text);\n\t\t\t\t\t\/\/ -- fileAttachment param\n\t\t\t\t\tfor(i=0; i<mainform.fl_attachslist.rowCount();i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar fileName = mainform.fl_attachslist.GetItemText(i,3);\n\t\t\t\t\t\tvar serverFile = fileName.indexOf(\"MFA:\");\n\t\t\t\t\t\tif(serverFile >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/-- File was attached to email use serverFileAttachment API\n\t\t\t\t\t\t\tvar strFileName = mainform.fl_attachslist.GetItemText(i,0);\n\t\t\t\t\t\t\tvar strData = mainform.fl_attachslist.GetItemText(i,3);\n\t\t\t\t\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\t\t\t\t\tif(!app.bWebClient)\n\t\t\t\t\t\t\t\tstrXML += \"<fileSource>\"+strData+\"<\/fileSource>\";\n\t\t\t\t\t\t\txmlmc.SetParamAsComplexType(\"serverFileAttachment\",strXML);\n\t\t\t\t\t\t}else\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/-- File was Uploaded use fileAttachement API\n\t\t\t\t\t\t\tvar strFileName = mainform.fl_attachslist.GetItemText(i,0);\n\t\t\t\t\t\t\tvar strData = app.global.LoadFileInBase64(mainform.fl_attachslist.GetItemText(i,3));\n\t\t\t\t\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\t\t\t\t\tif(!app.bWebClient)\n\t\t\t\t\t\t\t\tstrXML += \"<fileData>\"+strData+\"<\/fileData>\";\n\t\t\t\t\t\t\txmlmc.SetParamAsComplexType(\"fileAttachment\",strXML);\n\t\t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\tif(strUpdateDbValues!=\"\")\n\t\t\t\t\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\n\t\t\t\t\t\/\/ ** EO API params ** \/\/\n\t\t\t\t\t\n\t\t\t\t\t\/\/ -- Invoke XMLMC API\n\t\t\t\t\tif(!xmlmc.Invoke(\"helpdesk\",strMethod))\n\t\t\t\t\t{\n\t\t\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t_swdoc.bFormFieldChanged = false;\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t}\n\t\n\treturn false;\n}\n\n\/\/ Validate the information entered into the form by the user. Return 'true' if\n\/\/ the data is OK, of 'false' otherwise.  MessageBox's may be shown to indicate\n\/\/ validation failure\nfunction ValidateForm()\n{\n\t\/\/validate timespent field\n\tif((mainform.tm_timespent.text == 0) && (mainform.tm_timespent.mandatory)) \n\t{\n\t\tMessageBox(\"You must enter the amount of time you spent on this action.\", MB_OK);\n\t\treturn false;\t\/\/ Make sure that the time spent is entered\n\t}\n    \n\t\/\/validate description field\n\tif(mainform.tb_description.text == \"\")\n\t{\n\t\tMessageBox(\"You must enter an update in the Action Description\", MB_OK);\n\t\treturn false;\t\/\/ Make sure we have some update text\n\t}\n\n\t\/\/validate actionsource field\n\tif(mainform.tb_actionsource.mandatory == true  && mainform.tb_actionsource.text.length == 0)\n\t{\n\t\tvar Message = \"The field '\" + mainform.lbl_actionsource.text + \"' must be completed before you can apply this action\";\n\t\tMessageBox(Message);\n\t\treturn false;\n\t}\n\t\n\t\/\/validate general update field\n\tif(mainform.tb_generalupdate.mandatory == true && mainform.tb_generalupdate.text.length == 0)\n\t{\n\t\tvar Message = \"The field '\" + mainform.lbl_actiontype.text + \"' must be completed before you can apply this action\";\n\t\tMessageBox(Message);\n\t\treturn false;\n\t}\n\t\n\tif(_swdoc.check_mandatory_fields(\"opencall\",mainform))\n\t{\n\t\treturn _swdoc.check_mandatory_fields(\"updatedb\",mainform);\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n\n\treturn true;\n}\t\/\/end _swdoc.ValidateForm\n\n\/\/-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table\n\/\/--\t\t\t\t\talert user if need be and return false\t\t\t\t\t\t\nfunction check_mandatory_fields(strTable,oForm)\n{\n    for (var x = 0; x<oForm.elements.length;x++)\n    {\n        var element = oForm.elements[x];\n        if ((element.mandatory) && (element.text ==\"\") && (element.visible))\n        {\n            var colName = \"\";\n            var fieldName = \"(not specified)\";\n            if(element.dataRef!=\"\")\n            {\n            \tvar arrInfo = element.dataRef.split(\".\");\n            \tvar strTable = arrInfo[0];\n            \tvar colName = arrInfo[1];\n            \tvar fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;\n            }\n            MessageBox(\"The field '\" + fieldName + \"' is a mandatory field and must be completed.\");\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction replaceIllegalFileCharacters(strText)\n{\n\t\/\/-- This function is used to replace characters in the passed in string that \n\t\/\/-- are not suitable for use in filenames and return the modified string \n\t\n\tstrOutput = strText;\n\tstrReplacement = \"-\";\n\tvar i = 0;\n\t\n\twhile(i < strOutput.length)\n\t{\n\t\tstrOutput = strOutput.replace('\/', strReplacement);\n\t\tstrOutput = strOutput.replace(':', strReplacement);\n\t\tstrOutput = strOutput.replace('*', strReplacement);\n\t\tstrOutput = strOutput.replace('?', strReplacement);\n\t\tstrOutput = strOutput.replace('\"', strReplacement);\n\t\tstrOutput = strOutput.replace('\\'', strReplacement);\n\t\tstrOutput = strOutput.replace('<', strReplacement);\n\t\tstrOutput = strOutput.replace('>', strReplacement);\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn strOutput;\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"557","height":"301","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"tb_description","type":"Field","group":"Tab1:0"},"appearance":{"index":"0","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"198","left":"17","right":"537","bottom":"282"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"data":{"binding":"updatedb.updatetxt"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"true","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"CaptionPanel2","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"1","caption":"Details","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"29","left":"4","right":"395","bottom":"136"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"dt_updatedate","type":"Field"},"appearance":{"index":"2","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"73","left":"11","right":"218","bottom":"91"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"rawColumns":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0","borderColor":"#c0c0c0"}}},{"general":{"name":"tm_timespent","type":"Field"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"73","left":"227","right":"286","bottom":"91"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Minute Time Period","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"5","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_actionsource","type":"Field"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"110","left":"11","right":"218","bottom":"128"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"Internal","listItems":"Internal|3rd Party|","borderColor":"#c0c0c0","sqlSource":"swdata","distinctTable":"swlists","distinctColumn":"value","displayColumn":"display_name","listFilter":"lid=OLA-ACTION-SOURCE","storedQuery":"common.getSwList"}}},{"general":{"name":"tb_generalupdate","type":"Field"},"appearance":{"index":"5","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"110","left":"227","right":"388","bottom":"128"},"scaling":{"top":"0","left":"25","right":"50","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"General Update","listItems":"General Update|Support Re-Assignment|Service Level Change|","borderColor":"#c0c0c0","sqlSource":"swdata","distinctTable":"swlists","distinctColumn":"value","displayColumn":"display_name","listFilter":"lid=OLA-ACTION-TYPE","storedQuery":"common.getSwList"}}},{"general":{"name":"flg_updatepublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"6","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"56","left":"405","right":"534","bottom":"74"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Update to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_slaresponse","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"7","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"76","left":"405","right":"546","bottom":"94"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Mark as SLA response^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"Tab1","type":"TabControl","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"8","caption":"Tab1","backgroundColor":"#ded7ce","foregroundColor":"#ffffff","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"170","left":"7","right":"546","bottom":"290"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"tabStyle":"Top","tabSize":"19","items":{"item":[{"name":"Description","properties":"56=#d1e0ee|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#d1e0ee"}}},{"name":"File Attachments","properties":"56=#ffcc66|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#ffcc66"}}}]},"selectedTextFont":{"@size":"8","#text":"Arial"},"selectedTextColor":"#000000","deselectedTextColor":"#000000","tabSlopeLeft":"2","tabSlopeRight":"2","deselectedTabHeightOffset":"1","tabSpacing":"0","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"tabStyle":"0"}}},{"general":{"name":"fl_attachslist","type":"FileListTable","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"true","horizontalGridLines":"true","autoLoad":"true","allowMultiSelect":"true"},"group":"Tab1:1"},"appearance":{"index":"9","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"198","left":"16","right":"467","bottom":"282"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"File Name","width":"188","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Size","width":"70","image":"-1","dataColumn":"1"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Last Modified","width":"120","image":"-1","dataColumn":"2"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"false"},"textLineCount":"0","textInputFormat":"Text","name":"Full Local Path","width":"100","image":"-1","dataColumn":"3"}]},"sortColumn":"-1","sortDescending":"false","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"borderColor":"#c0c0c0"}}},{"general":{"name":"Rect1","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","backgroundColor":"#d4d0c8","foregroundColor":"#dddddd","font":{"@size":"0"},"borderStyle":"Rectangle","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"0","left":"0","right":"558","bottom":"25"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"true","protected":"false","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"btn_update","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"},"group":"Rect1"},"appearance":{"index":"11","caption":"Update","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"1","left":"8","right":"78","bottom":"24"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1","eventButtonIcon":"ImageList=Hold Call;IconIndex=4","backgroundColor":"#ff9900"}}},{"general":{"name":"btn_addfile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"12","caption":"Add","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"195","left":"475","right":"539","bottom":"219"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"ImageList=Helpdesk Utility Icons;IconIndex=74"}}},{"general":{"name":"btn_removefile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"13","caption":"Remove","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"225","left":"475","right":"539","bottom":"249"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1"}}},{"general":{"name":"btn_updateassign","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"14","caption":"Update and Assign","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"470","left":"320","right":"444","bottom":"493"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1","eventButtonIcon":"ImageList=Hold Call;IconIndex=3","eventButtonIconAlign":"0","backgroundColor":"#ff9900"}}},{"general":{"name":"lbl_actiontype","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"15","caption":"Action Type","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"94","left":"225","right":"287","bottom":"106"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_actionsource","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"16","caption":"Action Source","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"94","left":"9","right":"82","bottom":"106"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"17","caption":"Time Spent","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"57","left":"225","right":"282","bottom":"71"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_datetime","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"18","caption":"Date\/Time of Update","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"57","left":"8","right":"120","bottom":"71"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"btn_addfile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"19","caption":"Attach File","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"1","left":"456","right":"545","bottom":"24"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"ImageList=Helpdesk Utility Icons;IconIndex=74","backgroundColor":"#ff9900"}}},{"general":{"name":"CaptionPanel3","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"20","caption":"Options","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"29","left":"403","right":"552","bottom":"136"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"CaptionPanel1","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"21","caption":"Other Information","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"142","left":"4","right":"552","bottom":"297"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"flg_addtoparentdiary","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"22","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"96","left":"405","right":"557","bottom":"113"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","textLineCount":"0","textInputFormat":"Text","properties":{"borderColor":"#d3c9b6","image":"#eeeeee","flagItems":"Add update to parent^1|","disabledBackgroundColor":"#eeeeee","defaultValue":"1"}}},{"general":{"name":"btn_update1","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"23","caption":"Update","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"0","left":"0","right":"70","bottom":"23"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1","eventButtonIcon":"ImageList=Hold Call;IconIndex=4","backgroundColor":"#ff9900"}}},{"general":{"name":"btn_updateassign1","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"24","caption":"Update and Assign","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"0","left":"76","right":"200","bottom":"23"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1","eventButtonIcon":"ImageList=Hold Call;IconIndex=3","eventButtonIconAlign":"0","backgroundColor":"#ff9900"}}}]},"javascript":{"methods":{"method":[{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\/*\n\t\tCreated by Hornbill Systems\n\t\t\n\t\tUpdates\n\t\t-------\n\t\t\n\t\tCode\tBug\t\tDate\t\tAuthor\t\t\t\t\tDescription\n\t\t-----------------------------------------------------------------------------------------\n\t\tind01\t57303\t11\/05\/07\tIvan Nicholas Dorosh\tProblem with multiple calls, this is due to the state of \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe objects when they are saved.  The form was expecting \n\t\t\t\tthese to be in a visible, state.  This would be fixed by resetting the form values to visible, however\n\t\t\t\tif the state of the fields were invisible and the form saved, the issue would re-occur. Therefore my \n\t\t\t\tsolution is to force them to be visible on initial load.\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t*\/\n\t\n\t\/\/ind01\n\t\/\/mainform.tb_target.visible = true;\n\tapp._evi(mainform.flg_slaresponse, true);\n\tapp._evi(mainform.flg_updatepublic, true);\n\t\/\/ind01 end\n\t\n\t\/\/ Set form with defaults set:\n\n\t\/\/ if analyst does not have permission to assign calls, then make the Update and Assign button invisible.\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANASSIGNCALLS) || _swdoc.bOnHold)\n\t{\n\t\tapp._evi(btn_updateassign, false);\n\t}\n\t\n\t\/\/ if the analyst does not have permission to change call statuses, and there is more than one call passed, and these\n\t\/\/ do not have the same call status *or* any of the calls are of ineligible status, disable the \"assign\" button\n\t\/\/ ineligible status is anything but unassigned or unaccepted\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t{\n\t\tif((_swdoc.nUnaccepted > 0 && _swdoc.nUnassigned > 0) || (_swdoc.nUnaccepted + _swdoc.nUnassigned !== _swdoc.arrCallRefs.length))\n\t\t{\n\t\t\tapp._evi(btn_updateassign, false);\n\t\t}\n\t}\n\t\n\t\/\/ set update date to current time\n\tapp._eva(dt_updatedate, (_swdoc.dtCurrentTime.getTime()\/1000));\n\t\n\t\/\/ if analyst has permission to backdate calls, make update time editable\n\t\n\tif(app.session.CanBackdateCallActions())\n\t{\n\t\tapp._ero(dt_updatedate, false);\n\t\tapp._een(lbl_datetime, true);\n\t}\n\t\n\t\n\t\/\/ if the analyst's default is to make the update private, then check the Make Private box.\n\tapp._eva(flg_updatepublic, app.session.IsDefaultOption(ANALYST_DEFAULT_UPDATEPRIVATE));\n\n\n\t_swdoc.check_sla_response_flag();\n\t\t\n\tvar db = new SqlQuery;\n\t\n\n\t\/\/if this form has been called with attachments, add them to the attachments list\n\tvar index = 0;\n\tvar bAreAttachments = false;\n\t\n \twhile(_swdoc._form[\"attach\"+index]) \n \t{\n \t\tbAreAttachments = true;\n    \tfl_attachslist.AddAttachment(_swdoc._form[\"attach\" + index]);\n\t\tindex++;\n \t} \n \t\n \t\/\/if the analyst does not have permissions to add files to calls, make the file attachments box invisible\n \t\/\/UNLESS there are file attachments being included from the email which called this form, in which case\n \t\/\/show the file attachments, but make the Add and Remove buttons invisible\n \t\n \tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANATTACHFILESTOCALLS, false))\n \t{\n \t\tif(!bAreAttachments)\n \t\t{\n \t\t\tTab1.ShowTabItem(1,false);\n \t\t}\n \t\telse\n \t\t{\n \t\t\tapp._evi(btn_addfile, false);\n \t\t\tapp._evi(btn_removefile, false);\n \t\t}\n \t}\n \t\n\t\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  SLAs \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ \n\t\/\/ if multiple calls, disable and write \"multiple calls\"  \n\tif (_swdoc.arrCallRefs.length > 1)\n\t{\n\t\n\t}\n\telse\n\t{\n\t\tvar strParams = \"crf=\"+app.pfu(_swdoc.arrCallRefs[0]);\n\t\tdb.InvokeStoredQuery(\"form\/updatecall\/get_ola_sla_details\", strParams);\n\t\t\n\t\tif(db.Fetch())\n\t\t{\n\t\t\tif(db.GetValueAsString(0))\n\t\t\t{\n\t\t\t\t_swdoc.strOrigOwner =db.GetValueAsString(3);\n\t\t\t\t_swdoc.strSupportGroup =db.GetValueAsString(2);\n\t\t\t}\n\t\n\t\t\tif(db.GetValueAsString(1) == \"_THIRDPARTY\")\n\t\t\t{\n\t\t\t\tapp._ete(flg_slaresponse, \"Mark as Third Party SLA Response\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tdb.Reset();\n\n}"},{"name":"dt_updatedate_OnValueChanged","code":"dt_updatedate_OnValueChanged(strValue)\n{\n\t\/\/ TODO: Add your event handler code here\n\n\t\/\/ Find out what time the date\/time is being changed.  This number will be used to make sure that the analyst is\n\t\/\/ not trying to change the update to a time in the future.\n\t\/\/ The time the form was opened will be checked against the user's maximum backdate period\n\t\/\/ to make sure that they are not trying to backdate this update too far.  The reason for this is that the analyst\n\t\/\/ may ostensibly backdate from the max period before the form was opened, but for checking times in the future,\n\t\/\/ this would error if they spend any time editing the form.  \n\t\n\t\/\/ Get the backdate period that the analyst is trying to backdate to\n\tvar dtBackdatePeriod = _swdoc.dtCurrentTime.getTime() - (dt_updatedate.value * 1000);\n\t\/\/ calculate the actual time the analyst can backdate to, based on current time - maximum backdate period\n\t\n\tvar dtMaxBDTime = new Date();\n\t\t\n\t\/\/ GetMaxiumumBackdatePeriodAllowed is stored in seconds.  Convert to milliseconds to obtain actual\n\t\/\/ maximum backdate time.\n\tdtMaxBDTime.setTime(_swdoc.dtCurrentTime.getTime() - (app.session.GetMaxBackdatePeriodAllowed() * 1000));\n\t\n\n\t\/\/ ensure that the backdate time entered is not in the future\n\tif(dt_updatedate.value > app.global.GetCurrentEpocTime())\n\t{\n\t\tvar message = \"Forwarding call updates is not permitted.\";\n\t\tMessageBox(message, MB_ICONEXCLAMATION | MB_OK);\n\t\tapp._eva(dt_updatedate, app.global.GetCurrentEpocTime());\n\t\treturn;\n\t}\n\n\t\/\/-- required for modeless message box\n\tvar funcCheckBackDateTime = function()\n\t{\n\t\t\/\/ make sure that the backdate time is not prior to the last previous update time for any of the calls being updated\n\t\tSqlRecordSetObj = new SqlQuery;\n\t\t\n\t\tvar strParams = \"crfs=\"+app.pfu(_swdoc._form[\"callrefs\"]);\n\t\tSqlRecordSetObj.InvokeStoredQuery(\"form\/updatecall\/get_time_of_last_update\", strParams);\n\t\tif(SqlRecordSetObj.Fetch())\n\t\t{\n\t\t\tvar dtLastUpdate = new Date();\n\t\t\tdtLastUpdate.setTime(SqlRecordSetObj.GetValueAsNumber(0));\n\t\t\t\n\t\t\tif(dtLastUpdate > (dt_updatedate.value * 1000))\n\t\t\t{\n\t\t\t\tvar message = \"You have chosen to backdate this action \\nto a time before than the last action was carried out against one of the selected calls. This is not allowed!\\n\\n\\nThe last action was carried out on \";\n\t\t\t\tMessageBox(message + dtLastUpdate.toLocaleString(), MB_ICONQUESTION | MB_OK);\n\t\t\t\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ ensure that the backdate period does not exceed the analyst's rights\n\tif((dtBackdatePeriod\/1000) > app.session.GetMaxBackdatePeriodAllowed())\n\t{\n\t\tvar message = \"The earliest time to which you can backdate calls is \"+dtMaxBDTime.toLocaleString()+\".\\n\\nDo you want to use this time and date?\";\n\t\t\n\t\tMessageBox(message, MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t{\n\t\t\tif (intDecision === 6)\n\t\t\t{\n\t\t\t\tapp._eva(dt_updatedate, dtMaxBDTime.getTime()\/1000);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tapp._eva(dt_updatedate, app.global.GetCurrentEpocTime());\n\t\t\t\tfuncCheckBackDateTime();\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\tfuncCheckBackDateTime();\n\t}\n}"},{"name":"btn_addfile_OnPressed","code":"btn_addfile_OnPressed()\n{\n\tfl_attachslist.AddFiles();\n}"},{"name":"btn_removefile_OnPressed","code":"btn_removefile_OnPressed()\n{\n\t\/\/ remove the highlighted attachment from the list\n\tfl_attachslist.RemoveSelectedFiles();\n}"},{"name":"tm_timespent_OnValueChanged","code":"tm_timespent_OnValueChanged(strValue)\n{\n\tif (tm_timespent.value < 1 || tm_timespent.value > 60000)\n\t{\n\t\tMessageBox(\"I am sorry, you can only enter values between 1 minute and 1000 hours.\");\n\t\tapp._eva(tm_timespent, 5);\n\t}\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- When a Field value changes we set this variable to true.  \n\t\/\/-- We will then check this when closing our form to see if there have been any changes that we need to save\n\t_swdoc.bFormFieldChanged = true;\n\n\t\n}"},{"name":"btn_update1_OnPressed","code":"btn_update1_OnPressed()\n{\n\t\/\/ Validate Form\n\tif(!_swdoc.ValidateForm())\n\t{\n\t\treturn;\n\t}\n\n\tvar funcUnlockReset = function()\n\t{\n\t\t\/\/ Unlock our call(s)\n\t\tapp.global.UnlockCalls(_swdoc.strIncomingCallrefs);\n\t\n\t\t_swdoc.ResetData();\n\t\t_swdoc.CloseForm();\n\t}\n\t\n\t\/\/ Update Calls Fun -- this will be defined globally, so that we can reuse the code\n\t\/\/ for the Update and Assign option\t\n\tvar x = _swdoc.UpdateCalls();\n\tif(x)\n\t{\n\t\tif(_swdoc.bFormFieldChanged)\n\t\t{\n\t\t\tMessageBox(\"You have unsaved data on this form. Do you still want to close this form?\", MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t\t{\n\t\t\t\tif (intDecision === IDNO)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfuncUnlockReset();\t\n\t\t\t\t}\n\t\t\t});\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfuncUnlockReset();\n\t\t}\n\t}\t\n}"},{"name":"btn_updateassign1_OnPressed","code":"btn_updateassign1_OnPressed()\n{\n\t\/\/ Validate Form\n\tif(!_swdoc.ValidateForm())\n\t{\n\t\treturn;\n\t}\n\tvar analChosenAnalyst = new PickAnalystDialog;\n\tanalChosenAnalyst.Open(\"Group\/Analyst Picker\",function(analChosenAnalyst)\n\t{\n\t\tif(!analChosenAnalyst)\n\t\t{\n\t\t\t return;\n\t\t}\t\n\t\t\t\n\t\t\/\/ Get an Analyst to assign call to\t\t\n\t\tvar bAssignedToThirdParty = false;\n\t\tvar strAnalyst = \"\";\n\t\tvar strSupportGroup = \"\";\n\t\n\t\t\/\/ check if a group id and analyst id have been chosen, and if the group is Third Party.\n\t\tif(analChosenAnalyst.groupid.length)\n\t\t{\n\t\t\tstrSupportGroup = analChosenAnalyst.groupid;\n\t\t\tif(analChosenAnalyst.analystid.length)\n\t\t\t{\n\t\t\t\tstrAnalyst = analChosenAnalyst.analystid;\n\t\t\t}\n\t\n\t\t\t\/\/-- F0098059\n\t\t\tif(analChosenAnalyst.groupid == \"_THIRDPARTY\")\n\t\t\t{\n\t\t\t\tbAssignedToThirdParty = true;\n\t\t\t\t\/\/-- nwj 12.05.2009 - applied cbs fix from default to here\n\t\t\t\t\/\/-- F0070476 - CB - we add the 3rd party contract if any\n\t\t\t\tif(analChosenAnalyst.tpcontract.length)\n\t\t\t\t{\n\t\t\t\t\tstrAnalyst = analChosenAnalyst.tpcontract;\n\t\t\t\t\tstrSupportGroup = analChosenAnalyst.analystid;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\/\/ ensure that there is no reason not to assign this call to this analyst\n\t\tif(analChosenAnalyst.analystid.length)\t\/\/ Only check if we have chosen an analyst\n\t\t{\n\t\t\tif(!bAssignedToThirdParty)\n\t\t\t{\n\t\t\t\tanalystObj = app.session.GetAnalystStatus(analChosenAnalyst.analystid);\n\t\t\t\tif(!analystObj)\n\t\t\t\t{\n\t\t\t\t\tMessageBox(\"Unable to determine analyst status\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\/\/ if the logged-in analyst does not have \"Can Change Call Status\" permissions, then\n\t\t\t\/\/ he\/she can only assign unaccepted calls to an analyst, or unassigned calls to a group.\n\t\t\t\/\/ nothing else is permitted.\n\t\t\t\n\t\t\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t\t\t{\n\t\n    \t\t\tif (_swdoc.nUnassigned == _swdoc.arrCallRefs.length)\n    \t\t\t{\n        \t\t\t\/\/can assign to a group  only \n        \t\t\tMessageBox(\"I am sorry, this call can only be assigned to a group, not an analyst.\");\n        \t\t\treturn;\n   \t\t\t\t} \n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\/\/ if the analyst is blocked from call assignment, do not allow assignment\n\t\t\t\n\t\t\tif((!bAssignedToThirdParty)&&(analystObj.bAssignBlocked))\n\t\t\t{\n\t\t\t\tMessageBox(\"Assigning calls to this analyst has been disallowed by the system administrator.\", MB_ICONSTOP);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t\/\/-- required for modeless message box\n\t\t\tvar funcUpdateCalls = function()\n\t\t\t{\n\t\t\t\t\/\/ Update Calls Function -- this is being defined globally so that we can reuse it for the Update Call form\n\t\t\t\tif (_swdoc.UpdateCalls(strSupportGroup,strAnalyst,bAssignedToThirdParty))\n\t\t\t\t{\n\t\t\t\t\t_swdoc.CloseForm();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\/\/-- required for modeless message box\n\t\t\tvar funcCheckMaxCalls = function()\n\t\t\t{\n\t\t\t\t\/\/ If this analyst has a maximum number of calls set, make sure that this number has not been exceeded\n\t\t\t\tif((!bAssignedToThirdParty)&&(analystObj.nMaxAssignedCalls > 0) )\n\t\t\t\t{\t\n\t\t\t\t\tvar nCount = app.g.sqs_rowcount(\"count\/assigned_calls\", \"aid=\"+app.pfu(analChosenAnalyst.analystid), true);\n\t\t\t\t\tif(nCount >= analystObj.nMaxAssignedCalls)\n\t\t\t\t\t{\n\t\t\t\t\t\tMessageBox(\"The Maximum Call Assignment count has been reached for this analyst. No call assignment possible.\", MB_ICONSTOP);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\n\t\t\t\/\/ if analyst has an unavailable status, display away message and confirm assignment\n\t\t\tif(!bAssignedToThirdParty)\n\t\t\t{\n\t\t\t\tvar strAnalystMessage = \"\";\n\t\t\t\tswitch(analystObj.nStatus)\n                {\n                    case ANALYST_STATUS_ATLUNCH:\n                        strAnalystMessage = \"is at lunch\";\n                        break;\n                    case ANALYST_STATUS_ONTRAINING:\n                        strAnalystMessage = \"is on training\";\n                        break;\n                    case ANALYST_STATUS_ONHOLIDAY:\n                        strAnalystMessage = \"is on holiday\";\n                        break;\n                    case ANALYST_STATUS_INAMEETING:\n                        strAnalystMessage = \"is in a meeting\";\n                        break;\n                    case ANALYST_STATUS_OUTOFOFFICE:\n                        strAnalystMessage = \"is currently out of the office\";\n                        break;\n                    case ANALYST_STATUS_DONOTDISTURB:\n                        strAnalystMessage = \"has requested not to be disturbed\";\n                        break;\n                    default:\n                        break;\n                }\n                if (strAnalystMessage !== \"\")\n                {\n                    MessageBox(analChosenAnalyst.analystid + \" \" + strAnalystMessage + \".\\n\\n\" + analystObj.strMessage + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO,function(intDecision)\n                    {\n                        if (intDecision !== IDYES)\n                        {\n                        \treturn;\n                        }\n                        else\n                        {\n                        \tfuncCheckMaxCalls();\n                        \tfuncUpdateCalls();          \n                        }\n                    });           \n                }\n                else\n                {\n                \tfuncCheckMaxCalls();\n                \tfuncUpdateCalls();\n                }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncCheckMaxCalls();\n                funcUpdateCalls();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/being assigned to group\n\t\t\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t\t\t{\n\t\t\t\tif (_swdoc.nUnaccepted == _swdoc.arrCallRefs.length)\n\t\t\t\t{\n        \t\t\t\/\/can assign to an analyst  only \n        \t\t\tMessageBox(\"I am sorry, this call can only be assigned to an analyst, not a group.\");\n        \t\t\treturn;\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\tfuncUpdateCalls();\n    \t\t\t}\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t\tfuncUpdateCalls();\n    \t\t}\n\t\t}\n\t});\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{"methods":{"method":[{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\/\/ Set form with defaults set:\n\t\t\n\t\/\/ if analyst has permissions to assign calls, then make the Update and Assign button visible.\n\tif (HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANASSIGNCALLS)){\n\t\tapp._evi(btnUpdateAssig, true);\n\t}\n\t\n\t\/\/ set update date to current time\n\tapp._eva(dt_updatedate, (_swdoc.dtCurrentTime.getTime()\/1000));\n\t\n\t\/\/ if analyst does not have permission to backdate calls, make update time read-only\n\tif (!IsAllowedToBackDateCallUpdate()){\n\t\tapp._ero(dt_updatedate, true);\n\t}\n\t\n\t\/\/ if the analyst's default is to send an email on update, check the email box\n\tapp._ete(checkEmailCustomer, (IsDefaultOption(ANALYST_DEFAULT_UPDATESENDEMAIL) ? \"1\":\"0\"));\n\t\n\t\/\/ if the analyst's default is to make the update private, then check the Make Private box.\n\tapp._ete(checkUpdatePublic, (IsDefaultOption(ANALYST_DEFAULT_UPDATEPRIVATE) ? \"1\":\"0\"));\n\t\n\t\/\/ if the form has been passed update text, set the text on this form to the passed text\n\tif(_swdoc.strUpdateText){\n\t\tapp._ete(txtDescription, _swdoc.strUpdateText); \/\/strUpdateText is set in the _swdoc.OnFormLoading in the Configuration\n\t\tapp._eva(txtDescription, strUpdatetext); \n\t}\n\n\t\/\/ if the calls have not been responded to previously, then give the analyst the option of marking this as the SLA response\n\t\t\n\tSqlRecordSetObj = new SqlQuery;\n\t\t\n\tvar strParams = \"crfs=\"+app.pfu(_swdoc._form[\"callrefs\"]);\n\tSqlRecordSetObj.InvokeStoredQuery(\"form\/updatecall\/get_resp_details\", strParams);\n\t\n\tif(SqlRecordSetObj.Fetch())\n\t{\n\t\tvar nCount = SqlRecordSetObj.GetValueAsNumber(0);\n\t\t\t\n\t\tif(nCount > 0)\n\t\t{\n\t\t\tapp._evi(flg_checkMarkSLAResponse, true);\n\t\t}\n\t}\t\n\n\t\/\/if this form has been called with attachments, add them to the attachments list\n\tvar index = 1;\n \twhile(_swdoc._form[\"Attach\"+index]) {\n      AttachsList.newFile = _swdoc._form[\"Attach\" + index];\n      index++;\n \t}\n\t\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  SLAs \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ display the SLA and fix time for the first call ref.  \n\n\tvar strParams = \"crf=\"+app.pfu(_swdoc.arrCallRefs[0]);\n\tSqlRecordSetObj.InvokeStoredQuery(\"form\/updatecall\/get_ola_sla_details\", strParams);\n\t\t\n\tif(SqlRecordSetObj.Fetch())\n\t{\n\t\tapp._ete(txt_sla , SqlRecordSetObj.GetValueAsString(0));\n\t\tif (SqlRecordSetObj.GetValueAsString(1) == \"_THIRDPARTY\")\n\t\t{\n\t\t\tapp._ete(flg_checkMarkSLAResponse, \"Mark as Third Party SLA Response\");\n\t\t}\n\t}\n\t\n\t\/\/ if the analyst does not have permissions to change SLAs, or if there is more than one call passed, disable the SLA box & text.\n\tif (!HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCHANGEPRIORITY) || _swdoc.arrCallRefs.length > 1 || _swdoc.Status == CS_ONHOLD)\n\t{\n\t\tapp._een(txt_SLAStaticText, false);\n\t\tapp._een(txt_sla, false);\n\t}\n\n\tSqlRecordSetObj.Reset();\n   \t\n   \t\/\/ if the data dictionary calls the priority something other than \"SLA\", change the label\n   \tif(dd.tables[\"updatedb\"].IsColumnDefined(\"priority\"))\n   \t{\n\t\t\tapp._ete(txt_SLAStaticText, dd.tables[\"updatedb\"].columns[\"priority\"].DisplayName);\n\t}\n\t\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ FIX BY \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ set the Fix By time to the first \n   \t\n     \t\/*\n     \tSqlRecordSetObj.Query(\"SELECT fixby FROM opencall_sla WHERE callref = \" + _swdoc.arrCallRefs[0] + \" AND fix_ctr > 0\", \"sw_systemdb\");\n     \t\n     \tif(SqlRecordSetObj.Fetch())\n\t\t{\n\t\t\tTarget.readOnly = false;\n\t\t\tTarget.text = SqlRecordSetObj.GetValueAsString(0);  \n\t\t\t_swdoc.bTargetFixtimeChanged = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tTarget.text = app.global.GetCurrentEpocTime();\n\t\t}\n\t\n     \tSqlRecordSetObj.Reset();\n\n\t\t*\/\n}"},{"name":"btnUpdate_OnPressed","code":"btnUpdate_OnPressed()\n{\n\t\/\/ Validate Form\n\tif(!_swdoc.ValidateForm()){\n\t\treturn;\n\t}\n\t\n\tEncodeUpdateMail(_swdoc.MessageSource);\n\t\n\t\/\/ Update Calls Fun -- this will be defined globally, so that we can reuse the code\n\t\/\/ for the Update and Assign option\t\n\t\n\tUpdateCallsFun(\"\");\n\n\t_swdoc.CloseForm();\n\n}"},{"name":"btnUpdateAssig_OnPressed","code":"btnUpdateAssig_OnPressed()\n{\n\t\/\/ Validate Form\n\tif(!_swdoc.ValidateForm())\n\t{\n\t\treturn;\n\t}\n\t\n\t\n\t\/\/ Update Calls Function -- this is being defined globally so that we can reuse it for the Update Call form\n\tUpdateCallsFun();\n\t\/\/ Validate the form\n\n\t\/*\n\n\n\t_swdoc.UpdateText = Description.text;\n\t\n\tvar bAssignedToThirdParty = false;\n\tvar AssignToAnalyst = \"\";\n\tvar AssignTo = \"\";\n\t\n\tvar dlg = new AssignCallPropertySheet;\n    if(dlg.Open() != IDOK)\n    \treturn;\n    \t\n\tif(dlg.groupid.length)\n\t{\n\t\tAssignTo = \"#\";\n\t\tAssignTo += dlg.groupid;\n\t\tif(dlg.repid.length)\n\t\t{\n\t\t\tAssignToAnalyst = dlg.repid;\n\t\t\tAssignTo += \":\";\n\t\t\tAssignTo += dlg.repid;\n\t\t}\n\n\t\tif(dlg.groupid == \"_THIRDPARTY\")\n\t\t\tbAssignedToThirdParty = true;\n\t}\n\t\n\t\n\t\n\tEncodeUpdateMail(_swdoc.MessageSource);\n\t\t\n\tif(!HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANASSIGNCALLS, TRUE))\n\t\treturn;\n\t\t\n\tif(AssignToAnalyst.length)\t\/\/ Only check if we are an analyst\n\t{\n\t\tvar nStatus;\n\t\tvar Message;\n\t\tvar bBassignBlocked = FALSE;\n\t\tvar nMaxAssignedCalls = 0;\n\n\t\tif(!bAssignedToThirdParty)\n\t\t{\n\t\t\tAanalystStat = new AnalystSatusHolder(AssignToAnalyst);\n\t\t\tif(!AanalystStat)\n\t\t\t{\n\t\t\t\tMessageBox(\"Unable to determine analyst status\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tnStatus = AanalystStat.status;\n\t\t\tMessage = AanalystStat.message;\n\t\t\tbBassignBlocked = AanalystStat.assignblocked;\n\t\t\tnMaxAssignedCalls = AanalystStat.maxassigncall;\n\t\t}\n\t\t\n\t\tif(bBassignBlocked)\n\t\t{\n\t\t\tMessageBox(\"Assigning calls to this analysts has been disallowed by the system administrator.\", MB_ICONSTOP);\n\t\t\treturn;\n\t\t}\n\n\t\t\n\t\tswitch(nStatus)\n\t\t{\n\t\tcase ANALYST_STATUS_ATLUNCH:\n\t\t\tif(MessageBox(AssignToAnalyst + \" is at lunch.\\n\\n\" + Message + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn;\n\t\t\tbreak;\n\t\tcase ANALYST_STATUS_ONTRAINING:\n\t\t\tif(MessageBox(AssignToAnalyst + \" is on training.\\n\\n\" + Message + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn;\n\t\t\tbreak;\n\t\tcase ANALYST_STATUS_ONHOLIDAY:\n\t\t\tif(MessageBox(AssignToAnalyst + \" is on holiday.\\n\\n\" + Message + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn;\n\t\t\tbreak;\n\t\tcase ANALYST_STATUS_INAMEETING:\n\t\t\tif(MessageBox(AssignToAnalyst + \" is in a meeting.\\n\\n\" + Message + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn;\n\t\t\tbreak;\n\t\tcase ANALYST_STATUS_OUTOFOFFICE:\n\t\t\tif(MessageBox(AssignToAnalyst + \" is currently out of the office.\\n\\n\" + Message + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn;\n\t\t\tbreak;\n\t\tcase ANALYST_STATUS_DONOTDISTURB:\n\t\t\t\tif(MessageBox(AssignToAnalyst + \" has requested not to be disturbed.\\n\\n\" + Message + \"\\n\\n\" + \"Do you still want to assign the call?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn;\n\t\t\tbreak;\n\n\t\tcase ANALYST_STATUS_AVAILABLE:\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t\tif(nMaxAssignedCalls > 0) \/\/ Only \n\t\t{\n\t\t\tSqlRecordSetObj = new SqlQuery;\n\t\t\tSqlRecordSetObj.Query(\"select count(*) as ct from opencall where status < 16 AND status != \" + CS_RESOLVED + \" and owner = '\" + AssignToAnalyst + \"'\", \"sw_systemdb\");\n\t\t\t\n\t\t\tif(SqlRecordSetObj.Fetch())\n\t\t\t{\n\t\t\t\tvar nCount = SqlRecordSetObj.GetValueAsNumber(0);\n\t\t\t\tif(nCount >= nMaxAssignedCalls)\n\t\t\t\t{\n\t\t\t\t\tMessageBox(\"The Maximum Call Assignment count has been reached for this analyst. No call assignment possible.\", MB_ICONSTOP);\n\t\t\t\t\tSqlRecordSetObj.Reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSqlRecordSetObj.Reset();\n\t\t}\n\t}\n\t\n\tvar hdcon = new HelpdeskSession;\n\t\n\tif(hdcon.Connect())\n\t{\n\t\tvar nCallRef = _swdoc.Callrefs[0]; \n\t\tvar SLAtext = (_swdoc.Callrefs.length > 1) ? \"\" : SLA.text;\n\t\n\t\tif(!_swdoc.bAllowResponse)\n\t\t\tcheckMarkSLAResponse.text = \"0\";\n\t\t\t\n\t\t\/\/ We start a new transaction to update the specified call (complex req)\n\t\tif(hdcon.BeginUpdateCall(_swdoc.CallrefsCommaString))\n\t\t{   \n\t\t\tvar bSendSuccess = hdcon.SendTableValues(_swdoc.GetDataPtr(), \"updatedb\");\n  \t\t\t\n    \t\tif(bSendSuccess && hdcon.SendNumber(\"backdateperiod\", nBackdatePeriod) &&\n\t\t    \thdcon.SendBoolean(\"_acceptmode\", _swdoc.bAcceptMode) &&\n\t\t    \thdcon.SendNumber(\"_targetfixtime\", Target.text) &&\n\t\t    \thdcon.SendBoolean(\"markslaresponse\", checkMarkSLAResponse.text) &&\n\t\t    \thdcon.SendBoolean(\"publicupdate\", checkUpdatePublic.text) &&\n\t\t    \thdcon.SendString(\"priority\", SLAtext) &&\n\t\t    \thdcon.SendString(\"assignto\", AssignTo))\n\t\t    {\n\t\t    \tfor(i=0; i<AttachsList.rowCount();i++)\n\t\t    \t{\n    \t\t\t\tif(!hdcon.SendFile(\"attach\", AttachsList.GetItemText(i,0), AttachsList.GetItemText(i,3)))\n    \t\t\t\t\treturn;\n    \t\t\t}\n       \t\t\t\n    \t\t\tif(hdcon.Commit())\n    \t\t\t{\n    \t\t\t\tif(!hdcon.GetResult())\n    \t\t\t\t\treturn;\n    \t\t\t\t\t\n    \t\t\t\t\n    \t\t\t\t\n    \t\t\t\tvar SessionFilesInfo = \"\";\n    \t\t\t\tif(checkEmailCustomer.text && app.global.IsConnectedToMailServer() && AttachsList.rowCount())\n    \t\t\t\t\tSessionFilesInfo = hdcon.GetSessionFileInfo();\n    \t\t\t\t\t\n    \t\t\t\t\/\/app.global.Sleep(500);\n    \t\t\t\t\t\n    \t\t\t\tif(_swdoc.taskid)\n    \t\t\t\t{\n    \t\t\t\t\tvar ReturnData = hdcon.GetReturnDataStr();\n    \t\t\t\t\ta = ReturnData.split(\".\");\n    \t\t\t\t\t\n    \t\t\t\t\tTempCallRef \t\t= a[0];\n    \t\t\t\t\tCallUpdateIndex \t= a[1];\n    \t\t\t\t\t\n    \t\t\t\t\tif(hdcon.BeginCompleteTask())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!hdcon.SendNumber(\"callref\", _swdoc.Callrefs[0]) ||\n\t\t\t\t\t\t   \t!hdcon.SendNumber(\"taskid\", _swdoc.taskid) ||\n\t\t\t\t\t\t   \t!hdcon.SendNumber(\"callupdateindex\", CallUpdateIndex))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tMessageBox(\"Error writing data during work item completion\", MB_ICONSTOP);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif(!hdcon.Commit())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tMessageBox(\"Error completing work item\", MB_ICONSTOP);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\t\n    \t\t\t\thdcon.StoreEmailAuditTrailJs(_swdoc.Callrefs[0], _swdoc.MessageSource);\n    \t\t\t\t\n    \t\t\t\tif(checkEmailCustomer.text == \"1\")\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/ OK, we are going to send the customer(s) an e-mail message to confirm the \n\t\t\t\t\t\t\/\/ call closure. If we have uploaded file attachments, we can ask the session\n\t\t\t\t\t\t\/\/ for a list of the files. If available, the session variables will include\n\t\t\t\t\t\t\/\/ a _serverpath variable for each file. The returned list, is a list of \n\t\t\t\t\t\t\/\/ strings that is suitable for passing to the compose message function\n\t\t\t\t\t\t\n\t\t\t\t\t\tEmailUpdate(_swdoc.CallrefsCommaString,\n\t\t\t\t\t\t\t\t\tDescription.text, \n\t\t\t\t\t\t\t\t\tSessionFilesInfo, TimeSpent.text,\n\t\t\t\t\t\t\t\t\t\"UpdateCallMailTemplate\", \n\t\t\t\t\t\t\t\t\tTEMPLATE_UPDATECALL );\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t_swdoc.CloseForm();\n    \t\t\t}\t\n\t\t    }\n\t\t}\n\t\t\/\/ We have finished with the connection, close it.    \n\t\thdcon.Close();\n\t}*\/\n\t\n}"},{"name":"btnAdd_OnPressed","code":"btnAdd_OnPressed()\n{\n\t\/\/ TODO: Add your event handler code here\n\tAttachsList.newFile = InvokeCallAttachmentFileDialog();\n}"},{"name":"btnRemove_OnPressed","code":"btnRemove_OnPressed()\n{\n\t\/\/ remove the highlighted attachment from the list\n    for(var i=0; i<AttachsList.rowCount();i++)\n    {\n    \tif(AttachsList.IsRowSelected(i))\n    \t\tAttachsList.RemoveRow(i);\n    }\n}"},{"name":"(User Defined Functions)","code":"\n"},{"name":"MenuButton1_OnPressed","code":"MenuButton1_OnPressed()\n{\n\t\/\/ TODO: Add your event handler code here\n\tMessageBox(\"Hello\");\n\n}"},{"name":"SLA_OnValueChanged","code":"SLA_OnValueChanged(strValue)\n{\n\tvar str = new String (SLA.pickList);\n\tvar strNew = new String (strValue + \"|\");\n\t\n\tif(str.toLowerCase().indexOf( strNew.toLowerCase() ) == -1)\n\t{\n\t\tif(IsAdministrator())\n\t\t{\n\t\t\tif( MessageBox(\"The SLA name you have selected is not valid. Do you want to add a new SLA with that name?\", \n\t\t\tMB_ICONQUESTION | MB_YESNO) == IDYES)\n\t\t\t{\n\t\t\t\tif(Sys_AddNewSLA(strValue))\n\t\t\t\t\tSLA.pickList = str + strNew;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tapp._ete(SLA , \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMessageBox(\"The SLA name you have selected is not valid.\");\n\t\t\tapp._ete(SLA , \"\");\n\t\t}\t\n\t}\n}"},{"name":"dtDateOfUpdate_OnValueChanged","code":"dtDateOfUpdate_OnValueChanged(strValue)\n{\n\n\t\/*\n\tvar dIn\t= new Date();\n    var currentTime\t= Math.round(dIn.getTime()\/1000);\n\tvar updateDateTime = DateOfUpdate.text;\n\tnBackdatePeriod = currentTime - updateDateTime;\n\t\t\n\tif(nBackdatePeriod < 0)\n\t{\n\t\tvar message = \"You have attempted to forward date this call update which is not allowed.\\n\\nDo you want to use the current date and time to update this call.\";\n\t\tif(MessageBox(message, MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\treturn;\n\t\t\n\t\tnBackdatePeriod = 0;\n\t}\n\t\t\n\tif(!IsAllowedToBackDateCallUpdate() && nBackdatePeriod > 0)\n\t{\n\t\tvar message = \"You have attempted to backdate this call update but you do not have sufficient privileges to do so\\n\\nDo you want to use the current date and time to update this call?\"\n\t\tif(MessageBox(message, MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\treturn;\n\t\tnBackdatePeriod = 0;\n\t}\n\telse\n\tif(nBackdatePeriod > GetMaximumBackdatePeriodAllowed())\n\t{\n\t\tvar dTime\t= new Date();\n\t\tdTime = (currentTime - GetMaximumBackdatePeriodAllowed()) * 1000;\n\t\tvar message = \"You have attempted to backdate this call update further than you have sufficient privileges to do so.\\n\\nDo you want to use the oldest date\/time that you are allowed: \";\n\t\tif(MessageBox(message + dTime.toLocalString(), MB_ICONQUESTION | MB_YESNO) != IDYES)\t\t\t\/\/SwGetInternalDateTimeFormat\n\t\t\treturn;\n\t\t\t\n\t\tnBackdatePeriod = GetMaximumBackdatePeriodAllowed();\n\t}\n\t\tvar CommaSeperatedCallrefs = _swdoc.Callrefs;\n\tSqlRecordSetObj = new SqlQuery;\n\t\n\tSqlRecordSetObj.Query(\"SELECT max(updatetimex) AS udtime FROM updatedb WHERE callref IN (\" + CommaSeperatedCallrefs + \")\", \"sw_systemdb\");\n\tif(SqlRecordSetObj.Fetch())\n\t{\n\t\tvar tLastUpdate = SqlRecordSetObj.GetValueAsNumber(0);\n\t\t\n\t\tif(tLastUpdate > updateDateTime)\n\t\t{\n\t\t\tvar dTime\t= new Date();\n\t\t\tdTime = tLastUpdate;\n\t\t\tvar message = \"You have chosen to backdate this action \\nto a time before than the last action was carried out against one of the selected calls. This is not allowed!\\n\\n\\nThe last action was carried out on \";\n\t\t\tMessageBox(message + dTime.toLocalString(), MB_ICONQUESTION | MB_OK);\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n*\/\n}"},{"name":"dt_updatedate_OnValueChanged","code":"dt_updatedate_OnValueChanged(strValue)\n{\n\t\/\/ TODO: Add your event handler code here\n\n\t\/\/ Find out what time the date\/time is being changed.  This number will be used to make sure that the analyst is\n\t\/\/ not trying to change the update to a time in the future.\n\t\/\/ The time the form was opened will be checked against the user's maximum backdate period\n\t\/\/ to make sure that they are not trying to backdate this update too far.  The reason for this is that the analyst\n\t\/\/ may ostensibly backdate from the max period before the form was opened, but for checking times in the future,\n\t\/\/ this would error if they spend any time editing the form.  \n\t\n\t\/\/ Get the backdate period that the analyst is trying to backdate to\n\tvar dtBackdatePeriod = _swdoc.dtCurrentTime.getTime() - (dt_updatedate.value * 1000);\n\t\/\/ calculate the actual time the analyst can backdate to, based on current time - maximum backdate period\n\t\n\tvar dtMaxBDTime = new Date();\n\t\t\n\t\/\/ GetMaxiumumBackdatePeriodAllowed is stored in seconds.  Convert to milliseconds to obtain actual\n\t\/\/ maximum backdate time.\n\tdtMaxBDTime.setTime(_swdoc.dtCurrentTime.getTime() - (GetMaximumBackdatePeriodAllowed() * 1000));\n\t\n\n\t\/\/ ensure that the backdate time entered is not in the future\n\tif(dt_updatedate.value > app.global.GetCurrentEpocTime())\n\t{\n\t\tvar message = \"Forwarding call updates is not permitted.\";\n\t\tMessageBox(message, MB_ICONEXCLAMATION | MB_OK);\n\t\tapp._eva(dt_updatedate , app.global.GetCurrentEpocTime());\n\t\treturn;\n\t}\n\n\t\/\/ ensure that the backdate period does not exceed the analyst's rights\n\n\tif((dtBackdatePeriod\/1000) > GetMaximumBackdatePeriodAllowed())\n\t{\n\t\t\n\t\tvar message = \"The earliest time to which you can backdate calls is \"+dtMaxBDTime.toLocaleString()+\".\\n\\nDo you want to use this time and date?\";\n\t\tif(MessageBox(message, MB_ICONQUESTION | MB_YESNO) == 6){ \/\/ 6 = YES\n\t\t\tapp._eva(dt_updatedate , dtMaxBDTime.getTime()\/1000);\n\t\t\treturn;\n\t\t}\n\t\telse{\t\n\t\t\tapp._eva(dt_updatedate , app.global.GetCurrentEpocTime());\n\t\t}\n\t}\n\t\/\/ make sure that the backdate time is not prior to the last previous update time for any of the calls being updated\n\tSqlRecordSetObj = new SqlQuery;\n\t\n\tSqlRecordSetObj.Query(\"SELECT max(updatetimex) AS dtthemaxtime FROM updatedb WHERE callref IN (\" + _swdoc._form[\"callrefs\"] + \")\", \"sw_systemdb\");\n\tif(SqlRecordSetObj.Fetch())\n\t{\n\t\tvar dtLastUpdate = new Date();\n\t\tdtLastUpdate.setTime(SqlRecordSetObj.GetValueAsNumber(0));\n\t\t\n\t\tif(dtLastUpdate > (dt_updatedate.value * 1000))\n\t\t{\n\t\t\tvar message = \"You have chosen to backdate this action \\nto a time before than the last action was carried out against one of the selected calls. This is not allowed!\\n\\n\\nThe last action was carried out on \";\n\t\t\tMessageBox(message + dtLastUpdate.toLocaleString(), MB_ICONQUESTION | MB_OK);\n\t\t\t\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\n}"}]}}}]}}}