<?xml version="1.0" encoding="utf-8" ?>
<espForm>
	<configuration>
		<settings>
			<name>itsmEfResolveCloseCallForm</name>
			<title>Resolve Close Call Form</title>
			<printTemplates>
			</printTemplates>
			<options>
				<allowResize>true</allowResize>
				<showMenubar>true</showMenubar>
				<showToolbar>false</showToolbar>
				<showStatusBar>false</showStatusBar>
			</options>
		</settings>
		<tables>
			<table>
				<name>updatedb</name>
				<type>Main Details Table</type>
				<flags>5</flags>
				<assignments>
				</assignments>
			</table>
			<table>
				<name>opencall</name>
				<type>Extended Details Table</type>
				<mainDetailsColumn>callref</mainDetailsColumn>
				<flags>0</flags>
				<assignments>
				</assignments>
			</table>
		</tables>
		<showMeItems>
		</showMeItems>
		<javascript>
			<methods>
				<method>
					<name>OnFormLoading</name>
					<code>
						<![CDATA[OnFormLoading(strFormName, strClass)
{
	_swdoc.intGetCurrentEpocTime = app.global.GetCurrentEpocTime();
	
	//-- If the analyst does not have permissions to modify the status of call
	//-- then they should not be able to resolve/close a call
	if (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))
	{
    	MessageBox("You do not have sufficient privileges to modify calls.  Please contact your system administrator",MB_ICONSTOP);
    	return false;
	}
	
	//-- make sure user is allowed to resolve or close calls
	if( (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS)) && (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS)) )
	{
		MessageBox("You do not have sufficient privileges to resolve or close calls.  Please contact your system administrator",MB_ICONSTOP);	
		return false;
	}

	var boolOLAs = true;
	var strParams = "crfs="+pfu(_swdoc._form["callrefs"]);
	var oRS = app.g.get_sqrecordset("form/resolvecloseform/get_classes_for_calls",strParams);
	while(oRS.Fetch())
	{
		var strClass = app.g.get_field(oRS, "callclass");
		if(strClass!="OLA Task")
			boolOLAs = false;
	}
	if(boolOLAs)
	{
		var strArgs = "in_callrefs=" + _swdoc._form["callrefs"];
		app.OpenForm("itsmEfResolveCloseCallForm_OLT", strArgs, true);
		return false;		
	}

	//-- returns true or false - true keeps form open / false will close form	
	_swdoc.setup_document_variables(function(boolRetVal)
	{
		_swdoc.resetData();
	
		return boolRetVal;
	});
	
	
	
	
}]]>
					</code>
				</method>
				<method>
					<name>OnFormClosing</name>
					<code>
						<![CDATA[OnFormClosing()
{
	if (_swdoc.boolForceClose)
	{
		return true;
	}
	
	var funcFinalProcessing = function()
	{
		if(!_swdoc.CallrefsCommaString.length)
		{	
			_swdoc.ResetData();
			return true;
		}		
		app.global.UnlockCalls(_swdoc.CallrefsCommaString);
		_swdoc.resetData();	
		return true;
	}
	
	//-- Check for Changes to any of the data fields
	if(_swdoc.boolFormFieldChanged)
	{		
		MessageBox("You have unsaved data on this form. Do you still want to close this form?", MB_ICONQUESTION | MB_YESNO, function(intDecision)
		{
			if(intDecision == IDNO)
			{
				return false;
			}
			else
			{
				funcFinalProcessing();
				_swdoc.boolForceClose = true;
				_swdoc.CloseForm();		
			}
		});
	}
	else
	{
		return funcFinalProcessing();
	}	
}]]>
					</code>
				</method>
				<method>
					<name>(User Defined Functions)</name>
					<code>
						<![CDATA[	/*
		Created by Hornbill Systems
		
		Updates
		
		
		Bug		Date		Author					Description
		----------------------------------------------------------------------------
		56943	14/05/07	Ivan Nicholas Dorosh	Ability to set default value for survey.
	
	
	*/

var boolLogMode = false; //-- boolean - is the form being displayed in a logcall forn
var boolClosing = false; //-- boolean - is the call action to close calls/s (if false resolving)
var boolCloseOnly = false;
var boolResolveOnly = false; //-- boolean - is the call for resolving only (not allowed to close)

var arrCallrefs = new Array(); //-- array - holds the callrefs we want to close or resolve
var CallrefsCommaString = "";  //-- string - comma delimted callrefs
var strIssueref = "";		   //-- string - has issue refs in it if we are closing an issue
	
var arrSurveyNameSurvIDs = new Array(); //-- array - holds list of survey ids 
var arrContractNameIDs	 = new Array(); //-- array - holds contract ids
var arrCallStatuss 		 = new Array(); //-- array - holds list of the all the calls status
var arrCallOpenTasks 	 = new Array(); //-- araray - holds list of all the calls tasks

var boolFormFieldChanged = false;	//-- boolean - set to true when formfield is changed. Used when closing form

var boolForceClose = false;

var boolSourceEmail = false; //-- from opened from email
var boolHaveSubject = false; //-- Is there a subject
var boolHaveSurveys = false; //-- are there surveys available

var intFTFAchieved = 0;
var boolMixedFTF = false;
var boolMixedCallClasses = false; //-- boolean are we working with mixed call classes
var boolHavePendingCalls = false; //-- we have calls that are pending
var boolHaveResolvedCalls = false; //-- we have calls that are resolved
var boolMultipleCalls = false; //-- we are working with multiple calls

var boolClosingIssue = false; //-- boolean are we closing calls as part of an issue
var boolMixedCallStatus  = false  //-- boolean are we working with a mixtuer of call states

var intGetCurrentEpocTime = app.global.GetCurrentEpocTime();
var boolSetToMaxBackdatePeriod = false;
var nBackdatePeriod = 0;

var boolHaveQLogDetails = false; //set to true when the call is being resolved or closed from a Quick Log Template 
var intQLogChargeable = 0;
var intQLogKBase = 0;
var intQLogPublic = 0;
var intQLogEmail = 0;
var strQLogFixCode = "";
var strQLogContractId = "";
var intQLogSUnitsDec = 0;

//-- reset bound record so we dont get messages when leaving
function resetData()
{
	_swdoc.ResetModiedFlag("updatedb");
	_swdoc.ResetModiedFlag("opencall");
}

//-- validate form data that user has set
function ValidateForm(funcCallback)
{
	if((_swdoc.updatedb.timespent < 1 || _swdoc.updatedb.timespent > 60000) && (mainform.tb_timespent.mandatory))
	{
		MessageBox("You must enter the amount of time you spent on this action", MB_OK);
		return funcCallback(false);	// Make sure that the time spent is within range
	}

	if(_swdoc.updatedb.updatetxt == "")
	{
		MessageBox("You must enter a description in the Action Description tab.", MB_OK | MB_ICONINFORMATION );
		return funcCallback(false);	// Make sure we have some update text
	}

	//-- check other required fields
	if (!_swdoc.check_mandatory_fields("updatedb",mainform))return funcCallback(false);	
	if (!_swdoc.check_mandatory_fields("opencall",mainform))return funcCallback(false);
	
	//-- Check for available support units
	var boolShow =dd.GetGlobalParamAsString("Application Settings/SupportExternalCompanies")==1;
	if(boolShow)
	{
		if(mainform.tb_avail_units.value!="Unlimited")
		{
			if((mainform.tb_units_assigned.value*1) > (mainform.tb_avail_units.value*1))
			{
				MessageBox("The number of support units entered exceeds those available for the selected contract.  Are you sure you want to continue?", MB_OKCANCEL | MB_ICONINFORMATION, function(intDecision)
				{
					if(intDecision == 2)
					{
						return funcCallback(false);
					}
					else
					{
						return funcCallback(true);
					}
				});
			}
			else
			{
				return funcCallback(true);
			}
		}
		else
		{
			return funcCallback(true);
		}
	}
	else
	{
		return funcCallback(true);
	}
}


//-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table
//--					alert user if need be and return false	
//-- F0095143 - incorrectly checking numeric picklists					
function check_mandatory_fields(strTable,oForm)
{
    for (var x = 0; x<oForm.elements.length;x++)
    {
        var element = oForm.elements[x];
        if ((element.mandatory) && (element.text ==""))
        {
            var colName = "";
            var fieldName = "(not specified)";
            if(element.dataRef!="")
            {
            	var arrInfo = element.dataRef.split(".");
            	var strTable = arrInfo[0];
            	var colName = arrInfo[1];
            	var fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;
            }
            MessageBox("The field '" + fieldName + "' is a mandatory field and must be completed.");
            return false;
        }
    }
    return true;
}

function setup_call_action()
{
	//-- should list box be selectatable
	//-- closing
	
	if ((_swdoc.boolCloseOnly) || (_swdoc.boolClosing))
	{
		if(_swdoc.boolCloseOnly)_swdoc.boolClosing = true;
		//ind01 Ivan Nicholas Dorosh 02/04/07 - Set the text regardless of what the form is set to
		_ete(mainform.cb_callaction,"Close Call");
		
		//-- closing
		//-- If closing call do not allow user to select fix code profile
		//-- due to core product server restrictions
		//ind02 mainform.btnBrowseProfile.enable=_swdoc.boolMixedCallStatus;
		//ind02 mainform.btnGetProfileText.enable = false;		
		//ind02 This code just didn't make sense.  Checked with AndreiT, and confirmed
		// That this should not be enabled for Mixed Call Statuses only.
		_een(mainform.btnBrowseProfile,(_swdoc.boolMixedCallStatus==false));
		_een(mainform.btnGetProfileText,(_swdoc.boolMixedCallStatus==false));
				
		var boolEnableFTF = dd.GetGlobalParamAsNumber("Application Settings/EnableFirstTimeFixWhenClosing", 0);
		_ete(mainform.flg_ftf,_swdoc.intFTFAchieved + "");
		_swdoc.opencall.flg_firsttimefix = _swdoc.intFTFAchieved + "";
		_een(mainform.flg_ftf,((boolEnableFTF)&&(_swdoc.intFTFAchieved==0)));
	}
	else
	{
	
		//ind01 Ivan Nicholas Dorosh 02/04/07 - Set the text regardless of what the form is set to
		_ete(mainform.cb_callaction,"Resolve Call");
		
		//ind02 //-- resolving or could be closing
		//ind02 mainform.btnBrowseProfile.enable=true;
		
		//ind02 This code just didn't make sense.  Checked with AndreiT, and confirmed
		// That this should not be enabled for Mixed Call Statuses only.
		_een(mainform.btnBrowseProfile,(_swdoc.boolMixedCallStatus==false));
		//_een(mainform.btnGetProfileText,(_swdoc.boolMixedCallStatus==false));
		_een(mainform.btnGetProfileText, _swdoc.boolClosing);
		
		//-- NWJ - 23.11.2007 - always enable first time fix
		_een(mainform.flg_ftf,true);
		_ete(mainform.flg_ftf,"0");
		_swdoc.opencall.flg_firsttimefix = "0";	
	}
	
	//-- set menu shortcut
	strAppends = (_swdoc.boolMultipleCalls)?"s":"";
	_emt(mainform.btnResolveClose,("&" + mainform.cb_callaction.text + strAppends));
	_ete(mainform.btnResolveClose,(mainform.cb_callaction.text + strAppends));
	
	//-- setup other flags based on call action	
	_swdoc.setup_charge_flag();
	_swdoc.setup_kbase_flag()	
}

function setup_form_mode()
{
	//-- always make sure fixcode desc is disabled
	_een(mainform.tb_fixcodedescription,false);
	_evi(mainform.btnResolveClose,true);
			
	var bResolveByDefault = app.session.IsDefaultOption(ANALYST_DEFAULT_RESOLVEBYDEFAULT);			
	//-- if user does not have the right to close calls then only allow resolve
	if(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS))
	{
		_een(mainform.cb_callaction,false);
		bResolveByDefault = true;
	}

	//-- do they have option to resolve
	if(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS))
	{
		_een(mainform.cb_callaction,false);
		bResolveByDefault = false;
	}
	
	_swdoc.boolClosing = !bResolveByDefault;
	
	//-- set the default selection for the call action pick list based on the DD entry 
	if((bResolveByDefault) && (!_swdoc.boolHaveResolvedCalls))
	{
		_ete(mainform.cb_callaction,"Resolve Call");
	}
	else
	{
		_ete(mainform.cb_callaction,"Close Call");
	}		
	
	//--
	//-- disable / enable form fields
	_een(mainform.cb_callaction,(!_swdoc.boolHaveResolvedCalls));
	_een(mainform.dt_actiontime,(app.session.CanBackdateCallActions())); //-- can backdate ?
	
	//-- link passed in file attachments and set user perm to add
	_swdoc.setup_file_attachments();
}

function setup_file_attachments()
{
	//--read the passed in attachemnets
	var x=0;
	while(_swdoc._form["attach"+x])
	{
		mainform.fl_attachments.AddAttachment(_swdoc._form["Attach" + x]);
		x++;
	}
	if (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANATTACHFILESTOCALLS,false))
	{
		if(_swdoc._form["Attach1"])
		{
			_evi(mainform.btnAddFile,false);
			_evi(mainform.btnRemoveFile,false);
		}
		else
		{
			mainform.Tab1.ShowTabItem(1,false);
		}
	}
}

//-- 08.02.2007 - NWJ - One function to handle which standard check boxes should be enabled/disabled
//--					checked or unchecked, as old code fglas were set all over the place
function setup_public_flag()
{
	_een(mainform.flg_updatepublic,true);
	
	if (_swdoc.boolHaveQLogDetails)
		_ete(mainform.flg_updatepublic, _swdoc.intQLogPublic);
	else
		_ete(mainform.flg_updatepublic,(app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEPRIVATE) ? "1":"0"));
}

function setup_kbase_flag()
{
	//- -does the user have the right to add to the kbase or we are worknig with multiple calls so dont add
	if((!app.session.HaveRight(ANALYST_RIGHT_C_GROUP,ANALYST_RIGHT_C_CANADDTOKNOWLEDGEBASE)) || (_swdoc.boolMultipleCalls))
	{
		_ete(mainform.flg_addKBase,"0");
		_een(mainform.flg_addKBase,false);
		return;
	}

	//-- We need to check whether this call has been added to the knowledge
	//-- base when it was resolved.	
     if(app.global.IsCallInKnowledgeBase(_swdoc.arrCallrefs[0]))
     {
     	_ete(mainform.flg_addKBase,"0");
		_een(mainform.flg_addKBase,false);
     }
     else
     {
		if (_swdoc.boolHaveQLogDetails)
		_ete(mainform.flg_addKBase,_swdoc.intQLogKBase);
		else
     		_ete(mainform.flg_addKBase,(app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEKNOWLEDGEBASE) ? "1":"0"));
        _een(mainform.flg_addKBase,true);
     }
}

function setup_charge_flag()
{
	if (_swdoc.boolClosing)
	{
		//-- closing
		_een(mainform.flg_chargeable,true);
		if (_swdoc.boolHaveQLogDetails)
			_ete(mainform.flg_chargeable, _swdoc.intQLogChargeable);
		else
			_ete(mainform.flg_chargeable,(app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSECHARGABLE) ? "1":"0"));
	}
	else
	{
		//-- resolving
		_een(mainform.flg_chargeable,false);
		_ete(mainform.flg_chargeable,"0");
	}
}

function setup_email_flag()
{
	//--
	//-- if we have a mailserver and can send mail set flg
	if(app.global.IsConnectedToMailServer() && app.global.CanSendMail())
	{
		_een(mainform.flg_emailcustomer,true);
		if (_swdoc.boolHaveQLogDetails)
			_ete(mainform.flg_emailcustomer, _swdoc.intQLogEmail);
		else	
			_ete(mainform.flg_emailcustomer,((app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSESENDEMAIL)) ? "1":"0"));
	}
	else
	{
		_een(mainform.flg_emailcustomer,false);
		_ete(mainform.flg_emailcustomer,"0");
	}
}

//--
//-- initialise the surveys options
function setup_survey_options()
{
	//-- if they do not have surveys hide options
	if(!app.global.IsSurveyModuleEnabled())
	{
		_ete(mainform.flg_customersurvey,"0");
		_evi(mainform.flg_customersurvey,false);
		_evi(mainform.cb_surveys,false);
	}
	else
	{
		//-- get survey options
		_swdoc.load_survey_list();	

		//-- if we dont have surveys on the system then hide
		if(!_swdoc.boolHaveSurveys)	
		{
			_ete(mainform.flg_customersurvey,"0");
			_een(mainform.flg_customersurvey,false);
			_evi(mainform.cb_surveys,false);
			return false;
		}
		
		//-- have to set to true because if you set to hidden in code and then dev form it saves the state
		_evi(mainform.flg_customersurvey,true);
		_evi(mainform.cb_surveys,true);
			
		//-- not allowed to change send survey options or there arent any surveys to send
		if(app.session.IsDefaultOption(ANALYST_DEFAULT_DISABLESENDSURVEY)) 
		{
			//--code change DavidJH 09.06.05
			_een(mainform.flg_customersurvey,false);
			_ete(mainform.flg_customersurvey,"0");
			return false;
		}
		else
		{
			_een(mainform.flg_customersurvey,true);
		}
		
		//-- default ticked setting
		if(app.session.IsDefaultOption(ANALYST_DEFAULT_SETSENDSURVEY))
		{
			_ete(mainform.flg_customersurvey,"1");
			_een(mainform.cb_surveys,true);
		}
		else
		{
			_ete(mainform.flg_customersurvey,"0");
			_een(mainform.cb_surveys,false);
		}
	}
}

function load_survey_list()
{
	//-- empty the picklist
	mainform.cb_surveys.pickList = "";
	
	//-- select all of the system mailboxes and add all shared mailboxes to an array
	var SqlRecordSetObj	= new SqlQuery;
	
	//-- select all of the surveys and the mailbox they are associated to
	SqlRecordSetObj.Reset();
	SqlRecordSetObj.InvokeStoredQuery("form/resolvecloseform/getsurveys","");
		
	var str = "";
	var selected = "";
	var strTemps = new Array();
	bselecteddefaultsurvey = false;
	
	//-- loop through the surveys and and match those associated to shared mailboxes
	//-- for each survey add it into an array and to the pick list string and when the 
	//-- first survey is found identify it as the default option for the survey picklist
	while(SqlRecordSetObj.Fetch())
	{
		//-- get the recordset value for survey name and id
		var surveyname = SqlRecordSetObj.GetValueAsString("surveyName");
		var surveyid = SqlRecordSetObj.GetValueAsString("surveyid");
		
		//-- add the survey name/id pair into the array
		_swdoc.arrSurveyNameSurvIDs[surveyname] = surveyid;
		
		//-- build the picklist	options string	
		str += surveyname + "|";
		//MessageBox(surveyname)
		_swdoc.boolHaveSurveys=true;			
	}
	
	//-- populate the surveys pick list
	mainform.cb_surveys.pickList = str;
}


function setup_profile_selection()
{

}

function setup_resolution_profile()
{
	//-- disable profile text button
	_een(mainform.btnGetProfileText,false);
	
	//-- if we have pending calls, either set the default from  a quick log template or leave the Resolution field blank
	if (_swdoc.boolHavePendingCalls) 
	{
		if (_swdoc.boolHaveQLogDetails)
		{
			var objFix = app.global.GetResolutionProfileDescription(_swdoc.strQLogFixCode);
			strFixText = objFix.strCodeDesc;	
			//-- nwj if it has a dec text enable button to copy
			_een(mainform.btnGetProfileText,(objFix.strDescription!=""));
			//-- set text desc of code and then set actual code against opencall record
			_ete(mainform.tb_fixcodedescription,strFixText);
			_swdoc.opencall.fixcode = _swdoc.strQLogFixCode;		
		}
		return;
	}
	if (!_swdoc.boolHaveResolvedCalls) return;

	//-- DJH
	//-- 24.01.2006 
	//-- if the call is resolved, pull the resolution text and prepopulate the boxes with this text.
	var aRSfixcodes	= new SqlQuery;
	
	//-- NWJ -  24.01.2006
	//--		Get distinct profile codes for passed in calls
	var strParams = "crfs="+pfu(_swdoc.CallrefsCommaString);
	if (!aRSfixcodes.InvokeStoredQuery("form/resolvecloseform/get_fixcodes",strParams))
    {
		MessageBox("Unable to query call fixcode values. Please contact your Supportworks Administrator.", MB_ICONSTOP);
	}
	else
	{
		//-- NWJ - 24.01.2006
		//-- 	   See if we have more than 1 fixcode
		var strFixCode 	= ""
		var strFixText	= "";
		var intFixCodeCount = 0;
		while(aRSfixcodes.Fetch())
		{
			intFixCodeCount++;			
			//-- we have multiple fixcodes
			if (intFixCodeCount > 1) 
			{
				strFixCode = "";
				strFixText = "<multiple profiles>";
				break;
			}
			strFixCode = aRSfixcodes.GetValueAsString("fixcode");
		}
		
		//-- if we have one fix code we should load this profile
		if (intFixCodeCount == 1)
		{
			var objFix = app.global.GetResolutionProfileDescription(strFixCode);
			strFixText = objFix.strCodeDesc;	
			//-- nwj if it has a dec text enable button to copy
			_een(mainform.btnGetProfileText,(objFix.strDescription!=""));
		}

		//-- set text desc of code and then set actual code against opencall record
		_ete(mainform.tb_fixcodedescription,strFixText);
		_swdoc.opencall.fixcode = strFixCode;		
			
	}//end else query was successful

}

//-- 09.02.2007 - NWJ - initialise the _swdoc variables and state
function setup_document_variables(funcCallback)
{
	//-- store callrefs string and create array
	_swdoc.CallrefsCommaString = _swdoc._form["callrefs"];
	_swdoc.arrCallrefs = _swdoc.CallrefsCommaString.split(",");
	_swdoc.boolMultipleCalls = (_swdoc.arrCallrefs.length>1);
	
	//-- arrays to hold call info
	_swdoc.arrSurveyNameSurvIDs 	= new Array();
	_swdoc.arrCallStatuss 		= new Array();
	_swdoc.arrCallOpenTasks 		= new Array();
				
	//-- if the call does not have active tasks then its ok to lock them - otherwise close form
	var strTaskMsg = _swdoc.check_call_has_active_tasks(_swdoc.CallrefsCommaString);
	if(strTaskMsg!="")
	{
		MessageBox(strTaskMsg,MB_ICONSTOP);
		app.global.UnlockCalls(_swdoc.CallrefsCommaString);
		funcCallback(false);
	}
	else
	{
		//-- lock selected calls for close activity	
		if(!app.global.LockCalls(_swdoc.CallrefsCommaString, "CLOSE"))
		{
			//-- Failed to lock close the form
			funcCallback(false);
		}

		_swdoc.check_call_states_and_classes(_swdoc.CallrefsCommaString, function(boolCheck)
		{
			if(!boolCheck)
			{
				app.global.UnlockCalls(_swdoc.CallrefsCommaString);
				funcCallback(false);
			}
			else
			{
				
				//-- create form title
				_swdoc.create_form_title();
					
				//-- are we resolving only
				_swdoc.boolResolveOnly = (_swdoc._form["resolve"] == "1");
					
				//-- did we come from an email
				_swdoc.boolSourceEmail = (_swdoc._form["_source_email"] == "true");
			
				//-- do we have a subject		
				_swdoc.boolHaveSubject = (_swdoc._form["subject"] == "true");
					
				//--- set update text
				_swdoc.strUpdateText = _swdoc._form["updatetext"];
				
				funcCallback(true);
			}		
		});
	}
}

//-- 09.02.2007 - NWJ - Check if call/s have any active tasks - if so return message.
function check_call_has_active_tasks(strCheckCallrefs)
{
	
	var returnMessage = "";
	var aRS	= new SqlQuery;

	//-- perform a sql check to see if we have any open calltasks
	var strParams = "crfs="+pfu(strCheckCallrefs);
	if(!aRS.InvokeStoredQuery("form/resolvecloseform/cnt_calltasks_by_callref", strParams))
    {
		if(_swdoc.strIssueref.length == 0)
     	{
     		returnMessage = "Unable to query call task status values. Please contact your Supportworks Administrator.";
     	}
    }
	else
	{
		_swdoc.arrCallOpenTasks.length = 0;
			
		while(aRS.Fetch())
		{
				var nCount =  aRS.GetValueAsString("ct");
				var calref =  aRS.GetValueAsString("callref");
				_swdoc.arrCallOpenTasks[calref] = nCount;
		}
		
		var nLength = _swdoc.arrCallOpenTasks.length;
		if(nLength)
		{
			var Ref = "";
			var Message = "";
			if(nLength > 1)
			{
				for(ID in _swdoc.arrCallOpenTasks)
				{
					//-- 30.01.2006 - DJH code to add comma between call refs when dealing with multiple calls
					var Value = dd.tables["opencall"].columns["callref"].FormatValue(ID);
					if(Ref != "")Ref += ",";
					Ref += Value;
				}
				returnMessage = "The following calls still have outstanding work items assigned to them and can not be closed:-\n\n" + Ref; //Removed  + "1" from end
			}
			else
			{
				for(ID in _swdoc.CallOpenTaskMap)
				{
						returnMessage = "The call " + ID + " still has " + _swdoc.arrCallOpenTasks[ID] + " outstanding work item(s) and can not be closed.";
						break;
				}
			}//--if(nLength > 1)		
		}//-- if(nLength)
	}//-- if(!aRS.Invoke
	
 	return returnMessage;
}

//-- 09.02.2007 - NWJ - Construct form title based on state etc
var strResolveCloseCallrefs = "";
function create_form_title()
{
	//-- start to contruct form title (call local function to format callrefs and finish title)
	var strFormTitle = (_swdoc.arrCallrefs.length > 1) ? "Resolve/Close Calls " : "Resolve/Close Call ";

	//-- loop through array and format callrefs	
	for(var i=0;i<_swdoc.arrCallrefs.length; i++)
	{
		if( i > 0) _swdoc.strResolveCloseCallrefs += ", ";
		_swdoc.strResolveCloseCallrefs += app.g.pad_callref(_swdoc.arrCallrefs[i]);
	}
	strFormTitle += _swdoc.strResolveCloseCallrefs;
	
	//-- if we are closing an issue and to title
	if(_swdoc.strIssueref.length) strFormTitle += " Closing issue " + _swdoc.strIssueref
			
	//-- set the title
	_swdoc.SetTitle(strFormTitle);
}

//-- 09.02.2007 - NWJ - check the state and callclass for the action calls - true / false (false = close down)
function check_call_states_and_classes(strCheckCallrefs, funcCallback)
{
	//-- get the status and class for our callref/s
    var aRScallstate = new SqlQuery;
    var strParams = "crfs="+pfu(strCheckCallrefs);
    if(!aRScallstate.InvokeStoredQuery("form/resolvecloseform/get_calls_for_status_check", strParams))
    {
     	//-- failed - check if we have an issue
     	if(_swdoc.strIssueref.length == 0)
     	{
     		MessageBox("Unable to query call status values. Please contact your Supportworks Administrator..", MB_ICONSTOP);
     		funcCallback(false);
     	}
    }
    else
    {
		//--
		//-- loop through our returned rows and get state and classes
		
		var strCurrentCallClass = "";
		var strLastCallClass = "";					
		var strCurrFTF = -1;
		var strLastFTF = -1;
		
		
		var nPendingStatus = 0;
		var nResolvedStatus = 0;
		var nOtherStatus = 0;
		
		while(aRScallstate.Fetch())
		{			
			//-- get status and callref and add info an array
			var iStatus =  aRScallstate.GetValueAsNumber("status");
			var iCalref =  aRScallstate.GetValueAsNumber("callref");
			_swdoc.arrCallStatuss[iCalref] = iStatus;
						
			//-- get call class and check if it same as others
			//-- simply want to check if we have selected to resolve or close perate call classes
			strCurrentCallClass = aRScallstate.GetValueAsString("callclass");
			
			//-- stop attempt to resolve or close a problem record
			//-- 29.04.2008 - 2.2.0 
			/*if(strCurrentCallClass.toLowerCase() == "problem")
			{
				MessageBox("One or more selected records are Problem records and cannot be resolved or closed.", MB_ICONSTOP);
				return false;
			}*/
						
			if(!app.itsm.can_resolve(strCurrentCallClass, true))
			{
				funcCallback(false);
			}
			
			if ((strLastCallClass != "") && (!_swdoc.boolMixedCallClasses))
			{
				_swdoc.boolMixedCallClasses = (strLastCallClass != strCurrentCallClass);
			}
			strLastCallClass = strCurrentCallClass;
			
			//-- NWJ - 23.11.2007 - check first time fix
			strCurrFTF = aRScallstate.GetValueAsNumber("flg_firsttimefix");			
			if((strLastFTF!=-1)&&(strLastFTF!=strCurrFTF))
			{
				_swdoc.intFTFAchieved = 0;
				_swdoc.boolMixedFTF=true;
			}
			_swdoc.intFTFAchieved = strCurrFTF; //- -store _swdoc level if achieved
			strLastFTF = strCurrFTF;
			
			switch(iStatus)
			{
				case CS_PENDING:
					nPendingStatus++;
					break;
				case CS_RESOLVED:
					nResolvedStatus++;
					break;
				default:
					nOtherStatus++;
					break;
			}
		}
		aRScallstate.Reset();//-- reset recordset object
	
	
		//-- function required for modeless message box
		var funcNotPendingResolved = function()
		{
			//--- if not pending or resolved && not dealing with issue
			if((nOtherStatus) &&(_swdoc.strIssueref.length == 0))
			{			
				MessageBox("One or more selected calls can not be closed because they have a status other than Pending or Resolved.", MB_ICONSTOP);
				funcCallback(false);
			}
		
			_swdoc.boolHavePendingCalls = (nPendingStatus);
			_swdoc.boolHaveResolvedCalls = (nResolvedStatus);
			_swdoc.boolCloseOnly = (nResolvedStatus);		
			//-- we have pending and resolved callss	
			if(nPendingStatus && nResolvedStatus)
			{
				_swdoc.boolMixedCallStatus = true;
				if(_swdoc.strIssueref.length == 0)
				{
					var Message = "The calls you have selected have a mixture of 'Pending' and 'Resolved' statuses. As resolved calls have already been attributed a resolution profile, the resolution profile selected for closing these calls will only be applied to the calls that currently have a status of 'Pending'. The 'Resolved' calls will be completed leaving the previously applied resolution profile. \n\nDo you want to continue?";
									
					MessageBox(Message, MB_ICONQUESTION | MB_YESNO, function(intDecision)
					{
						if (intDecision != IDYES)
						{
							funcCallback(false);
						}
						else
						{
							funcCallback(true);
						}
					});
				}
				else
				{
					funcCallback(true);
				}
			}
			else
			{
				funcCallback(true);
			}
		}
	
		//-- we have different call classes and not working with an issue prompt use as to what to do
		if((_swdoc.boolMixedCallClasses) && (_swdoc.strIssueref.length == 0))
		{
			var Message = "The calls you have selected to resolve or close have different call classes, so any resolution profile you may specify will not be applied if you continue. Do you want to continue?\n\n(If you want resolution profiles to apply, you should click No and resolve/close each call separately)";	
			
			MessageBox(Message, MB_ICONSTOP | MB_ICONQUESTION | MB_YESNO, function(intDecision)
			{
				if (intDecision != IDYES)
				{
					funcCallback(false);
				}
				else
				{
					var boolNotPendingResolved = funcNotPendingResolved();
					
					funcCallback(boolNotPendingResolved);
				}
			});
			
		}
		else
		{
			var boolNotPendingResolved = funcNotPendingResolved();
					
			funcCallback(boolNotPendingResolved);
		}
	}
}

function setup_support_unit_assignment()
{
		//-- empty the picklist
		mainform.lb_supp_contract.pickList = "";
		
		var SqlRecordSetObj	= new SqlQuery;
		var opencallSqlRecordSetObj	= new SqlQuery;
		
		var strParams = "crfs="+pfu(_swdoc.CallrefsCommaString);
		opencallSqlRecordSetObj.InvokeStoredQuery("form/resolvecloseform/get_calls_support_units", strParams);
		opencallSqlRecordSetObj.Fetch();
				
		SqlRecordSetObj.Reset();
		var strParams = "contract="+pfu(opencallSqlRecordSetObj.GetValueAsString("fk_contract_id"))+"&company="+pfu(opencallSqlRecordSetObj.GetValueAsString("fk_company_id"));
		SqlRecordSetObj.InvokeStoredQuery("form/resolvecloseform/get_contract_support_units", strParams);
			
		var str = "";
		var selected = "";
		var strTemps = new Array();
		var arrContractNames = new Array(); // array of names based on contract IDs - used for Quick Log Call info 
		var arrContractCMDBIDs = new Array();  // array of CMDB IDs on contract IDs - used for Quick Log Call info 
		
		while(SqlRecordSetObj.Fetch())
		{
			//-- get the recordset value for contract id and title
			var contractname = SqlRecordSetObj.GetValueAsString("title");
			var contractid = SqlRecordSetObj.GetValueAsString("pk_contract_id");
			var contractCMDBId = SqlRecordSetObj.GetValueAsString("fk_cmdb_id");
			//-- add the name/id pair into the array
			_swdoc.arrContractNameIDs[contractname] = contractid;
			arrContractCMDBIDs[contractid] = contractCMDBId;
			//-- build the picklist	options string	
			str += contractname + "|";
			
			//-- identify the default contract (one selected against the call if set)
			if(!_swdoc.boolMultipleCalls)
			{		
				for(ID in _swdoc.arrContractNameIDs)
				{
					if(opencallSqlRecordSetObj.GetValueAsString("fk_contract_id")!="")
					{
						if(contractid==opencallSqlRecordSetObj.GetValueAsString("fk_contract_id"))
						{
							selected = contractname;
							var selectedNum = contractCMDBId;
						}
					}
				}
			}
		}
		
		// if there is no contract assigned to the call AND there is a Quick Log Template AND there is a contract in the Quick Log Template
		if ((selected == "") && (_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != ""))
		{
			// NOTE, the value of ID is actually the Title of the contract not the pk_contract ID. The Quick Log definition contains the pk_contract_id
			for(ID in _swdoc.arrContractNameIDs)
			{
				if(_swdoc.arrContractNameIDs[ID]==_swdoc.strQLogContractId)
				{
					selected = ID;
					var selectedNum = arrContractCMDBIDs[_swdoc.arrContractNameIDs[ID]];
				}
			}
		}
		
		//-- populate the surveys pick list
		mainform.lb_supp_contract.pickList = str;
		
		//-- set the default selected survey
		_ete(mainform.lb_supp_contract,selected);
		//-- Lookup units available for selected contract
		_swdoc.get_support_units_available(_swdoc.arrContractNameIDs[selected], mainform.tb_avail_units);
		_swdoc.get_support_unit_decrement(selectedNum, mainform.tb_units_assigned, _swdoc.arrContractNameIDs[selected]);
}

function get_support_units_available(strContractID, oEle)
{
	if((strContractID!="")&&(strContractID!=undefined))
	{
		var recContract = new SqlRecord;
		if(recContract.GetRecord("contract", strContractID))
		{
			if(recContract.flg_support_unlimited==1)
			{
				_eva(oEle,"Unlimited");
			}
			else
			{
				_eva(oEle,recContract.support_units_avail);
			}
		}
	}
}

function get_support_unit_decrement(strContractID, oEle, strContractTxtID)
{
	_evi(mainform.lbl_no_con_ser_assoc, false);
	_evi(mainform.lbl_con_ser_assoc, false);
	//###20120731
	_evi(mainform.lbl_multi_services, false);
	
	if((typeof strContractID !== "undefined")&&(strContractID!=""))
	{
		var recContract = new SqlRecord;
		if(recContract.GetRecord("contract", strContractTxtID))
		{
			if(recContract.flg_support_unlimited==1)
			{
				_eva(oEle, "0");
				// Override the default if we hae a quick log template with a selected contract
				if ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != ""))
				{
					//MessageBox("unlimited");
					_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;
					_eva(oEle, _swdoc.intQLogSUnitsDec);
				}
			}
			else
			{
				// --- Get value for units to decrement by, by using Support Unit Decrement Method field set on
				// --- contract form
				var dec_method = recContract.support_unit_dec_method;
				//Nothing Selected
				if (dec_method == "0")
				{				
					//Do nothing, units should default to 0 and not mandatory!
					
					// Override the default if we hae a quick log template with a selected contract
					if ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != ""))
					{
						//MessageBox("Have Quick Log details, intQLogSUnitsDec = " + _swdoc.intQLogSUnitsDec);
						_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;
						_eva(oEle, _swdoc.intQLogSUnitsDec);
					}
				}
				
				//Use Default Support Unit Decrement Value selected
				else if (dec_method == "1")
				{
					_swdoc.opencall.support_unit_cost = Math.round(recContract.support_unit_dec_amount);
					_eva(oEle, recContract.support_unit_dec_amount);
					
					// Override the default if we hae a quick log template with a selected contract
					if ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != ""))
					{
						_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;
						_eva(oEle, _swdoc.intQLogSUnitsDec);
					}
				}
				
				//Prompt Analyst on Ticket Resolution/Closure selected
				else if (dec_method == "2")
				{
					//Clear Units Used field value, and make mandatory.
					_swdoc.opencall.support_unit_cost = "";
					_eva(oEle, "");
					_ema(mainform.tb_units_assigned, true);
					
					// Override the default if we hae a quick log template with a selected contract
					if ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != ""))
					{
						_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;
						_eva(oEle, _swdoc.intQLogSUnitsDec);
					}
				}
				
				//Take from Contract/Service Association selected
				else if (dec_method == "3")
				{
					// Override the default if we hae a quick log template with a selected contract
					if ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != ""))
					{
						//MessageBox("dec method = 3 and qlog");
						_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;
						_eva(oEle, _swdoc.intQLogSUnitsDec);
					}
					else
					{
						var strParams = "contract="+pfu(strContractID)+"&crfs="+pfu(_swdoc.CallrefsCommaString);
						var iCountOfServices = app.g.sqs_rowcount("form/resolvecloseform/cnt_contracts_for_calls", strParams);
						if (0 == iCountOfServices)
						{
							// If no relationship is found, use the default Contract unit numbers, 
							// and make an error message visible on the form
							_swdoc.opencall.support_unit_cost = Math.round(recContract.support_unit_dec_amount);
							_eva(oEle, recContract.support_unit_dec_amount);						
							_evi(mainform.lbl_con_ser_assoc, false);
							_evi(mainform.lbl_no_con_ser_assoc, true);
						} 
						else if (iCountOfServices > 5)
						{
							var strParams = "contract="+pfu(strContractID)+"&crfs="+pfu(_swdoc.CallrefsCommaString);
							//### there are more than 5 services with this contract on this call
							var queContServ = app.g.get_sqrecordset("form/resolvecloseform/get_minsunits_for_contracts",strParams);
							var iMinSU = 0;
							var iMaxSU = 0;
							if(queContServ.Fetch())
							{
								iMinSU = Math.round(app.g.get_field(queContServ,0));
								iMaxSU = Math.round(app.g.get_field(queContServ,1));
							}
	
							var oUnits = app.g.get_sqrecordset("form/resolvecloseform/get_sunits_for_contracts",strParams);
							oUnits.Fetch();
							_swdoc.opencall.support_unit_cost = Math.round(oUnits.GetValueAsNumber(0));
							_eva(oEle, oUnits.GetValueAsNumber(0));
							_eva(mainform.fk_con_ser_assoc, oUnits.GetValueAsNumber(1));
	
							_ete(mainform.lbl_multi_services, "There are multiple (" + iCountOfServices + ") Services with this contract against the Request.\nThe Support Unit values range from " + iMinSU + " to " + iMaxSU);
							_evi(mainform.lbl_con_ser_assoc, true);
							_evi(mainform.lbl_no_con_ser_assoc, false);
							_evi(mainform.lbl_multi_services, (iMinSU !== iMaxSU));
							
						} 
						else 
						{
							var queContServ = app.g.get_sqrecordset("form/resolvecloseform/get_sunits_for_contracts",strParams);
							
							var strMultiServiceLabelText = "Default Support Units for the Services which are associated to this the call (max. 5):-\n\n";
							
							var intSupportUnitCost = 0;
							var intContractID = 0;
							while(queContServ.Fetch())
							{
								intSupportUnitCost = Math.round(queContServ.GetValueAsNumber(0));
								intContractID = queContServ.GetValueAsNumber(1);
								strMultiServiceLabelText += intSupportUnitCost + "\t" + queContServ.GetValueAsString(2) + "\n";
							}
	
							_swdoc.opencall.support_unit_cost = intSupportUnitCost;
							_eva(oEle, intSupportUnitCost);
							_eva(mainform.fk_con_ser_assoc, intContractID);
							
							_ete(mainform.lbl_multi_services, strMultiServiceLabelText);
							_evi(mainform.lbl_con_ser_assoc, true);
							_evi(mainform.lbl_no_con_ser_assoc, false);
							_evi(mainform.lbl_multi_services, 1 != iCountOfServices);
	
						}
					}					
				}
				
				//Something else. Should never get here...
				else{
					MessageBox("Defaulted! " + recContract.support_unit_dec_method);	
				}
			}
		}
	}
}]]>
					</code>
				</method>
				<method>
					<name>OnExecuteAction</name>
					<code>
						<![CDATA[OnExecuteAction(nAction)
{
	//-- required for modeless message box
	var funcAttachCall = function()
	{
		//-- attaching a call to the action.
		if(nAction == ATTACHFILETOCALL_ACTION)
		{
			mainform.btnAddFile_OnPressed();
			return true;
		}
		return true;
	}
	
	//-- trigger an action from a menu bar (shortcusts)
	
	//-- closing call
	MessageBox(nAction);
	if(nAction == CLOSE_CALL_ACTION)
	{	
		mainform.ResolveClose(function()
		{
			funcAttachCall();
		});
	}
	else
	{
		funcAttachCall();
	}
}]]>
					</code>
				</method>
				<method>
					<name>OnValidate</name>
					<code>
						<![CDATA[OnValidate()
{
	//-- validate the form
	_swdoc.ValidateForm(function(boolValidate)
	{
		if (!boolValidate)
		{
			return VALIDATE_FAIL
		}
		else
		{
			return VALIDATE_DEFAULT;
		}
	});
}]]>
					</code>
				</method>
				<method>
					<name>(Globals)</name>
					<code>
						<![CDATA[//-- ALL vars and funcs are in the userdefined js area]]>
					</code>
				</method>
				<method>
					<name>OnSaveData</name>
					<code>
						<![CDATA[OnSaveData()
{
	// This should never get called, but if for some reason it does, we only want this form
	// to close if it is cancelled or if the analyst clicks one of the update buttons.
	MessageBox("Please use the [" + mainform.btnResolveClose.text + "] button to process the action.");
	return false;
}]]>
					</code>
				</method>
			</methods>
		</javascript>
	</configuration>
	<layouts>
		<layout>
			<appearance>
				<width>562</width>
				<height>432</height>
				<backgroundColor>#ffffff</backgroundColor>
				<fillColour>#ffffff</fillColour>
				<textColour >#000000</textColour >
				<font  size="8">Arial</font>
			</appearance>
			<controls>
				<control>
					<general>
						<name>tb_updatetext</name>
						<type>Field</type>
						<group>Tab1:0</group>
					</general>
					<appearance>
						<index>0</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>272</top>
							<left>17</left>
							<right>542</right>
							<bottom>412</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.updatetxt</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Text Edit</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>true</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>true</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<autoCompleteField>false</autoCompleteField>
							<editUnlimitedText>true</editUnlimitedText>
							<url>false</url>
						</flags>
						<textLineCount>4</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>CaptionPanel2</name>
						<type>CaptionBar</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>true</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>1</index>
						<caption>Details</caption>
						<backgroundColor>#f1f1f1</backgroundColor>
						<foregroundColor>#003366</foregroundColor>
						<font  size="10" bold="1">Trebuchet (MS)</font>
						<alignment>Left</alignment>
						<fillStyle>Vertical Gradient</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>29</top>
							<left>3</left>
							<right>394</right>
							<bottom>205</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
							<backgroundColor2>#d8d8d8</backgroundColor2>
							<imageHSpace>10</imageHSpace>
							<slope>12</slope>
							<borderColor>#d3c9b6</borderColor>
							<headerHeight>23</headerHeight>
							<hasBorder>1</hasBorder>
							<panelBorderColor>#d3c9b6</panelBorderColor>
							<fillStyle>0</fillStyle>
							<panelBackgroundColor>#f2eedd</panelBackgroundColor>
							<panelBackgroundColor2>#000000</panelBackgroundColor2>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>dt_actiontime</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>2</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>73</top>
							<left>11</left>
							<right>218</right>
							<bottom>91</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.updatetimex</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Date/Time Control</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<colorDateIndicator>false</colorDateIndicator>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<dateFormatMode>0</dateFormatMode>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_timespent</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>3</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>73</top>
							<left>227</left>
							<right>286</right>
							<bottom>91</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.timespent</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Minute Time Period</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<defaultValue>5</defaultValue>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>cb_actionsource</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>4</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>110</top>
							<left>11</left>
							<right>218</right>
							<bottom>128</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udsource</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Distinct Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>true</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<pickListOrderDesc>false</pickListOrderDesc>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<displayColumnValue>Telephone</displayColumnValue>
						<properties>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<defaultValue>Telephone</defaultValue>
							<distinctTable>swlists</distinctTable>
							<distinctColumn>value</distinctColumn>
							<borderColor>#c0c0c0</borderColor>
							<sqlSource>swdata</sqlSource>
							<displayColumn>display_name</displayColumn>
							<listFilter>lid=CALL-ACTION-SOURCE,CALL-ACTION-SOURCE-RESOLVE&apos;,&apos;CALL-ACTION-SOURCE-CLOSE</listFilter>
							<storedQuery>common.getSwLists</storedQuery>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_actiontype</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>5</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>110</top>
							<left>227</left>
							<right>388</right>
							<bottom>128</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udcode</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Distinct Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>true</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<pickListOrderDesc>false</pickListOrderDesc>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<displayColumnValue>General Update</displayColumnValue>
						<properties>
							<defaultValue>General Update</defaultValue>
							<listItems>General Update|Called Customer|E-mailed Customer|</listItems>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<borderColor>#c0c0c0</borderColor>
							<sqlSource>swdata</sqlSource>
							<distinctTable>swlists</distinctTable>
							<distinctColumn>value</distinctColumn>
							<displayColumn>display_name</displayColumn>
							<listFilter>lid=CALL-ACTION-TYPE,CALL-ACTION-TYPE-RESOLVE&apos;,&apos;CALL-ACTION-TYPE-CLOSE</listFilter>
							<storedQuery>common.getSwLists</storedQuery>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btnBrowseProfile</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>6</index>
						<caption>...</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>156</top>
							<left>362</left>
							<right>388</right>
							<bottom>177</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>-1</commands>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_fixcodedescription</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>7</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>158</top>
							<left>11</left>
							<right>364</right>
							<bottom>176</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Text Edit</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<autoCompleteField>false</autoCompleteField>
							<editUnlimitedText>false</editUnlimitedText>
							<url>false</url>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#ffffff</disabledBackgroundColor>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_emailcustomer</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>8</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>76</top>
							<left>409</left>
							<right>525</right>
							<bottom>95</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>E-mail customer^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_updatepublic</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>9</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>57</top>
							<left>409</left>
							<right>538</right>
							<bottom>75</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>Update to be public^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_chargeable</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>10</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>96</top>
							<left>409</left>
							<right>550</right>
							<bottom>114</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>Call to be chargeable^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<defaultValue>0</defaultValue>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_addKBase</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>11</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>116</top>
							<left>409</left>
							<right>551</right>
							<bottom>135</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>Add to KnowledgeBase^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_customersurvey</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>12</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>158</top>
							<left>409</left>
							<right>567</right>
							<bottom>179</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>Send customer survey:^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>cb_surveys</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>13</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>181</top>
							<left>413</left>
							<right>543</right>
							<bottom>199</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<useDDPickList>false</useDDPickList>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<listItems>Customer Satisfaction Survey|Feedback on the HITS show|DEMO:Service Desk Quality Survey|Customer Survey|</listItems>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>cb_callaction</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>14</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>4</top>
							<left>226</left>
							<right>387</right>
							<bottom>22</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>true</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<useDDPickList>false</useDDPickList>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<listItems>Close Call|Resolve Call|Close Call|Resolve Call|</listItems>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btnGetProfileText</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>15</index>
						<caption>Add Profile Text</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#0000ff</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>213</top>
							<left>458</left>
							<right>550</right>
							<bottom>234</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Tab1</name>
						<type>TabControl</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>16</index>
						<caption>Tab1</caption>
						<backgroundColor>#ded7ce</backgroundColor>
						<foregroundColor>#ffffff</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>241</top>
							<left>7</left>
							<right>553</right>
							<bottom>422</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<tabStyle>Top</tabStyle>
					<tabSize>19</tabSize>
					<items>
						<item>
							<name>Description</name>
							<properties>56=#d1e0ee|_flags=0</properties>
							<textBorder>None</textBorder>
							<textBackgroundColor>#ffffff</textBackgroundColor>
							<controlInfo>
								<mouseOverCursor>Window Default</mouseOverCursor>
								<properties>
									<tabColor>#d1e0ee</tabColor>
								</properties>
							</controlInfo>
						</item>
						<item>
							<name>File Attachment</name>
							<properties>56=#ffcc66|_flags=0</properties>
							<textBorder>None</textBorder>
							<textBackgroundColor>#ffffff</textBackgroundColor>
							<controlInfo>
								<mouseOverCursor>Window Default</mouseOverCursor>
								<properties>
									<tabColor>#ffcc66</tabColor>
								</properties>
							</controlInfo>
						</item>
						<item>
							<name>Support Units</name>
							<properties>56=#bdcd9f|_flags=0</properties>
							<textBorder>None</textBorder>
							<textBackgroundColor>#ffffff</textBackgroundColor>
							<controlInfo>
								<mouseOverCursor>Window Default</mouseOverCursor>
								<properties>
									<tabColor>#bdcd9f</tabColor>
								</properties>
							</controlInfo>
						</item>
					</items>
					<selectedTextFont  size="8">Arial</selectedTextFont>
					<selectedTextColor>#000000</selectedTextColor>
					<deselectedTextColor>#000000</deselectedTextColor>
					<tabSlopeLeft>2</tabSlopeLeft>
					<tabSlopeRight>2</tabSlopeRight>
					<deselectedTabHeightOffset>1</deselectedTabHeightOffset>
					<tabSpacing>0</tabSpacing>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<tabStyle>0</tabStyle>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>fl_attachments</name>
						<type>FileListTable</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
							<showHeader>true</showHeader>
							<verticalGridLines>true</verticalGridLines>
							<horizontalGridLines>true</horizontalGridLines>
							<autoLoad>true</autoLoad>
							<allowMultiSelect>true</allowMultiSelect>
						</flags>
						<group>Tab1:1</group>
					</general>
					<appearance>
						<index>17</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>269</top>
							<left>15</left>
							<right>473</right>
							<bottom>413</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<columns>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>File Name</name>
							<width>160</width>
							<image>-1</image>
							<dataColumn>0</dataColumn>
						</controlInfo>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>Size</name>
							<width>80</width>
							<image>-1</image>
							<dataColumn>1</dataColumn>
						</controlInfo>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>Last Modified</name>
							<width>120</width>
							<image>-1</image>
							<dataColumn>2</dataColumn>
						</controlInfo>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>Full Local Path</name>
							<width>100</width>
							<image>-1</image>
							<dataColumn>3</dataColumn>
						</controlInfo>
					</columns>
					<sortColumn>-1</sortColumn>
					<sortDescending>false</sortDescending>
					<headerHeight>16</headerHeight>
					<rowHeight>16</rowHeight>
					<selectedColor>#00008b</selectedColor>
					<selectedTextColor>#ffffff</selectedTextColor>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<content>NAME=css-bug-raising.gif;PATH=C:\Documents and Settings\NeilWJ\My Documents\css\css-bug-raising.gif;SIZE=18746;LASTMODIFIED=1091525370</content>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btnAddFile</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:1</group>
					</general>
					<appearance>
						<index>18</index>
						<caption>Add</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>266</top>
							<left>481</left>
							<right>545</right>
							<bottom>290</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>74</commands>
							<eventButtonIcon>74</eventButtonIcon>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btnRemove</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:1</group>
					</general>
					<appearance>
						<index>19</index>
						<caption>Remove</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>296</top>
							<left>481</left>
							<right>545</right>
							<bottom>320</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btnResolveClose</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>20</index>
						<caption>Resolve Call</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>1</top>
							<left>7</left>
							<right>103</right>
							<bottom>24</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<eventButtonIcon>ImageList=Helpdesk Tools;IconIndex=6</eventButtonIcon>
							<eventButtonIconAlign>0</eventButtonIconAlign>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<type>FieldName</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>21</index>
						<caption>Action Source</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Right</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>94</top>
							<left>9</left>
							<right>82</right>
							<bottom>106</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udsource</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>LabelCode</name>
						<type>FieldName</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>22</index>
						<caption>Action Type</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>94</top>
							<left>225</left>
							<right>291</right>
							<bottom>106</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udcode</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Text1</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>23</index>
						<caption>Date/Time of Action</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>57</top>
							<left>8</left>
							<right>120</right>
							<bottom>71</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Label2</name>
						<type>FieldName</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>24</index>
						<caption>Time Spent</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>57</top>
							<left>225</left>
							<right>289</right>
							<bottom>71</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.timespent</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>ResolProfile</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>25</index>
						<caption>Resolution Category</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>140</top>
							<left>8</left>
							<right>208</right>
							<bottom>154</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btnAddFile</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>26</index>
						<caption>Attach File</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>1</top>
							<left>457</left>
							<right>538</right>
							<bottom>24</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>74</commands>
							<eventButtonIcon>74</eventButtonIcon>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Rect1</name>
						<type>Rectange</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>27</index>
						<backgroundColor>#d4d0c8</backgroundColor>
						<foregroundColor>#dddddd</foregroundColor>
						<font  size="0"/>
						<borderStyle>Rectangle</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>0</top>
							<left>-1</left>
							<right>565</right>
							<bottom>25</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>LabelAction</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>28</index>
						<caption>Call Action:</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>2</top>
							<left>161</left>
							<right>223</right>
							<bottom>25</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>cp_summary</name>
						<type>CaptionBar</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>true</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>29</index>
						<caption>Other Information</caption>
						<backgroundColor>#f1f1f1</backgroundColor>
						<foregroundColor>#003366</foregroundColor>
						<font  size="10" bold="1">Trebuchet (MS)</font>
						<alignment>Left</alignment>
						<fillStyle>Vertical Gradient</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>212</top>
							<left>3</left>
							<right>557</right>
							<bottom>428</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
							<backgroundColor2>#d8d8d8</backgroundColor2>
							<imageHSpace>10</imageHSpace>
							<slope>12</slope>
							<borderColor>#d3c9b6</borderColor>
							<headerHeight>23</headerHeight>
							<hasBorder>1</hasBorder>
							<panelBorderColor>#d3c9b6</panelBorderColor>
							<fillStyle>0</fillStyle>
							<panelBackgroundColor>#f2eedd</panelBackgroundColor>
							<panelBackgroundColor2>#000000</panelBackgroundColor2>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>CaptionPanel3</name>
						<type>CaptionBar</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>true</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>30</index>
						<caption>Options</caption>
						<backgroundColor>#f1f1f1</backgroundColor>
						<foregroundColor>#003366</foregroundColor>
						<font  size="10" bold="1">Trebuchet (MS)</font>
						<alignment>Left</alignment>
						<fillStyle>Vertical Gradient</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>29</top>
							<left>403</left>
							<right>557</right>
							<bottom>205</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
							<backgroundColor2>#d8d8d8</backgroundColor2>
							<imageHSpace>10</imageHSpace>
							<slope>12</slope>
							<borderColor>#d3c9b6</borderColor>
							<headerHeight>23</headerHeight>
							<hasBorder>1</hasBorder>
							<panelBorderColor>#d3c9b6</panelBorderColor>
							<fillStyle>0</fillStyle>
							<panelBackgroundColor>#f2eedd</panelBackgroundColor>
							<panelBackgroundColor2>#000000</panelBackgroundColor2>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_resolvelinked_calls</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>31</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>183</top>
							<left>6</left>
							<right>392</right>
							<bottom>200</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<content>#eeeeee</content>
							<flagItems>Apply this action to related requests (incident / known errors etc)^1|</flagItems>
							<defaultValue>1</defaultValue>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_ftf</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>32</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>137</top>
							<left>409</left>
							<right>551</right>
							<bottom>156</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>opencall.flg_firsttimefix</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>First time fix achieved^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_avail_units</name>
						<type>Field</type>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>33</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>298</top>
							<left>185</left>
							<right>347</right>
							<bottom>318</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Text Edit</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<autoCompleteField>false</autoCompleteField>
							<editUnlimitedText>false</editUnlimitedText>
							<url>false</url>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<borderColor>#c0c0c0</borderColor>
							<image>#eeeeee</image>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Text2</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>34</index>
						<caption>Available Support Units</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<alignment>Right</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>298</top>
							<left>62</left>
							<right>179</right>
							<bottom>320</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Text3</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>35</index>
						<caption>Associated Support Contract</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<alignment>Right</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>273</top>
							<left>28</left>
							<right>179</right>
							<bottom>296</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lb_supp_contract</name>
						<type>Field</type>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>36</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>273</top>
							<left>185</left>
							<right>347</right>
							<bottom>293</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<useDDPickList>false</useDDPickList>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<borderColor>#c0c0c0</borderColor>
							<image>#eeeeee</image>
							<sqlSource>syscache</sqlSource>
							<listItems>Wireless Contract|Dell Hardware Contract|Ares Contract One|Ares Contract 2|</listItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_units_assigned</name>
						<type>Field</type>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>37</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>323</top>
							<left>185</left>
							<right>347</right>
							<bottom>343</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>opencall.support_unit_cost</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Text Edit</type>
						<textLineCount>0</textLineCount>
						<textInputFormat>Numeric</textInputFormat>
						<properties>
							<borderColor>#c0c0c0</borderColor>
							<image>#eeeeee</image>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<precision>15</precision>
							<scale>10</scale>
							<inputMask>#########</inputMask>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Text4</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>38</index>
						<caption>Units Spent On This Call</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<alignment>Right</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>321</top>
							<left>40</left>
							<right>179</right>
							<bottom>345</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lbl_no_con_ser_assoc</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>39</index>
						<caption>No Contract/Service association has been found! The default number of units for the above contract will be used instead.</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#ff0000</foregroundColor>
						<font  size="8">Arial</font>
						<alignment>Center</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>352</top>
							<left>78</left>
							<right>339</right>
							<bottom>395</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>true</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>true</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lbl_con_ser_assoc</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>40</index>
						<caption>A valid Contract/Service association has been found. The value of &quot;Units Spent On This Call&quot; has been populated from the association record.</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#24c000</foregroundColor>
						<font  size="8">Arial</font>
						<alignment>Center</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>352</top>
							<left>73</left>
							<right>344</right>
							<bottom>395</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>true</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>true</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>fk_con_ser_assoc</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>41</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>490</top>
							<left>100</left>
							<right>199</right>
							<bottom>509</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Text Edit</type>
						<flags>
							<invisible>true</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<autoCompleteField>false</autoCompleteField>
							<editUnlimitedText>false</editUnlimitedText>
							<url>false</url>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<borderColor>#d3c9b6</borderColor>
							<image>#eeeeee</image>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lbl_multi_services</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:2</group>
					</general>
					<appearance>
						<index>42</index>
						<caption>Multiple Services</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>269</top>
							<left>357</left>
							<right>543</right>
							<bottom>392</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>true</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>true</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
			</controls>
			<formActions>
			</formActions>
			<javascript>
				<methods>
					<method>
						<name>OnFormLoaded</name>
						<code>
							<![CDATA[OnFormLoaded()
{

	// we only get the quick log template if there is only one call to resolve. The gloabl JS checks _swdoc.boolMultipleCalls
	var objQLC = app.g.get_qlog_resclose_details(_swdoc.arrCallrefs[0],_swdoc.boolMultipleCalls);
	if (objQLC)
	{
		_swdoc.boolHaveQLogDetails = true; // use in other functions to determine if values from the Quick Log definition should be used 
		//-- quick log call details
		_swdoc.updatedb.udsource = objQLC.qLogUdSource;
		_swdoc.updatedb.udcode = objQLC.qLogUdCode;
		_swdoc.updatedb.timespent = objQLC.qLogTimeSpent;
		_swdoc.updatedb.updatetxt = objQLC.qLogUpdateTxt;
		
		// The following data may be altered based on other settings
		_swdoc.intQLogChargeable = objQLC.qLogFlgChargeable;	
		_swdoc.intQLogKBase = 	objQLC.qLogFlgAddToKb;
		_swdoc.intQLogPublic = objQLC.qLogFlgPublic;
		_swdoc.intQLogEmail = objQLC.qLogFlgEmail;
		_swdoc.strQLogFixCode = objQLC.qLogFixCode;
		_swdoc.strQLogContractId = objQLC.qLogContract;
		_swdoc.intQLogSUnitsDec = objQLC.qLogSuppUnit;
	
		if (objQLC.qLogFiles)
		{
			var obj =  mainform.fl_attachments;
            	
        	for (i=0 ; i<objQLC.qLogFiles.length;i++)
        	{				
				var objectStep = objQLC.qLogFiles[i];
				var url = "attach;"+"displayname="+objectStep.filename +"; path="+objectStep.filepath+"; size="+objectStep.filesize+"; lastmodified="+objectStep.last_modified;
				
				mainform.fl_attachments.AddAttachment(url);
				mainform.fl_attachments.Refresh();
			} 
		}
	}
	
	//-- NWJ - setup mainform properties and elements
	_ete(tb_fixcodedescription, "");
	
	_swdoc.setup_form_mode();		
	_swdoc.setup_call_action();
	_swdoc.setup_email_flag();
	_swdoc.setup_public_flag();
	_swdoc.setup_survey_options();
	
	//-- reset call actions list
	//-- then populate with options based on analyst permissions
		
	//-- set updatetime	
	_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime();
			
	//-- if we have update text (from an email i guess) apply it
	if(_swdoc.strUpdateText.length) _swdoc.updatedb.updatetxt = _swdoc.strUpdateText;
	
	//-- if came from E-mail set source as email
	if(_swdoc.boolSourceEmail)
	{
		_swdoc.updatedb.udsource = 'E-mail'; 
	}
	
	_swdoc.setup_resolution_profile();
		
	//-- Show Support Unit Assignment Tab If supporting External Companies
	var boolShow =dd.GetGlobalParamAsString("Application Settings/SupportExternalCompanies")==1;

	//###20120802 addition to cope with Release Request
	var strParams = "crfs="+pfu(_swdoc.CallrefsCommaString);
	var iCountOfReleases = app.g.sqs_rowcount("form/resolvecloseform/cnt_releases_in_calls", strParams);
	boolShow = boolShow && (0 == iCountOfReleases);
	
	mainform.Tab1.ShowTabItem(2,boolShow);
	if(boolShow)
	{
		_swdoc.setup_support_unit_assignment();
	}

	//--F0091429	
	_etab(mainform.Tab1,0);		

	if(mainform.lb_supp_contract.value == "")
	{
		_een(mainform.tb_units_assigned,false);
		_eva(mainform.tb_avail_units,0);
		_eva(mainform.tb_units_assigned,0);
		_swdoc.opencall.support_unit_cost = 0;
	}

	_swdoc.UpdateFormFromData();
	
}]]>
						</code>
					</method>
					<method>
						<name>btnBrowseProfile_OnPressed</name>
						<code>
							<![CDATA[btnBrowseProfile_OnPressed()
{
	//-- get resolution profile filter
	
	//-- NWJ - 29.06.2006 - get close filter or resolve filter depending on call closure option (requested by Dan 47766)
	if (cb_callaction.text == "Resolve Call")
	{
		var Filter = dd.GetGlobalParamAsString("Close Call Form/ResolveProfileFilter");
	}
	else if (cb_callaction.text == "Close Call")
	{
		var Filter = dd.GetGlobalParamAsString("Close Call Form/CloseProfileFilter");
	}
	else
	{
		var Filter = dd.GetGlobalParamAsString("Close Call Form/ProfileCodeFilter");
	}
	
	var pc = new ChooseProfileCodeDialog;
	//-- default analyst permission to auto fill the resolution text on resolve/close call is set

    pc.useDescriptionText =  app.session.IsDefaultOption(ANALYST_DEFAULT_AUTOFILLRESOLUTIONTEXT); 
    
    pc.Open(true, true, _swdoc.opencall.fixcode, Filter, function(pc)
    {
   	   	//-- Get the fix code and split it into an array
        var strCodeDesc = pc.codeDescription;
        var strCode = pc.code;

    	// Pressing Cancel on the Select Res Code dialog sets the returned values to undefined
        // This causes an XMLMC error when the Resolve action is performed
        if (strCodeDesc == undefined)
        	strCodeDesc = "";
        if (strCode == undefined)
        	strCode = "";        
        
       	//-- If no codes are found then stop or same as current code
        if(strCode==_swdoc.opencall.fixcode) return;
        
        //-- F0092364
        if(strCode=="")
        {
 			_swdoc.opencall.fixcode = "";       
        	_ete(tb_fixcodedescription,"");
        	_swdoc.bUserSelectedFixCode = true;
        	_een(btnGetProfileText,false);
        	return;
        }                
        
        //-- required for modeless message box
        var funcUpdate = function()
        {
        	//-- add back to update record
        	_swdoc.updatedb.updatetxt = strCurrentUpdateText;
        	_swdoc.UpdateFormFromData();
        }
        
        //-- required for modeless message box
        var funcFinalProcessing = function()
		{
			//-- if we are working with webclient
			if(app.bWebClient)
			{
				_een(btnGetProfileText,false);
			}
			else
			{
	    		//-- enable / disable button if it has text
	    		_een(btnGetProfileText,(pc.description!=""));
			}
		}
        
        
        //-- Set the text in the resolution profile text box
        //-- 08.02.2007 - NWJ - set the opencall record value instead of the element name 
		_swdoc.opencall.fixcode = strCode;      
		_ete(tb_fixcodedescription,strCodeDesc); 
                
        //-- Attempt to add the resolution profile description to the Action Description box if the
        //-- default analyst permission to auto fill the resolution text on resolve/close call is set
        if(pc.useDescriptionText)
        {
        	//-- 08.02.2007 - NWJ - set the opencall record value instead of the element name 
        	var strCurrentUpdateText = _swdoc.updatedb.updatetxt;
           	
        	if(pc.description.length)
        	{
        		//if(tb_updatetext.text.length)
        		if(strCurrentUpdateText.length)
				{
					var Message = "You have chosen to transfer the default profile text into the description field of the close call form. However, you have already entered some text into this field. Do you want to append the text you have typed?\n\nTo append the default text to the text you have already typed, click Yes\nTo transfer the default text and overwrite what you have already typed, click No\nTo ignore the default text and leave the text you have typed alone, click Cancel";
					
					MessageBox(Message, MB_ICONQUESTION | MB_YESNOCANCEL, function(intDecision)
					{
						switch(intDecision)
						{
							case IDYES:
								if(_swdoc.updatedb.updatetxt.length)
								{
									//-- add a line feed
									strCurrentUpdateText += "\r\n";
									//tempText = _swdoc.updatedb.updatetxt + "\r\n"; 
								}
								strCurrentUpdateText += pc.description;
								break;
							case IDNO:
								strCurrentUpdateText = pc.description;
								break;
							case IDCANCEL:
								break;
						}
						funcUpdate();
						funcFinalProcessing();
					});
					
				}
				else
				{
					strCurrentUpdateText = pc.description;
					funcUpdate();
					funcFinalProcessing();
				}
        	}
        	else
        	{
        		funcUpdate();
        		funcFinalProcessing();
        	}
        }
        else
        {
        	funcFinalProcessing();
        }
    });
}]]>
						</code>
					</method>
					<method>
						<name>btnAddFile_OnPressed</name>
						<code>
							<![CDATA[btnAddFile_OnPressed()
{
	//-- add files
	//fl_attachments.newFile = InvokeCallAttachmentFileDialog();
	fl_attachments.AddFiles();

}]]>
						</code>
					</method>
					<method>
						<name>btnRemove_OnPressed</name>
						<code>
							<![CDATA[btnRemove_OnPressed()
{
	// -- remove selected files
	for(i=fl_attachments.rowCount()-1; i>=0;i--)
    {
    	if(fl_attachments.IsRowSelected(i))
    	{
    		//-- remove
    		fl_attachments.RemoveRow(i);
    	}
    }

}]]>
						</code>
					</method>
					<method>
						<name>btnGetProfileText_OnPressed</name>
						<code>
							<![CDATA[btnGetProfileText_OnPressed()
{
	var funcUpdateResText = function()
	{
		//-- get resolution profile description	
		var currentResProfileDesc = app.global.GetResolutionProfileDescription(_swdoc.opencall.fixcode);
		_swdoc.updatedb.updatetxt = currentResProfileDesc.strDescription;
		_swdoc.UpdateFormFromData();
	}
	
	if(_swdoc.updatedb.updatetxt.length)
	{
		MessageBox("If you retrieve the default text description from the profile database you will overwrite the current Action Description text.\n\nDo you wish to continue?", MB_ICONQUESTION | MB_YESNO, function(intDecision)
		{
			if (intDecision != IDYES)
			{
				return;
			}
			else
			{
				funcUpdateResText();
			}
		});
	}
	else
	{
		funcUpdateResText();
	}
	
}]]>
						</code>
					</method>
					<method>
						<name>(User Defined Functions)</name>
						<code>
							<![CDATA[
//-- function to check that user has selected correct number of profile codes
function check_profile_levels()
{
	//-- get the number of profile levels the analyst HAS to choose
	var nLevelNeeded = app.session.GetCloseProfileLevelRequired();

	//-- determine the number of Profile levels the user has selected
	//-- NWJ - can we turn this into a app.global.i.e. app.global.returnProfileLevelCount(strProfileCode);
	var strTempProfileCodes = new String(_swdoc.opencall.fixcode);
	var nLevels = 0;
	while(strTempProfileCodes.indexOf('-') != -1)
	{
		nLevels++;
		strTempProfileCodes = strTempProfileCodes.substr((strTempProfileCodes.indexOf('-')+1),strTempProfileCodes.length);
	}
	
	if(strTempProfileCodes.length)nLevels++;
	
	//-- If insufficient profile levels are specified then alert the user
	if(nLevels < nLevelNeeded)
	{
		MessageBox("You must profile this call resolution. Your access control rights require you to choose at least " + nLevelNeeded + " profile level(s)", MB_ICONSTOP);
		return false;
	}
	
	return true;
}

//-- prompt user to confirm resolution or closure
function confirm_resolve_close(funcCallback)
{
	//-- resolving		
	if(!_swdoc.boolClosing)
	{
		MessageBox(_swdoc.arrCallrefs.length >1 ? "Are you sure you want to resolve these calls?" : "Are you sure you want to resolve this call?" , MB_YESNO | MB_ICONINFORMATION , function(intDecision)
		{
			if (intDecision != IDYES)
			{
				funcCallback(false);
			}
			else
			{
				funcCallback(true);
			}
		});
	}
	else
	{
		//-- closing
		var MsgTmp = "";
		if(_swdoc.strIssueref.length)
		{
			if(_swdoc.arrCallrefs.length > 1)
				MsgTmp = "Are you sure you want to close these calls, and the issue they belong to?";
			else
				MsgTmp = "Are you sure you want to close this call, and the issue it belongs to?";
		}
		else
		{
			if(_swdoc.arrCallrefs.length > 1)
				MsgTmp = "Are you sure you want to close these calls?";
			else
				MsgTmp = "Are you sure you want to close this call?";
		}

		MessageBox(MsgTmp, MB_YESNO | MB_ICONINFORMATION , function(intDecision)
		{
			if (intDecision != IDYES)
			{
				funcCallback(false);
			}
			else
			{
				funcCallback(true);
			}
		});	
	}
}

//-- add call to kbase
function add_call_to_knowledgebase()
{
	var strProbText = "";
	var strProbCode = "";
	var nFirstCallref = _swdoc.arrCallrefs[0];
	//-- get the problem text and problem code from updatedb/opencall
			
	var strParams = "crf="+pfu(nFirstCallref);
	var aRSInfo = app.g.get_sqrecordset("form/resolvecloseform/get_details_for_kb",strParams);
	if(aRSInfo.Fetch())
	{
		strProbText = aRSInfo.GetValueAsString(0);
		strProbCode = aRSInfo.GetValueAsString(1);		
	}
	aRSInfo.Reset();	
			
	if(!app.g.use_sw_knowledgebase())
	{
		if(strKnowledgebaseDefaultTool.toLowerCase()=="rightanswers")
		{
			app.g.open_third_party_kb_add_form(strProbText, strProbCode,_swdoc.updatedb.updatetxt, _swdoc.opencall.fixcode, nFirstCallref)
		}
	}
	else
	{
		//-- call api
		//MessageBox("Add KB " + _swdoc.updatedb.updatetxt)
   		app.global.AddResolutionToKnowledgeBase(strProbText, strProbCode, _swdoc.updatedb.updatetxt, _swdoc.opencall.fixcode, nFirstCallref);
	}
}

//--
//-- resolve or close the call
function ResolveClose(funcCallback)
{	
	//-- function required for modeless email template dialog
	var funcCloseForm = function()
	{
		// -- Close Form
		_swdoc.boolFormFieldChanged = false;		
		_swdoc.resetData();    		
		_swdoc.CloseForm();
		funcCallback(true);
		return;
	}
			
	//-- function required for modeless message box
	var funcRestOfFunction = function()
	{
		//-- determine status
		var nStatus = CS_CLOSED;
		if(!_swdoc.boolClosing)
		{
			nStatus = CS_RESOLVED;
		}
		else
		{
			if(flg_chargeable.text == "1")	nStatus = CS_CLOSEDCHARGABLE;
		}
		
		//sandra 21/08/2007 Bug 60018 
		//-- make sure user is allowed to resolve 
		if ((nStatus == CS_RESOLVED) && (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS)))
		{
			MessageBox("You do not have sufficient privileges to resolve calls.  Please contact your system administrator",MB_ICONSTOP);	
			funcCallback(false);
			return;
		}
		
		//-- make sure user is allowed to close calls
		if (((nStatus == CS_CLOSED) ||( nStatus == CS_CLOSEDCHARGABLE)) && (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS)))
		{
			MessageBox("You do not have sufficient privileges to close calls.  Please contact your system administrator",MB_ICONSTOP);	
			funcCallback(false);
			return;
		}	
		//-- end sandra	
		
		//-- F0093506	
		//-- handle web client - any reason for this ??
		/*if((app.bWebClient && app.global==undefined)&&(_swdoc.boolClosing))
		{
	 		nStatus = CS_CLOSED;
	 		flg_chargeable.text == "0"
		}*/
		if((app.bWebClient && app.global==undefined)&&(_swdoc.boolClosing))
		{
			nStatus = CS_CLOSED;
			flg_chargeable.text == "0"
		}		
		//-- EOF F0093506
		
		// -- Check if we should send a Survey	
		var bSendSurveyToCustomer = false;
		var SurveyID = 0;
		var SurveyName = "";
		if(app.global.IsSurveyModuleEnabled() && flg_customersurvey.text == "1" && cb_surveys.text.length)
		{
			// -- Get surveyId from the SurveyNameSurvIdMap
			SurveyName = cb_surveys.text;		
			SurveyID = _swdoc.arrSurveyNameSurvIDs[SurveyName]; 
			if(SurveyID!=undefined)
				bSendSurveyToCustomer = true;
		
			// -- Determined that a Survey should be sent to the customer
			if (bSendSurveyToCustomer)
			{
				// -- Send a Survey using survey::sendCustomerCallSurvey API
				var xmlmccs = new XmlMethodCall;
				xmlmccs.SetValue("surveyId", SurveyID);
				var arrCallrefs = _swdoc.CallrefsCommaString.split();
				for(x in _swdoc.arrCallrefs)
					xmlmccs.SetValue("callref", _swdoc.arrCallrefs[x]);
				// -- Invoke XMLMC API
				if(!xmlmccs.Invoke("survey","sendCustomerCallSurvey"))
				{
					// -- Failed to Invoke XMLMC API
					// -- Display the error message
					(app.bWebClient)? MessageBox(xmlmccs._lastresult):MessageBox(xmlmccs.GetReturnXml());
				}
			}
		}
		
		// -- Find modified values in OPENCALL table
		var boolUpdatedValues = true;
		var arrUpdateCallValues = new Array();
		var strUpdateCallValues = "";
		if(rec = _swdoc.GetRecord("opencall"))
		{
			var nColCount = rec.GetCount();
			for(x = 0; x < nColCount; x++)
			{
				if(!rec.IsModified(x))
					continue;
				arrUpdateCallValues[rec.GetColumnName(x)] = rec.GetValue(x);
			}
		}
		for (fieldName in arrUpdateCallValues)
		{
			strUpdateCallValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrUpdateCallValues[fieldName])+"</"+fieldName+">";
		}
		
		// -- Update call values using XMLMC API if we found modified values in OPENCALL table 
		if(strUpdateCallValues!="")
		{
			strUpdateCallValues = "<opencall>"+strUpdateCallValues+"</opencall>";
			var arrCallrefs = _swdoc.CallrefsCommaString.split(",");
			// -- Update call values using helpdesk::updateCallValues API 
			var strMethod = "updateCallValues";
			for(var refCount = 0; refCount < _swdoc.arrCallrefs.length; refCount++)
			{
				var xmlmc = new XmlMethodCall;
				xmlmc.SetValue("callref", _swdoc.arrCallrefs[refCount]);
				xmlmc.SetParamAsComplexType("additionalCallValues", strUpdateCallValues);	
				if(xmlmc.Invoke("helpdesk", strMethod))
				{
	    			var strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();
					var objRes = XMCResult(strXML);
					if(!objRes.success)
					{
						boolUpdatedValues = false;
						MessageBox("The " + strMethod + " API method was rejected by the server.");
						funcCallback(false);
						return;
					}
				}
				else
				{
					boolUpdatedValues = false;
					(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
					funcCallback(false);
					return;
				}
			}
		}
		
		// -- Resolve/Close the call using XMLMC API
		var xmlmc = new XmlMethodCall;
		// -- API method
		var strMethod = "closeCalls";
		if(nStatus == CS_RESOLVED)
			strMethod = "resolveCalls";
		// -- Find modified values in UPDATEDB table
		var arrExtraUpdateDbValues = new Array();
		var strUpdateDbValues = "";
		if(rec = _swdoc.GetRecord("updatedb"))
		{
			var nColCount = rec.GetCount();
			for(x = 0; x < nColCount; x++)
			{
				if(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')
					continue;
				arrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);
			}
		}
		for (fieldName in arrExtraUpdateDbValues)
		{
			strUpdateDbValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+"</"+fieldName+">";
		}
		
		// -- Workout "timeOfAction" param
		var strBackDate = _swdoc.nBackdatePeriod;
		if(strBackDate==0 && _swdoc.boolSetToMaxBackdatePeriod)
		{
			strBackDate = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();
		}
		
		// ** API params ** //
		var arrCallrefs = _swdoc.CallrefsCommaString.split(",");
 		for(x in _swdoc.arrCallrefs)
			xmlmc.SetValue("callref", _swdoc.arrCallrefs[x]);
		xmlmc.SetValue("timeSpent", mainform.tb_timespent.value);
		xmlmc.SetValue("description", rec.updatetxt);
		if(_swdoc.opencall.fixcode!="") xmlmc.SetValue("fixCode", _swdoc.opencall.fixcode);
		if(strBackDate!=0) xmlmc.SetValue("timeOfAction", app.global.GetAsISO8601TimeString(strBackDate));
		var boolPublicUpdate = (flg_updatepublic.text == "1" )? true : false;
		xmlmc.SetValue("publicUpdate", boolPublicUpdate);
		if(rec.udsource!="")
			xmlmc.SetValue("updateSource", rec.udsource);
		if(rec.udcode!="")
			xmlmc.SetValue("updateCode", rec.udcode);
		// -- fileAttachment param
		for(i=0; i<mainform.fl_attachments.rowCount();i++)
		{
 			// -- Check for Server file (These need to use serverFileAttachment)
			var fileName = mainform.fl_attachments.GetItemText(i,3);
			var serverFile = fileName.indexOf("MFA:");
			if(serverFile >= 0)
			{
				//-- File was attached to email use serverFileAttachment param
				var strFileName = mainform.fl_attachments.GetItemText(i,0);
				var strData = mainform.fl_attachments.GetItemText(i,3);
				var strXML = "<fileName>"+strFileName+ "</fileName>";
				if(!app.bWebClient)
					strXML += "<fileSource>"+strData+"</fileSource>";
				xmlmc.SetParamAsComplexType("serverFileAttachment",strXML);
			}
			else
			{
				//-- File was uploaded to email use fileAttachement param
				var strFileName = mainform.fl_attachments.GetItemText(i,0);
				var strData = app.global.LoadFileInBase64(mainform.fl_attachments.GetItemText(i,3));
				var strXML = "<fileName>"+strFileName+ "</fileName>";
				if(!app.bWebClient)
					strXML += "<fileData>"+strData+"</fileData>";
				xmlmc.SetParamAsComplexType("fileAttachment",strXML);
			}
    	}
		if(strUpdateDbValues!="")
			xmlmc.SetParamAsComplexType("extraUpdateDbValues", strUpdateDbValues);	
		// ** EO API params ** //
		
		// -- Invoke XMLMC API
		if(xmlmc.Invoke("helpdesk",strMethod))
		{
			var strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();
			var objRes = XMCResult(strXML);
			if(!objRes.success)
			{
				MessageBox("The " + strMethod + " API method was rejected by the server.");
				funcCallback(false);
				return;
	    	}
			else
			{
				var myXmlFile = new XmlFile(); 
				bRet = myXmlFile.loadFromString(strXML); 
				var arrChildCallInfo = null;
				var arrCallInfo = new Array();
				var strDocs = "";
				var strFirstCall  = "";
				for (count = 0; count < myXmlFile.methodCallResult.params.length; count ++) 
				{
					if(myXmlFile.methodCallResult.params[count].nodeName=="callActionStatus")
					{  
						var boolSuccess = myXmlFile.methodCallResult.params[count]['success'].nodeValue;
						if(boolSuccess=="false")
						{
							var strMessage =  myXmlFile.methodCallResult.params[count]['message'].nodeValue;
							MessageBox(strMessage);
							funcCallback(false);
							return;
						}
						var strCallref = myXmlFile.methodCallResult.params[count]['callref'].nodeValue;
						var strIndex = myXmlFile.methodCallResult.params[count]['udIndex'].nodeValue;
						
						arrCallInfo[strCallref] = strIndex;
					}
					else if(myXmlFile.methodCallResult.params[count].nodeName=="callFileAttachment")
					{
						// only want to take the attachment details from the first resolved call				
						if (strFirstCall == "")
							strFirstCall = strCallref;
							
						if (strCallref == strFirstCall)
						{
							try
							{
								var updateId = myXmlFile.methodCallResult.params[count]['updateId'].nodeValue;
								if(updateId==arrCallInfo[strCallref]) // only want to take the attachments from the diary update which has just been created
								{
									var pathName = myXmlFile.methodCallResult.params[count]['pathName'].nodeValue;
									var fileName = myXmlFile.methodCallResult.params[count]['fileName'].nodeValue;
									var fileSize = myXmlFile.methodCallResult.params[count]['fileSize'].nodeValue;
									if(strDocs!="") strDocs +="\r\n";
									strDocs +='displayname="'+fileName+'"; path="'+pathName+'"; size="'+fileSize+'";';
								}
							}
							catch(e)
							{
								// --
							}
						}
					}
				}
				
				//-- add knowledge base	but only if we have one call
    			if((flg_addKBase.text == "1") && (_swdoc.arrCallrefs.length == 1))
    			{
    				add_call_to_knowledgebase();
    			}
				
				// If we have been invoked to update a call from an e-mail message, this update will 
				// only relate to a single call. We can only handle e-mail audit trail if we are working
				// on a single-call update. 
				if(_swdoc.arrCallrefs.length == 1 && 			// Are we only dealing with a single call reference?
					_swdoc._form["messagesource"] && 	// Are we working from an e-mail message?
					dd.GetGlobalParamAsNumber("Email Audit Trail/StoreEmailAuditTrail")) // Are we configured?
				{
					app.g.attach_message_to_call(_swdoc._form,_swdoc.arrCallrefs[0],arrCallInfo[_swdoc.arrCallrefs[0]],"CloseCallMailFolder");
				}
				
				//-- NWJ - ITSM - resolve related calls
				if(flg_resolvelinked_calls.text=="1")
				{
					//-- F0086107
					for(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)
					{
						var strRelatedBPMParents = "";
						var strParams = "crfs="+pfu(_swdoc.arrCallrefs[refcount]);
						var db = app.g.get_sqrecordset("form/resolvecloseform/get_tasks_for_calls",strParams);
						if(db.Fetch())
						{
							var nParentCallref = db.GetValueAsNumber(0);
							strRelatedBPMParents +=nParentCallref;
						}
					
						var strCallrefFormatText = app.g.callref_pad(_swdoc.arrCallrefs[refcount]);
	
						if(strRelatedBPMParents!="")
						{
							//--- update relaTED CALLS					
							var strAction = "closure";
							if(!_swdoc.boolClosing)
								strAction = "resolution";
							_swdoc.updatedb.updatetxt = "This request was updated as part of the "+strAction+" of task request (" + strCallrefFormatText + ")\n" + _swdoc.updatedb.updatetxt;
							
							// -- Resolve/Close the call using XMLMC API
							var xmlmc = new XmlMethodCall;
							// -- API method
							var strMethod = "updateCalls";
							// -- Find modified values in UPDATEDB table
							var arrExtraUpdateDbValues = new Array();
							var strUpdateDbValues = "";
							if(rec = _swdoc.GetRecord("updatedb"))
							{
								var nColCount = rec.GetCount();
								for(x = 0; x < nColCount; x++)
								{
									if(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')
										continue;
									arrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);
								}
							}
							for (fieldName in arrExtraUpdateDbValues)
							{
								strUpdateDbValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+"</"+fieldName+">";
							}							
							
							// -- Workout "timeOfAction" param
							var strBackDate = _swdoc.nBackdatePeriod;
							if(strBackDate==0 && _swdoc.boolSetToMaxBackdatePeriod)
							{
								strBackDate = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();
							}
							
							// ** API params ** //
							var arrBPMPCallrefs = strRelatedBPMParents.split(",");
							for(x in arrBPMPCallrefs)
								xmlmc.SetValue("callref", arrBPMPCallrefs[x]);
							xmlmc.SetValue("timeSpent", mainform.tm_timespent.value);
							xmlmc.SetValue("description", rec.updatetxt);
							if(_swdoc.opencall.fixcode!="") xmlmc.SetValue("fixCode", _swdoc.opencall.fixcode);
							var boolPublicUpdate = (mainform.flg_updatepublic.text == "1" )? true : false;
							xmlmc.SetValue("publicUpdate", boolPublicUpdate);
							if(strBackDate!=0) xmlmc.SetValue("timeOfAction", app.global.GetAsISO8601TimeString(strBackDate));
							if(rec.udsource!="")
								xmlmc.SetValue("updateSource", rec.udsource);
							if(rec.udcode!="")
								xmlmc.SetValue("updateCode", rec.udcode);
							xmlmc.SetValue("markAsSLAResponse", false);
							if(strUpdateDbValues!="")
								xmlmc.SetParamAsComplexType("extraUpdateDbValues", strUpdateDbValues);
							// -- Invoke XMLMC API
							if(!xmlmc.Invoke("helpdesk",strMethod))
							{
								(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
							}
							
						}//-- if(strRelatedBPMParents!="")								
						//-- end of F0086107
					}//-- end for arrcallrefs
	
					//-- get related children calls for all calls we are resolving
					var strRelatedChildCalls = "";
					for(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)
					{
						if(strRelatedChildCalls!="")strRelatedChildCalls+=",";
						var strAddCalls = app.g.get_slave_calls(_swdoc.arrCallrefs[refcount],"",true);
						if(strAddCalls!="0")
						{
							strRelatedChildCalls+=strAddCalls;
						}
					}
												
					if(strRelatedChildCalls!="")
					{
						//--- update related Calls
						_swdoc.updatedb.updatetxt += " \n" + "This request was resolved (or closed) as part of the following parent requests (" + _swdoc.strResolveCloseCallrefs + ")";
						
						// -- Find modified values in UPDATEDB table
						var arrExtraUpdateDbValues = new Array();
						var strUpdateDbValues = "";
						if(rec = _swdoc.GetRecord("updatedb"))
						{
							var nColCount = rec.GetCount();
							for(x = 0; x < nColCount; x++)
							{
								if(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode' && rec.GetColumnName(x)!='updatetxt')
									continue;
								arrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);
							}
						}
						for (fieldName in arrExtraUpdateDbValues)
						{
							strUpdateDbValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+"</"+fieldName+">";
						}
						
						// -- Resolve/Close the call using XMLMC API
						var xmlmc = new XmlMethodCall;
						// -- API method
						var strMethod = "closeCalls";
						if(nStatus == CS_RESOLVED)
							strMethod = "resolveCalls";
							
						// -- Workout "timeOfAction" param
						var strBackDate = _swdoc.nBackdatePeriod;
						if(strBackDate==0 && _swdoc.boolSetToMaxBackdatePeriod)
						{
							strBackDate = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();
						}
						
						// ** API params ** //
						var arrRCCallrefs = strRelatedChildCalls.split(",");
						for(x in arrRCCallrefs)
							xmlmc.SetValue("callrefs", arrRCCallrefs[x]);
						xmlmc.SetValue("timeSpent", mainform.tb_timespent.value);
						xmlmc.SetValue("description", rec.updatetxt);
						if(_swdoc.opencall.fixcode!="") xmlmc.SetValue("fixCode", _swdoc.opencall.fixcode);
						if(strBackDate!=0) xmlmc.SetValue("timeOfAction", app.global.GetAsISO8601TimeString(strBackDate));
						var boolPublicUpdate = (flg_updatepublic.text == "1" )? true : false;
						xmlmc.SetValue("publicUpdate", boolPublicUpdate);
						if(rec.udsource!="")
							xmlmc.SetValue("updateSource", rec.udsource);
						if(rec.udcode!="")
							xmlmc.SetValue("updateCode", rec.udcode);							
							
						if(rec.updatetxt!="")
							xmlmc.SetValue("updateTxt", rec.updatetxt);
						if(strMethod == "resolveCalls")
						{
							xmlmc.SetValue("status", 6);
						}
						else
						{
							xmlmc.SetValue("status", 16);
						}
						
						//if(strUpdateDbValues!="")
						//	xmlmc.SetParamAsComplexType("extraUpdateDbValues", strUpdateDbValues);	
						// ** EO API params ** //	
						
						// -- Invoke XMLMC API
						
						if(xmlmc.Invoke("VPME","ITSMResolveCalls"))
						{
							var strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();
							var objRes = XMCResult(strXML);
							if(!objRes.success)
							{
								MessageBox("The " + strMethod + " API method was rejected by the server.");
								funcCallback(false);
								return;
	    					}
	    				}
	    				else
						{
							(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
						}
					}//-- if(strRelatedChildCalls!="")			
				}
				
				//-- DJH - Apply Support Units
				//-- SG - Contract Diary - Support Unit usage audit. F0103808
				//### if for some reason blank, then don't do anything either
				if((typeof mainform.tb_avail_units.value !== "undefined") && mainform.tb_avail_units.value!="Unlimited" && mainform.tb_avail_units.value!="" )
				{
					if((mainform.tb_avail_units.value>0) && (mainform.tb_units_assigned.value>0) && (mainform.lb_supp_contract.value!=""))
					{
						var intUnitsAssigned=0;
						for(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)
						{
							intUnitsAssigned++;
						}
	
						var intUnits = 0;
						var aParams = {};
						aParams.udcode='Unit Usage';
						aParams.contract=_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value];
						aParams.callref=_swdoc.arrCallrefs[0];
	
						if((mainform.tb_avail_units.value*1) < (mainform.tb_units_assigned.value*intUnitsAssigned))
						{
	
						}
						else
						{
							intUnits = (mainform.tb_avail_units.value - (mainform.tb_units_assigned.value*intUnitsAssigned));
						}
						var strParams = "units="+pfu(intUnits)+"&contract="+pfu(_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value]);
						app.g.submitsqs("form/resolvecloseform/update_contract_sunits", strParams);
						aParams.urem=intUnits;
						aParams.uuse=(mainform.tb_units_assigned.value*intUnitsAssigned);
						aParams.rel=mainform.fk_con_ser_assoc.value;
						app.g.submitsqs("form/resolvecloseform/add_contract_diary", aParams);
					}	
					
					//-- SG 25/07/2012
					// XMLMC VPME call to handle Support Unit Threshold Breaches.
					var xmlmc = new XmlMethodCall;
					var iTempUnitsAssigned = parseInt(mainform.tb_units_assigned.value);
					var iTempUnitsAvail = parseInt(mainform.tb_avail_units.value);
					xmlmc.SetValue("contractid", mainform.lb_supp_contract.value);
					xmlmc.SetValue("units_used", (isNaN(iTempUnitsAssigned)?0:iTempUnitsAssigned) );
					xmlmc.SetValue("units_remain", (isNaN(iTempUnitsAvail)?0:iTempUnitsAvail) );
					if(xmlmc.Invoke("VPME", "itsmContractUnitBreach"))
					{
						if(xmlmc.GetReturnValue("res1") == "breach_found_alert_sent")
						{
							var aParams = {};
							aParams.udcode='Threshold Breach Alert Sent';
							aParams.contract=_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value];
							aParams.callref=_swdoc.arrCallrefs[0];
							aParams.updatetxt=xmlmc.GetReturnValue("res2");
							app.g.submitsqs("form/resolvecloseform/add_contract_diary", aParams);
						}
					}
					else
					{
						MessageBox(xmlmc.GetLastError());
					}
					//-- SG end of Threshold Breach Alerting
				}
				else
				{
					var aParams = {};
					aParams.udcode='Unit Usage';
					aParams.contract=_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value];
					aParams.callref=_swdoc.arrCallrefs[0];
					aParams.uuse=mainform.tb_units_assigned.value;
					aParams.rel=mainform.fk_con_ser_assoc.value;
					app.g.submitsqs("form/resolvecloseform/add_contract_diary", aParams);
				}
				
    			// if we want to send an email to the customer AND there are file attachments, obtain the 
    			// attachments to attach to the email as well
    			var flSessionFilesInfo = "";
    			if(mainform.flg_emailcustomer.value && app.global.IsConnectedToMailServer())
    			{
					// Now, compose an email to the customer				
					app.global.ComposeCallUpdateEmail(arrCallInfo, 					// Array: Call reference-UdIndex
											_swdoc.updatedb.updatetxt, 	// Message text
											strDocs, 		// File attachments
											_swdoc.updatedb.timespent,
											"CloseCallMailTemplate", 		// Template name
											TEMPLATE_CLOSECALL,				// Template type
											function()
											{
												funcCloseForm();
												return;
											});
				}
				else
				{
					funcCloseForm();
					return;
				}
			}
		}
		else
		{
			(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
		}
		funcCallback(false);
		return;
	}
	
	//-- validate the form
	_swdoc.ValidateForm(function(boolValidate)
	{
		if (!boolValidate)
		{
			funcCallback(false);
			return;
		}
		else
		{
			//-- check profile levels
			if(!mainform.check_profile_levels())
			{
				funcCallback(false);
				return;
			}
			//-- confirm
			mainform.confirm_resolve_close(function(boolConfirmResClose)
			{
				if (!boolConfirmResClose)
				{
					funcCallback(false);
					return;
				}
				else
				{
					funcRestOfFunction();
				}
			});
		}
	});
}


function getReadableDatefromEpoch(dt_epochdate)
{
	var strFormattedDate = "";
	var theDate = new Date(dt_epochdate);
	dateString = theDate.toString();
	arrDateStr = dateString.split(" ");
	strFormattedDate = arrDateStr[2] + "/" + getNumericMonth(arrDateStr[1]) + "/" + arrDateStr[3] + " " + arrDateStr[4].substr(0,2) + ":";
	strFormattedDate += arrDateStr[4].substr(3,2) + ":" + arrDateStr[4].substr(6,2);
	return strFormattedDate;
}

function getNumericMonth(strMonth)
{
	var arrMonth = new Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
	for(i=0; i<arrMonth.length; i++)
	{
		if(strMonth == arrMonth[i])
			return i+1;
	}
}

function replaceIllegalFileCharacters(strText)
{
	//-- This function is used to replace characters in the passed in string that 
	//-- are not suitable for use in filenames and return the modified string 
	
	strOutput = strText;
	strReplacement = "-";
	var i = 0;
	
	while(i < strOutput.length)
	{
		strOutput = strOutput.replace('/', strReplacement);
		strOutput = strOutput.replace(':', strReplacement);
		strOutput = strOutput.replace('*', strReplacement);
		strOutput = strOutput.replace('?', strReplacement);
		strOutput = strOutput.replace('"', strReplacement);
		strOutput = strOutput.replace('\'', strReplacement);
		strOutput = strOutput.replace('<', strReplacement);
		strOutput = strOutput.replace('>', strReplacement);
		
		i++;
	}
	
	return strOutput;
}]]>
						</code>
					</method>
					<method>
						<name>cb_callaction_OnValueChanged</name>
						<code>
							<![CDATA[cb_callaction_OnValueChanged(strValue)
{
	//-- set mode and then setup defaults for that mode
	_swdoc.boolClosing = (strValue!="Resolve Call");
	_swdoc.setup_call_action();

}]]>
						</code>
					</method>
					<method>
						<name>flg_customersurvey_OnValueChanged</name>
						<code>
							<![CDATA[flg_customersurvey_OnValueChanged(strValue)
{
	//-- enable disable
	var bChecked = flg_customersurvey.text == "1";
	_een(cb_surveys,bChecked);
	

}]]>
						</code>
					</method>
					<method>
						<name>OnFieldValueChanged</name>
						<code>
							<![CDATA[OnFieldValueChanged(strName, strValue)
{
	//-- This value is set when a field value has been changed.
	//-- We check this variable on from closing to see if there are any data changes that need to be saved.
	_swdoc.boolFormFieldChanged = true;


}]]>
						</code>
					</method>
					<method>
						<name>dt_actiontime_OnValueChanged</name>
						<code>
							<![CDATA[dt_actiontime_OnValueChanged(strValue)
{
	// -- Var used in this to calculate backDatePeriod
	var nBackdatePeriod = 0;
	
	// -- Calculate the backDatePeriod for processing
	var updateDateTime = mainform.dt_actiontime.text;
	var updateDateTimeValue = mainform.dt_actiontime.value;
	nBackdatePeriod = _swdoc.intGetCurrentEpocTime - updateDateTimeValue;
	
	// -- Processing to set "updatedb.updatetimex" and set _swdoc level nBackdatePeriod variable for use in Resolve/Close action
	var funcProcessBackdate = function()
	{
		if(nBackdatePeriod==0)
		{
			_swdoc.updatedb.updatetimex = _swdoc.intGetCurrentEpocTime;
		}
		if(_swdoc.boolSetToMaxBackdatePeriod)
		{
			_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();
		}
		_swdoc.nBackdatePeriod = nBackdatePeriod;	
		_swdoc.UpdateFormFromData();
	}
	
	// -- Deny if the user has attempted to forward the Date/Time
	if(nBackdatePeriod < 0)
	{
		MessageBox("You have attempted to forward date this call update which is not allowed.");
		_swdoc.boolSetToMaxBackdatePeriod = false;
		nBackdatePeriod=0;
		funcProcessBackdate();
	}
	else
	{	
		// -- Check that the selected Date/Time value does not exceed the maximum allowed backDatePeriod and prompt with an option to set to allowed Date/Time value
		if(nBackdatePeriod > app.session.GetMaxBackdatePeriodAllowed())
		{
			var dTime = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();
			var strMsg = "You have attempted to backdate this call update further than you have sufficient privileges to do so.\n\nDo you want to use the oldest date/time that you are allowed: " + app.global.ConvertDateTimeInText(app.global.GetAsISO8601TimeString(dTime));
			MessageBox(strMsg, MB_ICONQUESTION | MB_YESNO, function(intDecision)
			{	
				if(intDecision != IDYES)
				{
					nBackdatePeriod = 0;
					_swdoc.boolSetToMaxBackdatePeriod = false;
				}
				else
				{
					// -- Maximum backdate period allowed should only be calculated when invoking the API otherwise the value will be inacurrate
					nBackdatePeriod = 0;
                    _swdoc.boolSetToMaxBackdatePeriod = true;
				}
				funcProcessBackdate();
			});
		}
		else
		{
			// -- timeOfAction param in resolveCalls API expects .value property of Date/Time control field
			nBackdatePeriod = updateDateTimeValue;
			_swdoc.boolSetToMaxBackdatePeriod = false;
			funcProcessBackdate();
		}
	}	
}]]>
						</code>
					</method>
					<method>
						<name>btnResolveClose_OnPressed</name>
						<code>
							<![CDATA[btnResolveClose_OnPressed()
{
	mainform.ResolveClose(function(){});
}]]>
						</code>
					</method>
					<method>
						<name>lb_supp_contract_OnValueChanged</name>
						<code>
							<![CDATA[lb_supp_contract_OnValueChanged(strValue)
{
	// TODO: Add your event handler code here
	//-- Lookup units available for selected contract
	if(strValue!="")
	{
		var recContract = new SqlRecord;
		if(recContract.GetRecord("contract", _swdoc.arrContractNameIDs[strValue]))
		{
			var contNumID = recContract.fk_cmdb_id;
		}	
		_swdoc.get_support_units_available(_swdoc.arrContractNameIDs[strValue], mainform.tb_avail_units);
		_swdoc.get_support_unit_decrement(contNumID, mainform.tb_units_assigned, _swdoc.arrContractNameIDs[strValue]);
		//###20120731 _ero(mainform.tb_units_assigned,false);
		_een(mainform.tb_units_assigned, true);
	}
	else
	{
		_eva(mainform.tb_avail_units,0);
		_eva(mainform.tb_units_assigned,0);
		_een(mainform.tb_units_assigned,false);
		_evi(mainform.lbl_con_ser_assoc, false);
		_evi(mainform.lbl_no_con_ser_assoc, false);
		_evi(mainform.lbl_multi_services, false);

/*###		_eva(mainform.tb_avail_units,0);
		_eva(mainform.tb_units_assigned,0);
		_ero(mainform.tb_units_assigned,true);
		mainform.elements['lbl_con_ser_assoc'].visible = false;
		mainform.elements['lbl_no_con_ser_assoc'].visible = false;
*/
	}

}]]>
						</code>
					</method>
				</methods>
			</javascript>
		</layout>
		<layout>
			<appearance>
				<width>360</width>
				<height>220</height>
				<backgroundColor>#ffffff</backgroundColor>
				<fillColour>#ffffff</fillColour>
				<textColour >#000000</textColour >
				<font  size="8">Arial</font>
			</appearance>
			<controls>
			</controls>
			<formActions>
			</formActions>
			<javascript>
				<methods>
				</methods>
			</javascript>
		</layout>
	</layouts>
</espForm>
