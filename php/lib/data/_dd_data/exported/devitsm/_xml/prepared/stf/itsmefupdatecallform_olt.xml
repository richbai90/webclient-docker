<?xml version="1.0" encoding="utf-8" ?>
<espForm>
	<configuration>
		<settings>
			<name>itsmEfUpdateCallForm_OLT</name>
			<title>Update Call Form</title>
			<printTemplates>
			</printTemplates>
			<options>
				<allowResize>true</allowResize>
				<showMenubar>false</showMenubar>
				<showToolbar>false</showToolbar>
				<showStatusBar>false</showStatusBar>
			</options>
		</settings>
		<tables>
			<table>
				<name>updatedb</name>
				<type>Main Details Table</type>
				<flags>5</flags>
				<assignments>
				</assignments>
			</table>
			<table>
				<name>opencall</name>
				<type>Extended Details Table</type>
				<mainDetailsColumn>callref</mainDetailsColumn>
				<flags>0</flags>
				<assignments>
				</assignments>
			</table>
		</tables>
		<showMeItems>
		</showMeItems>
		<javascript>
			<methods>
				<method>
					<name>OnFormClosing</name>
					<code>
						<![CDATA[OnFormClosing()
{
	if (_swdoc.boolForceClose)
	{
		return true;
	}
	
	//-- required for modaless message box
	var funcUnlockReset = function()
	{
		// Unlock our call(s)
		app.global.UnlockCalls(_swdoc.strIncomingCallrefs);
	
		_swdoc.ResetData();
			
		return true;
	}
	
	//Check for Changes to any of the data fields
	if(_swdoc.bFormFieldChanged)
	{
		MessageBox("You have unsaved data on this form. Do you still want to close this form?", MB_ICONQUESTION | MB_YESNO, function(intDecision)
		{
			if (intDecision === IDNO)
			{
				return false;
			}
			else
			{
				funcUnlockReset();
				_swdoc.boolForceClose = true;
				_swdoc.CloseForm();
			}
		});
	}
	else
	{
		return funcUnlockReset();
	}	
}]]>
					</code>
				</method>
				<method>
					<name>OnFormLoading</name>
					<code>
						<![CDATA[OnFormLoading(strFormName, strClass)
{
	
	_swdoc.strIncomingCallrefs = _swdoc._form["callrefs"];
	if(_swdoc.strIncomingCallrefs=="")
	{
		//-- see if we have passed any in
		_swdoc.strIncomingCallrefs = _swdoc.GetArg("in_callrefs");
	}
	
	
	//if analyst does not have permissions to
	//update calls, don't open form.
	if (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANUPDATECALLS, false))
	{
		MessageBox("I am sorry, you do not have the right to update calls.\n Please contact your administrator");
		return false;
	}

	//if one or more calls are locked, then don't open form.
	if(!app.global.LockCalls(_swdoc.strIncomingCallrefs,"UPDATE",true))
	{
		//MessageBox("I am sorry, one or more of the selected calls is locked by another user.");
		return false;
	}
	
	
	// convert string of call references into an array
	_swdoc.arrCallRefs = _swdoc.strIncomingCallrefs.split(",");
	
	// set the page title
	var strPageTitle = "";
	strPageTitle = "Update Operational Task";
	if (_swdoc.arrCallRefs.length > 1)
	{
		//if there is more than one call, set the page title to plural
		strPageTitle += "s";
	}
	
	for(var i=0; i<_swdoc.arrCallRefs.length; i++)
	{
		strPageTitle += (i > 0) ? ", " : ":";
		strPageTitle += " "+dd.tables.opencall.columns.callref.FormatValue(_swdoc.arrCallRefs[i]);
	}
	_swdoc.SetTitle(strPageTitle);

	// get current time, so we can check if call is being backdated later
	_swdoc.dtCurrentTime = new Date();

	// Set the default update text if it has been passed in
	_swdoc.updatedb.updatetxt = _form['updatetext'];

	// Get the Call Status information for various checks later
	for(var i = 0; i<_swdoc.arrCallRefs.length; i++)
	{
		var nCStatus = app.global.GetCallStatusInfo(_swdoc.arrCallRefs[i]).nStatus;
		if (nCStatus == 1)
		{
			_swdoc.bPending = true;
		}		
		if (nCStatus == 2)
		{
			_swdoc.nUnassigned++;
		} 
		if (nCStatus == 3)
		{
			_swdoc.nUnaccepted++;
		}
		if (nCStatus > 15 || nCStatus == 6)
		{
			_swdoc.bNotOpen = true;
		}
		if (nCStatus == 4)
		{
			_swdoc.bOnHold = true;
		}
		
	}

	return true;
}]]>
					</code>
				</method>
				<method>
					<name>OnSaveData</name>
					<code>
						<![CDATA[OnSaveData()
{
	// This should never get called, but if for some reason it does, we only want this form
	// to close if it is cancelled or if the analyst clicks one of the update buttons.

	return false;
}]]>
					</code>
				</method>
				<method>
					<name>(Globals)</name>
					<code>
						<![CDATA[// Define global variables used by this form
var _swdoc = (IsObjectDefined("_bHtmlWebClient"))?top:_swdoc;
var strIncomingCallrefs = "";
var arrCallRefs = null; 	// This is an array of the call references applied to this update
var dtCurrentTime = null; 	// This is the time the form was opened.
var strUpdateText = null;	// This will store any update text that was passed to the form.
var nUnassigned = 0;     // The next few variables are to double-check statuses for various checks
var nUnaccepted = 0;
var bNotOpen = false;
var bPending = false;
var bOnHold = false;
var bFormFieldChanged = false;	//This var is used to check for changes to data fields and is set to true when any 
								//field data is changed
var boolForceClose = false;
var bTargetFixTimeChanged = false;

var strOrigOwner = "";
var strSupportGroup = "";

//-- mainform pointer
function MF()
{
	return mainform;
}

function check_sla_response_flag()
{
	//--
	//-- NWJ - 14.02.2006 - by default set to hidden. We will show if it needs responding to.		
	//-- if the logged-in analyst does not have permission to change call status, then they cannot mark this as SLA response
	_een(_swdoc.MF().flg_slaresponse, false);
	if(app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))
	{
		//-- make sure the flag is visible
		_evi(_swdoc.MF().flg_slaresponse, true);
		
		//-- if the calls have not been responded to previously, then give the analyst the option of marking this as the SLA response	
		var db = new SqlQuery;		
		var strParams = "crfs="+pfu(_swdoc.strIncomingCallrefs);
		db.InvokeStoredQuery("form/updatecall/get_resp_details", strParams);
		if(db.Fetch())
		{
			var nCount = db.GetValueAsNumber(0);
			if(nCount > 0)
			{
				//-- can mark as sla response
				_een(_swdoc.MF().flg_slaresponse, true);
			}
			else
			{
			    //sandra 17/08/2007 Bug 60006 Mark SLA response flag 
			    //-- nwj : why are we setting it to checked?? why not just hide it??
				_eva(_swdoc.MF().flg_slaresponse, 1);
				
			}
		}
	}
	else
	{
		//-- they do not have permission so hide the field
		_evi(_swdoc.MF().flg_slaresponse, false);
	}
}]]>
					</code>
				</method>
				<method>
					<name>(User Defined Functions)</name>
					<code>
						<![CDATA[/*
	Created by Hornbill Systems
	
	Updates
	-------
	
	Code	Date		Author					Description
	-----------------------------------------------------------------------------------------
	ind01	11/05/07	Ivan Nicholas Dorosh	Error when accepting multiple calls Bug 57068

*/

///////////////////////////////////////////////////////////////////////////////////
// this is the _swdoc.UpdateCalls function that is called when a user clicks
// on either Update Call or Update and Assign.  It is being
// defined here so that we can use it for either.
// this function takes as an argument the analyst, if any, to whom you are assigning the call
function UpdateCalls(strAssignToGroup, strAssignToAnalyst, boolThirdParty)
{
	// -- Set the SLA text to null if the SLA field is not applicable (multiple calls, etc.)
	strSLAtext = false;
	
	// -- Find modified values in OPENCALL table
	var boolUpdatedValues = true;
	var arrUpdateCallValues = new Array();
	var strUpdateCallValues = "";
	if(rec = _swdoc.GetRecord("opencall"))
	{
		var nColCount = rec.GetCount();
		for(x = 0; x < nColCount; x++)
		{
			if(!rec.IsModified(x))
				continue;
			if(!_swdoc.bUserSelectedFixCode && rec.GetColumnName(x)=="fixcode") 
				continue;
			arrUpdateCallValues[rec.GetColumnName(x)] = rec.GetValue(x);
		}
	}
	for (fieldName in arrUpdateCallValues)
	{
		strUpdateCallValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrUpdateCallValues[fieldName])+"</"+fieldName+">";
	}
	// -- Update call values using XMLMC API if we found modified values in OPENCALL table 
	if(strUpdateCallValues!="")
	{
		strUpdateCallValues = "<opencall>"+strUpdateCallValues+"</opencall>";
		var arrCallrefs = _swdoc.CallrefsCommaString;
		// -- Update call values using helpdesk::updateCallValues API 
		var xmlmc = new XmlMethodCall;
		var strMethod = "updateCallValues";
		for(var refCount = 0; refCount < arrCallrefs.length; refCount++)
		{
			xmlmc.SetValue("callref", arrCallrefs[refCount]);
			xmlmc.SetParamAsComplexType("additionalCallValues", strUpdateCallValues);	
			if(xmlmc.Invoke("helpdesk", strMethod))
			{
	    		var strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();
				var objRes = XMCResult(strXML);
				if(!objRes.success)
				{
					boolUpdatedValues = false;
					MessageBox("The " + strMethod + " API method was rejected by the server.");
					return false;
				}
			}
			else
			{
				boolUpdatedValues = false;
				(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
				return false;
			}
		}
	}
	
	// -- Update the call using XMLMC API
	var xmlmc = new XmlMethodCall;
	// -- API method
	var strMethod = "updateCalls";
	// -- Find modified values in UPDATEDB table
	var arrExtraUpdateDbValues = new Array();
	var strUpdateDbValues = "";
	if(rec = _swdoc.GetRecord("updatedb"))
	{
		var nColCount = rec.GetCount();
		for(x = 0; x < nColCount; x++)
		{
			if(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')
				continue;
			arrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);
		}
	}
	for (fieldName in arrExtraUpdateDbValues)
	{
		strUpdateDbValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+"</"+fieldName+">";
	}
	
	// -- Workout "timeOfAction" value
	var strBackDate = new Date(mainform.dt_updatedate.text);
	
	// ** API params ** //
	var arrCallrefs = _swdoc.strIncomingCallrefs.split(",");
 	for(x in arrCallrefs)
		xmlmc.SetValue("callref", arrCallrefs[x]);
	xmlmc.SetValue("timeSpent", mainform.tm_timespent.value);
	xmlmc.SetValue("description", rec.updatetxt);
	var boolPublicUpdate = (mainform.flg_updatepublic.text == "1" )? true : false;
	xmlmc.SetValue("publicUpdate", boolPublicUpdate);
	xmlmc.SetValue("timeOfAction", strBackDate);
	if(rec.udsource!="")
		xmlmc.SetValue("updateSource", rec.udsource);
	if(rec.udcode!="")
		xmlmc.SetValue("updateCode", rec.udcode);
	if(strAssignToGroup==undefined)
		strAssignToGroup = "";
	if(strAssignToGroup!="")
	{
		if(boolThirdParty)
		{
			// -- If "Update and Assign to 3rd Party" is selected, then change the API method
			strMethod = "updateAndAssignCallTo3rdParty";
			xmlmc.SetValue("assignThirdPartySupplier", strAssignToGroup);
			xmlmc.SetValue("assignThirdPartyContract", strAssignToAnalyst);
		}
		else
		{
			// -- "Update and Assign" is selected, then change the API method
			strMethod = "updateAndAssignCalls";
			xmlmc.SetValue("assignGroup", strAssignToGroup);
			if(strAssignToAnalyst!="")
			{
				xmlmc.SetValue("assignAnalyst", strAssignToAnalyst);
			}
		}
	}	
	var boolMarkAsSLAResponse = (mainform.flg_slaresponse.text == "1" )? true : false;
	xmlmc.SetValue("markAsSLAResponse", boolMarkAsSLAResponse);
	if(strSLAtext)
		xmlmc.SetValue("priority", strSLAtext);	
	if (_swdoc.bTargetFixTimeChanged)
		xmlmc.SetValue("targetFixTime", mainform.tb_target.text);
	// -- fileAttachment param
	for(i=0; i<mainform.fl_attachslist.rowCount();i++)
	{
		var fileName = mainform.fl_attachslist.GetItemText(i,3);
		var serverFile = fileName.indexOf("MFA:");
		if(serverFile >= 0)
		{
			//-- File was attached to email use serverFileAttachment API
			var strFileName = mainform.fl_attachslist.GetItemText(i,0);
			var strData = mainform.fl_attachslist.GetItemText(i,3);
			var strXML = "<fileName>"+strFileName+ "</fileName>";
			if(!app.bWebClient)
				strXML += "<fileSource>"+strData+"</fileSource>";
			xmlmc.SetParamAsComplexType("serverFileAttachment",strXML);
		}else
		{
			//-- File was Uploaded use fileAttachement API
			var strFileName = mainform.fl_attachslist.GetItemText(i,0);
			var strData = app.global.LoadFileInBase64(mainform.fl_attachslist.GetItemText(i,3));
			var strXML = "<fileName>"+strFileName+ "</fileName>";
			if(!app.bWebClient)
				strXML += "<fileData>"+strData+"</fileData>";
			xmlmc.SetParamAsComplexType("fileAttachment",strXML);
		}
    }	
	if(strUpdateDbValues!="")
		xmlmc.SetParamAsComplexType("extraUpdateDbValues", strUpdateDbValues);
	// ** EO API params ** //
	
	// -- Invoke XMLMC API
	if(xmlmc.Invoke("helpdesk",strMethod))
	{
		var strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();
		var objRes = XMCResult(strXML);
		if(!objRes.success)
		{
			MessageBox("The " + strMethod + " API method was rejected by the server.");
			return false;
	    }
		else
		{
			var myXmlFile = new XmlFile(); 
			bRet = myXmlFile.loadFromString(strXML); 
			var arrChildCallInfo = null;
			var arrCallInfo = new Array();
			var strDocs = "";
			for (count = 0; count < myXmlFile.methodCallResult.params.length; count ++) 
			{
				if(myXmlFile.methodCallResult.params[count].nodeName=="callActionStatus")
				{  
					var boolSuccess = myXmlFile.methodCallResult.params[count]['success'].nodeValue;
					if(boolSuccess=="false")
					{
						var strMessage =  myXmlFile.methodCallResult.params[count]['message'].nodeValue;
						MessageBox(strMessage);
						return false;
					}
					var strCallref = myXmlFile.methodCallResult.params[count]['callref'].nodeValue;
					var strIndex = myXmlFile.methodCallResult.params[count]['udIndex'].nodeValue;
					
					arrCallInfo[strCallref] = strIndex;
				}
				else if(myXmlFile.methodCallResult.params[count].nodeName=="callFileAttachment")
				{
					var intCount = arrCallInfo.length;
					if(intCount==1)
					{
						try
						{
							var updateId = myXmlFile.methodCallResult.params[count]['updateId'].nodeValue;
							if(updateId==arrCallInfo[strCallref])
							{
								var pathName = myXmlFile.methodCallResult.params[count]['pathName'].nodeValue;
								var fileName = myXmlFile.methodCallResult.params[count]['fileName'].nodeValue;
								var fileSize = myXmlFile.methodCallResult.params[count]['fileSize'].nodeValue;
								if(strDocs!="") strDocs +="\r\n";
								strDocs +='displayname="'+fileName+'"; path="'+pathName+'"; size="'+fileSize+'";';
							}
						}
						catch(e)
						{
							// --
						}
					}
				}
			}
			
			// If we have been invoked to update a call from an e-mail message, this update will 
			// only relate to a single call. We can only handle e-mail audit trail if we are working
			// on a single-call update. 
			if(_swdoc.arrCallRefs.length == 1 && 			// Are we only dealing with a single call reference?
				_swdoc._form["messagesource"] && 	// Are we working from an e-mail message?
				dd.GetGlobalParamAsNumber("Email Audit Trail/StoreEmailAuditTrail")) // Are we configured?
			{
				app.g.attach_message_to_call(_swdoc._form,_swdoc.arrCallRefs[0],arrCallInfo[_swdoc.arrCallRefs[0]]);
			}
			
    		// if we want to send an email to the customer AND there are file attachments, obtain the 
    		// attachments to attach to the email as well
    		var flSessionFilesInfo = "";
    		
    				
			// -- ADDITIONAL ACTIONS -- //
			// -- if we need to get the op tasks parents to put on hold or apply
			var strParents = "";
			if(mainform.flg_addtoparentdiary.value == 1)
			{
				var strParams = "crfs="+pfu(_swdoc.strIncomingCallrefs);
				var oRS = app.g.get_sqrecordset("form/updatecall/get_parents_for_calls",strParams);
				while(oRS.Fetch())
				{
					if(strParents != "") strParents +=",";
					strParents +=  app.g.get_field(oRS,"bpm_parentcallref");
				}
			}
			//if we apply to parents, add parent callrefs to list
			if(mainform.flg_addtoparentdiary.value == 1)
			{
				if(strParents!="")
				{
					// -- Update the call using XMLMC API
					var xmlmc = new XmlMethodCall;
					// -- API method
					var strMethod = "updateCalls";
					// -- Find modified values in UPDATEDB table
					var arrExtraUpdateDbValues = new Array();
					var strUpdateDbValues = "";
					if(rec = _swdoc.GetRecord("updatedb"))
					{
						var nColCount = rec.GetCount();
						for(x = 0; x < nColCount; x++)
						{
							if(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')
								continue;
							arrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);
						}
					}
					for (fieldName in arrExtraUpdateDbValues)
					{
						strUpdateDbValues += "<"+fieldName+">"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+"</"+fieldName+">";
					}
					
					// -- Workout "timeOfAction" value
					var strBackDate = new Date(mainform.dt_updatedate.text);
					
					// ** API params ** //
					var arrCallrefs = strParents.split(",");
 					for(x in arrCallrefs)
						xmlmc.SetValue("callref", arrCallrefs[x]);
					xmlmc.SetValue("timeSpent", mainform.tm_timespent.value);
					xmlmc.SetValue("description", rec.updatetxt);
					var boolPublicUpdate = (mainform.flg_updatepublic.text == "1" )? true : false;
					xmlmc.SetValue("publicUpdate", boolPublicUpdate);
					xmlmc.SetValue("timeOfAction", strBackDate);
					if(rec.udsource!="")
						xmlmc.SetValue("updateSource", rec.udsource);
					if(rec.udcode!="")
						xmlmc.SetValue("updateCode", rec.udcode);
					var boolMarkAsSLAResponse = (mainform.flg_slaresponse.text == "1" )? true : false;
					xmlmc.SetValue("markAsSLAResponse", boolMarkAsSLAResponse);
					if(strSLAtext)
						xmlmc.SetValue("priority", strSLAtext);	
					if (_swdoc.bTargetFixTimeChanged)
						xmlmc.SetValue("targetFixTime", mainform.tb_target.text);
					// -- fileAttachment param
					for(i=0; i<mainform.fl_attachslist.rowCount();i++)
					{
						var fileName = mainform.fl_attachslist.GetItemText(i,3);
						var serverFile = fileName.indexOf("MFA:");
						if(serverFile >= 0)
						{
							//-- File was attached to email use serverFileAttachment API
							var strFileName = mainform.fl_attachslist.GetItemText(i,0);
							var strData = mainform.fl_attachslist.GetItemText(i,3);
							var strXML = "<fileName>"+strFileName+ "</fileName>";
							if(!app.bWebClient)
								strXML += "<fileSource>"+strData+"</fileSource>";
							xmlmc.SetParamAsComplexType("serverFileAttachment",strXML);
						}else
						{
							//-- File was Uploaded use fileAttachement API
							var strFileName = mainform.fl_attachslist.GetItemText(i,0);
							var strData = app.global.LoadFileInBase64(mainform.fl_attachslist.GetItemText(i,3));
							var strXML = "<fileName>"+strFileName+ "</fileName>";
							if(!app.bWebClient)
								strXML += "<fileData>"+strData+"</fileData>";
							xmlmc.SetParamAsComplexType("fileAttachment",strXML);
						}
    				}
    				if(strUpdateDbValues!="")
						xmlmc.SetParamAsComplexType("extraUpdateDbValues", strUpdateDbValues);
					// ** EO API params ** //
					
					// -- Invoke XMLMC API
					if(!xmlmc.Invoke("helpdesk",strMethod))
					{
						(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
					}
				}
			}
		
			_swdoc.bFormFieldChanged = false;
			return true;
		}
	}
	else
	{
		(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());
	}
	
	return false;
}

// Validate the information entered into the form by the user. Return 'true' if
// the data is OK, of 'false' otherwise.  MessageBox's may be shown to indicate
// validation failure
function ValidateForm()
{
	//validate timespent field
	if((mainform.tm_timespent.text == 0) && (mainform.tm_timespent.mandatory)) 
	{
		MessageBox("You must enter the amount of time you spent on this action.", MB_OK);
		return false;	// Make sure that the time spent is entered
	}
    
	//validate description field
	if(mainform.tb_description.text == "")
	{
		MessageBox("You must enter an update in the Action Description", MB_OK);
		return false;	// Make sure we have some update text
	}

	//validate actionsource field
	if(mainform.tb_actionsource.mandatory == true  && mainform.tb_actionsource.text.length == 0)
	{
		var Message = "The field '" + mainform.lbl_actionsource.text + "' must be completed before you can apply this action";
		MessageBox(Message);
		return false;
	}
	
	//validate general update field
	if(mainform.tb_generalupdate.mandatory == true && mainform.tb_generalupdate.text.length == 0)
	{
		var Message = "The field '" + mainform.lbl_actiontype.text + "' must be completed before you can apply this action";
		MessageBox(Message);
		return false;
	}
	
	if(_swdoc.check_mandatory_fields("opencall",mainform))
	{
		return _swdoc.check_mandatory_fields("updatedb",mainform);
	}
	else
	{
		return false;
	}

	return true;
}	//end _swdoc.ValidateForm

//-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table
//--					alert user if need be and return false						
function check_mandatory_fields(strTable,oForm)
{
    for (var x = 0; x<oForm.elements.length;x++)
    {
        var element = oForm.elements[x];
        if ((element.mandatory) && (element.text =="") && (element.visible))
        {
            var colName = "";
            var fieldName = "(not specified)";
            if(element.dataRef!="")
            {
            	var arrInfo = element.dataRef.split(".");
            	var strTable = arrInfo[0];
            	var colName = arrInfo[1];
            	var fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;
            }
            MessageBox("The field '" + fieldName + "' is a mandatory field and must be completed.");
            return false;
        }
    }
    return true;
}


function replaceIllegalFileCharacters(strText)
{
	//-- This function is used to replace characters in the passed in string that 
	//-- are not suitable for use in filenames and return the modified string 
	
	strOutput = strText;
	strReplacement = "-";
	var i = 0;
	
	while(i < strOutput.length)
	{
		strOutput = strOutput.replace('/', strReplacement);
		strOutput = strOutput.replace(':', strReplacement);
		strOutput = strOutput.replace('*', strReplacement);
		strOutput = strOutput.replace('?', strReplacement);
		strOutput = strOutput.replace('"', strReplacement);
		strOutput = strOutput.replace('\'', strReplacement);
		strOutput = strOutput.replace('<', strReplacement);
		strOutput = strOutput.replace('>', strReplacement);
		
		i++;
	}
	
	return strOutput;
}]]>
					</code>
				</method>
			</methods>
		</javascript>
	</configuration>
	<layouts>
		<layout>
			<appearance>
				<width>557</width>
				<height>301</height>
				<backgroundColor>#ffffff</backgroundColor>
				<fillColour>#ffffff</fillColour>
				<textColour >#000000</textColour >
				<font  size="8">Arial</font>
			</appearance>
			<controls>
				<control>
					<general>
						<name>tb_description</name>
						<type>Field</type>
						<group>Tab1:0</group>
					</general>
					<appearance>
						<index>0</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>198</top>
							<left>17</left>
							<right>537</right>
							<bottom>282</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.updatetxt</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Text Edit</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>true</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>true</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<autoCompleteField>false</autoCompleteField>
							<editUnlimitedText>true</editUnlimitedText>
							<url>false</url>
						</flags>
						<textLineCount>4</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>CaptionPanel2</name>
						<type>CaptionBar</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>true</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>1</index>
						<caption>Details</caption>
						<backgroundColor>#f1f1f1</backgroundColor>
						<foregroundColor>#003366</foregroundColor>
						<font  size="10" bold="1">Trebuchet (MS)</font>
						<alignment>Left</alignment>
						<fillStyle>Vertical Gradient</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>29</top>
							<left>4</left>
							<right>395</right>
							<bottom>136</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
							<backgroundColor2>#d8d8d8</backgroundColor2>
							<imageHSpace>10</imageHSpace>
							<slope>12</slope>
							<borderColor>#d3c9b6</borderColor>
							<headerHeight>23</headerHeight>
							<hasBorder>1</hasBorder>
							<panelBorderColor>#d3c9b6</panelBorderColor>
							<fillStyle>0</fillStyle>
							<panelBackgroundColor>#f2eedd</panelBackgroundColor>
							<panelBackgroundColor2>#000000</panelBackgroundColor2>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>dt_updatedate</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>2</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>73</top>
							<left>11</left>
							<right>218</right>
							<bottom>91</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Date/Time Control</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<colorDateIndicator>false</colorDateIndicator>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<rawColumns>#eeeeee</rawColumns>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<dateFormatMode>0</dateFormatMode>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tm_timespent</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>3</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>73</top>
							<left>227</left>
							<right>286</right>
							<bottom>91</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Minute Time Period</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<defaultValue>5</defaultValue>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_actionsource</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>4</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>110</top>
							<left>11</left>
							<right>218</right>
							<bottom>128</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udsource</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Distinct Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<pickListOrderDesc>false</pickListOrderDesc>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<defaultValue>Internal</defaultValue>
							<hintText> </hintText>
							<listItems>Internal|3rd Party|</listItems>
							<borderColor>#c0c0c0</borderColor>
							<sqlSource>swdata</sqlSource>
							<distinctTable>swlists</distinctTable>
							<distinctColumn>value</distinctColumn>
							<displayColumn>display_name</displayColumn>
							<listFilter>lid=OLA-ACTION-SOURCE</listFilter>
							<storedQuery>common.getSwList</storedQuery>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>tb_generalupdate</name>
						<type>Field</type>
					</general>
					<appearance>
						<index>5</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>110</top>
							<left>227</left>
							<right>388</right>
							<bottom>128</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udcode</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Distinct Pick List</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>true</comboNewValues>
							<pickListOrderDesc>false</pickListOrderDesc>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<defaultValue>General Update</defaultValue>
							<listItems>General Update|Support Re-Assignment|Service Level Change|</listItems>
							<borderColor>#c0c0c0</borderColor>
							<sqlSource>swdata</sqlSource>
							<distinctTable>swlists</distinctTable>
							<distinctColumn>value</distinctColumn>
							<displayColumn>display_name</displayColumn>
							<listFilter>lid=OLA-ACTION-TYPE</listFilter>
							<storedQuery>common.getSwList</storedQuery>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_updatepublic</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>6</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>56</top>
							<left>405</left>
							<right>534</right>
							<bottom>74</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>Update to be public^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_slaresponse</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>7</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>76</top>
							<left>405</left>
							<right>546</right>
							<bottom>94</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<flags>
							<invisible>false</invisible>
							<readOnly>false</readOnly>
							<mandatory>false</mandatory>
							<mandatoryLabelBackground>false</mandatoryLabelBackground>
							<mandatoryLabelText>false</mandatoryLabelText>
							<allowNullValue>false</allowNullValue>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<readOnlyInit>false</readOnlyInit>
							<comboAutoUpdate>false</comboAutoUpdate>
							<comboNewValues>false</comboNewValues>
						</flags>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<activeTextColor>#eeeeee</activeTextColor>
							<flagItems>Mark as SLA response^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Tab1</name>
						<type>TabControl</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>8</index>
						<caption>Tab1</caption>
						<backgroundColor>#ded7ce</backgroundColor>
						<foregroundColor>#ffffff</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>170</top>
							<left>7</left>
							<right>546</right>
							<bottom>290</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<tabStyle>Top</tabStyle>
					<tabSize>19</tabSize>
					<items>
						<item>
							<name>Description</name>
							<properties>56=#d1e0ee|_flags=0</properties>
							<textBorder>None</textBorder>
							<textBackgroundColor>#ffffff</textBackgroundColor>
							<controlInfo>
								<mouseOverCursor>Window Default</mouseOverCursor>
								<properties>
									<tabColor>#d1e0ee</tabColor>
								</properties>
							</controlInfo>
						</item>
						<item>
							<name>File Attachments</name>
							<properties>56=#ffcc66|_flags=0</properties>
							<textBorder>None</textBorder>
							<textBackgroundColor>#ffffff</textBackgroundColor>
							<controlInfo>
								<mouseOverCursor>Window Default</mouseOverCursor>
								<properties>
									<tabColor>#ffcc66</tabColor>
								</properties>
							</controlInfo>
						</item>
					</items>
					<selectedTextFont  size="8">Arial</selectedTextFont>
					<selectedTextColor>#000000</selectedTextColor>
					<deselectedTextColor>#000000</deselectedTextColor>
					<tabSlopeLeft>2</tabSlopeLeft>
					<tabSlopeRight>2</tabSlopeRight>
					<deselectedTabHeightOffset>1</deselectedTabHeightOffset>
					<tabSpacing>0</tabSpacing>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<tabStyle>0</tabStyle>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>fl_attachslist</name>
						<type>FileListTable</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
							<showHeader>true</showHeader>
							<verticalGridLines>true</verticalGridLines>
							<horizontalGridLines>true</horizontalGridLines>
							<autoLoad>true</autoLoad>
							<allowMultiSelect>true</allowMultiSelect>
						</flags>
						<group>Tab1:1</group>
					</general>
					<appearance>
						<index>9</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>Rectangle</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>198</top>
							<left>16</left>
							<right>467</right>
							<bottom>282</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<columns>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>File Name</name>
							<width>188</width>
							<image>-1</image>
							<dataColumn>0</dataColumn>
						</controlInfo>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>Size</name>
							<width>70</width>
							<image>-1</image>
							<dataColumn>1</dataColumn>
						</controlInfo>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>true</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>Last Modified</name>
							<width>120</width>
							<image>-1</image>
							<dataColumn>2</dataColumn>
						</controlInfo>
						<controlInfo>
							<mouseOverCursor>Window Default</mouseOverCursor>
							<type>Text Edit</type>
							<flags>
								<invisible>false</invisible>
								<readOnly>false</readOnly>
								<mandatory>false</mandatory>
								<mandatoryLabelBackground>false</mandatoryLabelBackground>
								<mandatoryLabelText>false</mandatoryLabelText>
								<allowNullValue>false</allowNullValue>
								<skipTabStop>false</skipTabStop>
								<disabled>false</disabled>
								<protected>false</protected>
								<noMacroExpand>false</noMacroExpand>
								<readOnlyInit>false</readOnlyInit>
								<autoCompleteField>false</autoCompleteField>
								<editUnlimitedText>false</editUnlimitedText>
								<url>false</url>
								<hidden>false</hidden>
								<allowResize>true</allowResize>
								<allowSort>false</allowSort>
							</flags>
							<textLineCount>0</textLineCount>
							<textInputFormat>Text</textInputFormat>
							<properties>
							</properties>
							<name>Full Local Path</name>
							<width>100</width>
							<image>-1</image>
							<dataColumn>3</dataColumn>
						</controlInfo>
					</columns>
					<sortColumn>-1</sortColumn>
					<sortDescending>false</sortDescending>
					<headerHeight>16</headerHeight>
					<rowHeight>16</rowHeight>
					<selectedColor>#00008b</selectedColor>
					<selectedTextColor>#ffffff</selectedTextColor>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<borderColor>#c0c0c0</borderColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>Rect1</name>
						<type>Rectange</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>10</index>
						<backgroundColor>#d4d0c8</backgroundColor>
						<foregroundColor>#dddddd</foregroundColor>
						<font  size="0"/>
						<borderStyle>Rectangle</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>0</top>
							<left>0</left>
							<right>558</right>
							<bottom>25</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>true</disabled>
							<protected>false</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_update</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Rect1</group>
					</general>
					<appearance>
						<index>11</index>
						<caption>Update</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>1</top>
							<left>8</left>
							<right>78</right>
							<bottom>24</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>-1</commands>
							<eventButtonIcon>ImageList=Hold Call;IconIndex=4</eventButtonIcon>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_addfile</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:1</group>
					</general>
					<appearance>
						<index>12</index>
						<caption>Add</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>195</top>
							<left>475</left>
							<right>539</right>
							<bottom>219</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>74</commands>
							<eventButtonIcon>ImageList=Helpdesk Utility Icons;IconIndex=74</eventButtonIcon>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_removefile</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
						<group>Tab1:1</group>
					</general>
					<appearance>
						<index>13</index>
						<caption>Remove</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>225</top>
							<left>475</left>
							<right>539</right>
							<bottom>249</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>-1</commands>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_updateassign</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>14</index>
						<caption>Update and Assign</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>470</top>
							<left>320</left>
							<right>444</right>
							<bottom>493</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>true</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>-1</commands>
							<eventButtonIcon>ImageList=Hold Call;IconIndex=3</eventButtonIcon>
							<eventButtonIconAlign>0</eventButtonIconAlign>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lbl_actiontype</name>
						<type>FieldName</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>15</index>
						<caption>Action Type</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Right</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>94</top>
							<left>225</left>
							<right>287</right>
							<bottom>106</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udcode</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lbl_actionsource</name>
						<type>FieldName</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>16</index>
						<caption>Action Source</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>94</top>
							<left>9</left>
							<right>82</right>
							<bottom>106</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.udsource</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<type>FieldName</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>17</index>
						<caption>Time Spent</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Right</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>57</top>
							<left>225</left>
							<right>282</right>
							<bottom>71</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>25</left>
							<right>25</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
						<binding>updatedb.timespent</binding>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>lbl_datetime</name>
						<type>Text</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>18</index>
						<caption>Date/Time of Update</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
						<alignment>Left</alignment>
						<borderStyle>None</borderStyle>
						<fillStyle>Solid</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>57</top>
							<left>8</left>
							<right>120</right>
							<bottom>71</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_addfile</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>19</index>
						<caption>Attach File</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>1</top>
							<left>456</left>
							<right>545</right>
							<bottom>24</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>100</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>74</commands>
							<eventButtonIcon>ImageList=Helpdesk Utility Icons;IconIndex=74</eventButtonIcon>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>CaptionPanel3</name>
						<type>CaptionBar</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>true</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>20</index>
						<caption>Options</caption>
						<backgroundColor>#f1f1f1</backgroundColor>
						<foregroundColor>#003366</foregroundColor>
						<font  size="10" bold="1">Trebuchet (MS)</font>
						<alignment>Left</alignment>
						<fillStyle>Vertical Gradient</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>29</top>
							<left>403</left>
							<right>552</right>
							<bottom>136</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>100</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
							<backgroundColor2>#d8d8d8</backgroundColor2>
							<imageHSpace>10</imageHSpace>
							<slope>12</slope>
							<borderColor>#d3c9b6</borderColor>
							<headerHeight>23</headerHeight>
							<hasBorder>1</hasBorder>
							<panelBorderColor>#d3c9b6</panelBorderColor>
							<fillStyle>0</fillStyle>
							<panelBackgroundColor>#f2eedd</panelBackgroundColor>
							<panelBackgroundColor2>#000000</panelBackgroundColor2>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>CaptionPanel1</name>
						<type>CaptionBar</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>true</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>21</index>
						<caption>Other Information</caption>
						<backgroundColor>#f1f1f1</backgroundColor>
						<foregroundColor>#003366</foregroundColor>
						<font  size="10" bold="1">Trebuchet (MS)</font>
						<alignment>Left</alignment>
						<fillStyle>Vertical Gradient</fillStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>142</top>
							<left>4</left>
							<right>552</right>
							<bottom>297</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>100</right>
							<bottom>100</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<properties>
							<backgroundColor2>#d8d8d8</backgroundColor2>
							<imageHSpace>10</imageHSpace>
							<slope>12</slope>
							<borderColor>#d3c9b6</borderColor>
							<headerHeight>23</headerHeight>
							<hasBorder>1</hasBorder>
							<panelBorderColor>#d3c9b6</panelBorderColor>
							<fillStyle>0</fillStyle>
							<panelBackgroundColor>#f2eedd</panelBackgroundColor>
							<panelBackgroundColor2>#000000</panelBackgroundColor2>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>flg_addtoparentdiary</name>
						<type>Field</type>
						<flags>
							<transparent>true</transparent>
							<xpStyle>false</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>false</toolbarButtonStyle>
							<cache>false</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>22</index>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Arial</font>
						<borderStyle>None</borderStyle>
					</appearance>
					<objectPlacement>
						<position>
							<top>96</top>
							<left>405</left>
							<right>557</right>
							<bottom>113</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>50</left>
							<right>50</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<type>Form Flags</type>
						<textLineCount>0</textLineCount>
						<textInputFormat>Text</textInputFormat>
						<properties>
							<borderColor>#d3c9b6</borderColor>
							<image>#eeeeee</image>
							<flagItems>Add update to parent^1|</flagItems>
							<disabledBackgroundColor>#eeeeee</disabledBackgroundColor>
							<defaultValue>1</defaultValue>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_update1</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>23</index>
						<caption>Update</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>0</top>
							<left>0</left>
							<right>70</right>
							<bottom>23</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>-1</commands>
							<eventButtonIcon>ImageList=Hold Call;IconIndex=4</eventButtonIcon>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
				<control>
					<general>
						<name>btn_updateassign1</name>
						<type>EventButton</type>
						<flags>
							<transparent>false</transparent>
							<xpStyle>true</xpStyle>
							<hasShadow>false</hasShadow>
							<toolbarButtonStyle>true</toolbarButtonStyle>
							<cache>true</cache>
							<hasBorder>false</hasBorder>
							<hasCheckbox>false</hasCheckbox>
						</flags>
					</general>
					<appearance>
						<index>24</index>
						<caption>Update and Assign</caption>
						<backgroundColor>#ffffff</backgroundColor>
						<foregroundColor>#000000</foregroundColor>
						<font  size="8">Trebuchet MS</font>
					</appearance>
					<objectPlacement>
						<position>
							<top>0</top>
							<left>76</left>
							<right>200</right>
							<bottom>23</bottom>
						</position>
						<scaling>
							<top>0</top>
							<left>0</left>
							<right>0</right>
							<bottom>0</bottom>
						</scaling>
					</objectPlacement>
					<data>
					</data>
					<controlInfo>
						<mouseOverCursor>Window Default</mouseOverCursor>
						<flags>
							<invisible>false</invisible>
							<skipTabStop>false</skipTabStop>
							<disabled>false</disabled>
							<protected>true</protected>
							<noMacroExpand>false</noMacroExpand>
							<multiLine>false</multiLine>
						</flags>
						<properties>
							<commands>-1</commands>
							<eventButtonIcon>ImageList=Hold Call;IconIndex=3</eventButtonIcon>
							<eventButtonIconAlign>0</eventButtonIconAlign>
							<backgroundColor>#ff9900</backgroundColor>
						</properties>
					</controlInfo>
				</control>
			</controls>
			<formActions>
			</formActions>
			<javascript>
				<methods>
					<method>
						<name>OnFormLoaded</name>
						<code>
							<![CDATA[OnFormLoaded()
{
	/*
		Created by Hornbill Systems
		
		Updates
		-------
		
		Code	Bug		Date		Author					Description
		-----------------------------------------------------------------------------------------
		ind01	57303	11/05/07	Ivan Nicholas Dorosh	Problem with multiple calls, this is due to the state of 
															the objects when they are saved.  The form was expecting 
				these to be in a visible, state.  This would be fixed by resetting the form values to visible, however
				if the state of the fields were invisible and the form saved, the issue would re-occur. Therefore my 
				solution is to force them to be visible on initial load.													
	*/
	
	//ind01
	//mainform.tb_target.visible = true;
	_evi(mainform.flg_slaresponse, true);
	_evi(mainform.flg_updatepublic, true);
	//ind01 end
	
	// Set form with defaults set:

	// if analyst does not have permission to assign calls, then make the Update and Assign button invisible.
	if(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANASSIGNCALLS) || _swdoc.bOnHold)
	{
		_evi(btn_updateassign, false);
	}
	
	// if the analyst does not have permission to change call statuses, and there is more than one call passed, and these
	// do not have the same call status *or* any of the calls are of ineligible status, disable the "assign" button
	// ineligible status is anything but unassigned or unaccepted
	if(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))
	{
		if((_swdoc.nUnaccepted > 0 && _swdoc.nUnassigned > 0) || (_swdoc.nUnaccepted + _swdoc.nUnassigned !== _swdoc.arrCallRefs.length))
		{
			_evi(btn_updateassign, false);
		}
	}
	
	// set update date to current time
	_eva(dt_updatedate, (_swdoc.dtCurrentTime.getTime()/1000));
	
	// if analyst has permission to backdate calls, make update time editable
	
	if(app.session.CanBackdateCallActions())
	{
		_ero(dt_updatedate, false);
		_een(lbl_datetime, true);
	}
	
	
	// if the analyst's default is to make the update private, then check the Make Private box.
	_eva(flg_updatepublic, app.session.IsDefaultOption(ANALYST_DEFAULT_UPDATEPRIVATE));


	_swdoc.check_sla_response_flag();
		
	var db = new SqlQuery;
	

	//if this form has been called with attachments, add them to the attachments list
	var index = 0;
	var bAreAttachments = false;
	
 	while(_swdoc._form["attach"+index]) 
 	{
 		bAreAttachments = true;
    	fl_attachslist.AddAttachment(_swdoc._form["attach" + index]);
		index++;
 	} 
 	
 	//if the analyst does not have permissions to add files to calls, make the file attachments box invisible
 	//UNLESS there are file attachments being included from the email which called this form, in which case
 	//show the file attachments, but make the Add and Remove buttons invisible
 	
 	if(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANATTACHFILESTOCALLS, false))
 	{
 		if(!bAreAttachments)
 		{
 			Tab1.ShowTabItem(1,false);
 		}
 		else
 		{
 			_evi(btn_addfile, false);
 			_evi(btn_removefile, false);
 		}
 	}
 	
	
	/////////////////////////////////  SLAs ////////////////////////////////////////////
	// 
	// if multiple calls, disable and write "multiple calls"  
	if (_swdoc.arrCallRefs.length > 1)
	{
	
	}
	else
	{
		var strParams = "crf="+pfu(_swdoc.arrCallRefs[0]);
		db.InvokeStoredQuery("form/updatecall/get_ola_sla_details", strParams);
		
		if(db.Fetch())
		{
			if(db.GetValueAsString(0))
			{
				_swdoc.strOrigOwner =db.GetValueAsString(3);
				_swdoc.strSupportGroup =db.GetValueAsString(2);
			}
	
			if(db.GetValueAsString(1) == "_THIRDPARTY")
			{
				_ete(flg_slaresponse, "Mark as Third Party SLA Response");
			}
		}
	}
	
	db.Reset();

}]]>
						</code>
					</method>
					<method>
						<name>dt_updatedate_OnValueChanged</name>
						<code>
							<![CDATA[dt_updatedate_OnValueChanged(strValue)
{
	// TODO: Add your event handler code here

	// Find out what time the date/time is being changed.  This number will be used to make sure that the analyst is
	// not trying to change the update to a time in the future.
	// The time the form was opened will be checked against the user's maximum backdate period
	// to make sure that they are not trying to backdate this update too far.  The reason for this is that the analyst
	// may ostensibly backdate from the max period before the form was opened, but for checking times in the future,
	// this would error if they spend any time editing the form.  
	
	// Get the backdate period that the analyst is trying to backdate to
	var dtBackdatePeriod = _swdoc.dtCurrentTime.getTime() - (dt_updatedate.value * 1000);
	// calculate the actual time the analyst can backdate to, based on current time - maximum backdate period
	
	var dtMaxBDTime = new Date();
		
	// GetMaxiumumBackdatePeriodAllowed is stored in seconds.  Convert to milliseconds to obtain actual
	// maximum backdate time.
	dtMaxBDTime.setTime(_swdoc.dtCurrentTime.getTime() - (app.session.GetMaxBackdatePeriodAllowed() * 1000));
	

	// ensure that the backdate time entered is not in the future
	if(dt_updatedate.value > app.global.GetCurrentEpocTime())
	{
		var message = "Forwarding call updates is not permitted.";
		MessageBox(message, MB_ICONEXCLAMATION | MB_OK);
		_eva(dt_updatedate, app.global.GetCurrentEpocTime());
		return;
	}

	//-- required for modeless message box
	var funcCheckBackDateTime = function()
	{
		// make sure that the backdate time is not prior to the last previous update time for any of the calls being updated
		SqlRecordSetObj = new SqlQuery;
		
		var strParams = "crfs="+pfu(_swdoc._form["callrefs"]);
		SqlRecordSetObj.InvokeStoredQuery("form/updatecall/get_time_of_last_update", strParams);
		if(SqlRecordSetObj.Fetch())
		{
			var dtLastUpdate = new Date();
			dtLastUpdate.setTime(SqlRecordSetObj.GetValueAsNumber(0));
			
			if(dtLastUpdate > (dt_updatedate.value * 1000))
			{
				var message = "You have chosen to backdate this action \nto a time before than the last action was carried out against one of the selected calls. This is not allowed!\n\n\nThe last action was carried out on ";
				MessageBox(message + dtLastUpdate.toLocaleString(), MB_ICONQUESTION | MB_OK);
							
				return;
			}
		}
	}

	// ensure that the backdate period does not exceed the analyst's rights
	if((dtBackdatePeriod/1000) > app.session.GetMaxBackdatePeriodAllowed())
	{
		var message = "The earliest time to which you can backdate calls is "+dtMaxBDTime.toLocaleString()+".\n\nDo you want to use this time and date?";
		
		MessageBox(message, MB_ICONQUESTION | MB_YESNO, function(intDecision)
		{
			if (intDecision === 6)
			{
				_eva(dt_updatedate, dtMaxBDTime.getTime()/1000);
				return;
			}
			else
			{
				_eva(dt_updatedate, app.global.GetCurrentEpocTime());
				funcCheckBackDateTime();
			}
		});
	}
	else
	{
		funcCheckBackDateTime();
	}
}]]>
						</code>
					</method>
					<method>
						<name>btn_addfile_OnPressed</name>
						<code>
							<![CDATA[btn_addfile_OnPressed()
{
	fl_attachslist.AddFiles();
}]]>
						</code>
					</method>
					<method>
						<name>btn_removefile_OnPressed</name>
						<code>
							<![CDATA[btn_removefile_OnPressed()
{
	// remove the highlighted attachment from the list
	fl_attachslist.RemoveSelectedFiles();
}]]>
						</code>
					</method>
					<method>
						<name>tm_timespent_OnValueChanged</name>
						<code>
							<![CDATA[tm_timespent_OnValueChanged(strValue)
{
	if (tm_timespent.value < 1 || tm_timespent.value > 60000)
	{
		MessageBox("I am sorry, you can only enter values between 1 minute and 1000 hours.");
		_eva(tm_timespent, 5);
	}
}]]>
						</code>
					</method>
					<method>
						<name>OnFieldValueChanged</name>
						<code>
							<![CDATA[OnFieldValueChanged(strName, strValue)
{
	//-- When a Field value changes we set this variable to true.  
	//-- We will then check this when closing our form to see if there have been any changes that we need to save
	_swdoc.bFormFieldChanged = true;

	
}]]>
						</code>
					</method>
					<method>
						<name>btn_update1_OnPressed</name>
						<code>
							<![CDATA[btn_update1_OnPressed()
{
	// Validate Form
	if(!_swdoc.ValidateForm())
	{
		return;
	}

	var funcUnlockReset = function()
	{
		// Unlock our call(s)
		app.global.UnlockCalls(_swdoc.strIncomingCallrefs);
	
		_swdoc.ResetData();
		_swdoc.CloseForm();
	}
	
	// Update Calls Fun -- this will be defined globally, so that we can reuse the code
	// for the Update and Assign option	
	var x = _swdoc.UpdateCalls();
	if(x)
	{
		if(_swdoc.bFormFieldChanged)
		{
			MessageBox("You have unsaved data on this form. Do you still want to close this form?", MB_ICONQUESTION | MB_YESNO, function(intDecision)
			{
				if (intDecision === IDNO)
				{
					return false;
				}
				else
				{
					funcUnlockReset();	
				}
			});		
		}
		else
		{
			funcUnlockReset();
		}
	}	
}]]>
						</code>
					</method>
					<method>
						<name>btn_updateassign1_OnPressed</name>
						<code>
							<![CDATA[btn_updateassign1_OnPressed()
{
	// Validate Form
	if(!_swdoc.ValidateForm())
	{
		return;
	}
	var analChosenAnalyst = new PickAnalystDialog;
	analChosenAnalyst.Open("Group/Analyst Picker",function(analChosenAnalyst)
	{
		if(!analChosenAnalyst)
		{
			 return;
		}	
			
		// Get an Analyst to assign call to		
		var bAssignedToThirdParty = false;
		var strAnalyst = "";
		var strSupportGroup = "";
	
		// check if a group id and analyst id have been chosen, and if the group is Third Party.
		if(analChosenAnalyst.groupid.length)
		{
			strSupportGroup = analChosenAnalyst.groupid;
			if(analChosenAnalyst.analystid.length)
			{
				strAnalyst = analChosenAnalyst.analystid;
			}
	
			//-- F0098059
			if(analChosenAnalyst.groupid == "_THIRDPARTY")
			{
				bAssignedToThirdParty = true;
				//-- nwj 12.05.2009 - applied cbs fix from default to here
				//-- F0070476 - CB - we add the 3rd party contract if any
				if(analChosenAnalyst.tpcontract.length)
				{
					strAnalyst = analChosenAnalyst.tpcontract;
					strSupportGroup = analChosenAnalyst.analystid;
				}
			}
		}
			
		// ensure that there is no reason not to assign this call to this analyst
		if(analChosenAnalyst.analystid.length)	// Only check if we have chosen an analyst
		{
			if(!bAssignedToThirdParty)
			{
				analystObj = app.session.GetAnalystStatus(analChosenAnalyst.analystid);
				if(!analystObj)
				{
					MessageBox("Unable to determine analyst status");
					return;
				}
			}
			// if the logged-in analyst does not have "Can Change Call Status" permissions, then
			// he/she can only assign unaccepted calls to an analyst, or unassigned calls to a group.
			// nothing else is permitted.
			
			if (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))
			{
	
    			if (_swdoc.nUnassigned == _swdoc.arrCallRefs.length)
    			{
        			//can assign to a group  only 
        			MessageBox("I am sorry, this call can only be assigned to a group, not an analyst.");
        			return;
   				} 
			}
			
			
			// if the analyst is blocked from call assignment, do not allow assignment
			
			if((!bAssignedToThirdParty)&&(analystObj.bAssignBlocked))
			{
				MessageBox("Assigning calls to this analyst has been disallowed by the system administrator.", MB_ICONSTOP);
				return;
			}
			
			//-- required for modeless message box
			var funcUpdateCalls = function()
			{
				// Update Calls Function -- this is being defined globally so that we can reuse it for the Update Call form
				if (_swdoc.UpdateCalls(strSupportGroup,strAnalyst,bAssignedToThirdParty))
				{
					_swdoc.CloseForm();
				}
			}
			
			//-- required for modeless message box
			var funcCheckMaxCalls = function()
			{
				// If this analyst has a maximum number of calls set, make sure that this number has not been exceeded
				if((!bAssignedToThirdParty)&&(analystObj.nMaxAssignedCalls > 0) )
				{	
					var nCount = app.g.sqs_rowcount("count/assigned_calls", "aid="+app.pfu(analChosenAnalyst.analystid), true);
					if(nCount >= analystObj.nMaxAssignedCalls)
					{
						MessageBox("The Maximum Call Assignment count has been reached for this analyst. No call assignment possible.", MB_ICONSTOP);
						return;
					}
				}
			}
			
	
			// if analyst has an unavailable status, display away message and confirm assignment
			if(!bAssignedToThirdParty)
			{
				var strAnalystMessage = "";
				switch(analystObj.nStatus)
                {
                    case ANALYST_STATUS_ATLUNCH:
                        strAnalystMessage = "is at lunch";
                        break;
                    case ANALYST_STATUS_ONTRAINING:
                        strAnalystMessage = "is on training";
                        break;
                    case ANALYST_STATUS_ONHOLIDAY:
                        strAnalystMessage = "is on holiday";
                        break;
                    case ANALYST_STATUS_INAMEETING:
                        strAnalystMessage = "is in a meeting";
                        break;
                    case ANALYST_STATUS_OUTOFOFFICE:
                        strAnalystMessage = "is currently out of the office";
                        break;
                    case ANALYST_STATUS_DONOTDISTURB:
                        strAnalystMessage = "has requested not to be disturbed";
                        break;
                    default:
                        break;
                }
                if (strAnalystMessage !== "")
                {
                    MessageBox(analChosenAnalyst.analystid + " " + strAnalystMessage + ".\n\n" + analystObj.strMessage + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO,function(intDecision)
                    {
                        if (intDecision !== IDYES)
                        {
                        	return;
                        }
                        else
                        {
                        	funcCheckMaxCalls();
                        	funcUpdateCalls();          
                        }
                    });           
                }
                else
                {
                	funcCheckMaxCalls();
                	funcUpdateCalls();
                }
			}
			else
			{
				funcCheckMaxCalls();
                funcUpdateCalls();
			}
		}
		else
		{
			//being assigned to group
			if (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))
			{
				if (_swdoc.nUnaccepted == _swdoc.arrCallRefs.length)
				{
        			//can assign to an analyst  only 
        			MessageBox("I am sorry, this call can only be assigned to an analyst, not a group.");
        			return;
    			}
    			else
    			{
    				funcUpdateCalls();
    			}
    		}
    		else
    		{
    			funcUpdateCalls();
    		}
		}
	});
}]]>
						</code>
					</method>
				</methods>
			</javascript>
		</layout>
		<layout>
			<appearance>
				<width>360</width>
				<height>220</height>
				<backgroundColor>#ffffff</backgroundColor>
				<fillColour>#ffffff</fillColour>
				<textColour >#000000</textColour >
				<font  size="8">Arial</font>
			</appearance>
			<controls>
			</controls>
			<formActions>
			</formActions>
			<javascript>
				<methods>
					<method>
						<name>OnFormLoaded</name>
						<code>
							<![CDATA[OnFormLoaded()
{
	// Set form with defaults set:
		
	// if analyst has permissions to assign calls, then make the Update and Assign button visible.
	if (HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANASSIGNCALLS)){
		_evi(btnUpdateAssig, true);
	}
	
	// set update date to current time
	_eva(dt_updatedate, (_swdoc.dtCurrentTime.getTime()/1000));
	
	// if analyst does not have permission to backdate calls, make update time read-only
	if (!IsAllowedToBackDateCallUpdate()){
		_ero(dt_updatedate, true);
	}
	
	// if the analyst's default is to send an email on update, check the email box
	_ete(checkEmailCustomer, (IsDefaultOption(ANALYST_DEFAULT_UPDATESENDEMAIL) ? "1":"0"));
	
	// if the analyst's default is to make the update private, then check the Make Private box.
	_ete(checkUpdatePublic, (IsDefaultOption(ANALYST_DEFAULT_UPDATEPRIVATE) ? "1":"0"));
	
	// if the form has been passed update text, set the text on this form to the passed text
	if(_swdoc.strUpdateText){
		_ete(txtDescription, _swdoc.strUpdateText); //strUpdateText is set in the _swdoc.OnFormLoading in the Configuration
		_eva(txtDescription, strUpdatetext); 
	}

	// if the calls have not been responded to previously, then give the analyst the option of marking this as the SLA response
		
	SqlRecordSetObj = new SqlQuery;
		
	var strParams = "crfs="+pfu(_swdoc._form["callrefs"]);
	SqlRecordSetObj.InvokeStoredQuery("form/updatecall/get_resp_details", strParams);
	
	if(SqlRecordSetObj.Fetch())
	{
		var nCount = SqlRecordSetObj.GetValueAsNumber(0);
			
		if(nCount > 0)
		{
			_evi(flg_checkMarkSLAResponse, true);
		}
	}	

	//if this form has been called with attachments, add them to the attachments list
	var index = 1;
 	while(_swdoc._form["Attach"+index]) {
      AttachsList.newFile = _swdoc._form["Attach" + index];
      index++;
 	}
	
	/////////////////////////////////  SLAs ////////////////////////////////////////////
	// display the SLA and fix time for the first call ref.  

	var strParams = "crf="+pfu(_swdoc.arrCallRefs[0]);
	SqlRecordSetObj.InvokeStoredQuery("form/updatecall/get_ola_sla_details", strParams);
		
	if(SqlRecordSetObj.Fetch())
	{
		_ete(txt_sla , SqlRecordSetObj.GetValueAsString(0));
		if (SqlRecordSetObj.GetValueAsString(1) == "_THIRDPARTY")
		{
			_ete(flg_checkMarkSLAResponse, "Mark as Third Party SLA Response");
		}
	}
	
	// if the analyst does not have permissions to change SLAs, or if there is more than one call passed, disable the SLA box & text.
	if (!HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCHANGEPRIORITY) || _swdoc.arrCallRefs.length > 1 || _swdoc.Status == CS_ONHOLD)
	{
		_een(txt_SLAStaticText, false);
		_een(txt_sla, false);
	}

	SqlRecordSetObj.Reset();
   	
   	// if the data dictionary calls the priority something other than "SLA", change the label
   	if(dd.tables["updatedb"].IsColumnDefined("priority"))
   	{
			_ete(txt_SLAStaticText, dd.tables["updatedb"].columns["priority"].DisplayName);
	}
	
	//////////////////////// FIX BY /////////////////////
	// set the Fix By time to the first 
   	
     	/*
     	SqlRecordSetObj.Query("SELECT fixby FROM opencall_sla WHERE callref = " + _swdoc.arrCallRefs[0] + " AND fix_ctr > 0", "sw_systemdb");
     	
     	if(SqlRecordSetObj.Fetch())
		{
			Target.readOnly = false;
			Target.text = SqlRecordSetObj.GetValueAsString(0);  
			_swdoc.bTargetFixtimeChanged = false;
		}
		else
		{
			Target.text = app.global.GetCurrentEpocTime();
		}
	
     	SqlRecordSetObj.Reset();

		*/
}]]>
						</code>
					</method>
					<method>
						<name>btnUpdate_OnPressed</name>
						<code>
							<![CDATA[btnUpdate_OnPressed()
{
	// Validate Form
	if(!_swdoc.ValidateForm()){
		return;
	}
	
	EncodeUpdateMail(_swdoc.MessageSource);
	
	// Update Calls Fun -- this will be defined globally, so that we can reuse the code
	// for the Update and Assign option	
	
	UpdateCallsFun("");

	_swdoc.CloseForm();

}]]>
						</code>
					</method>
					<method>
						<name>btnUpdateAssig_OnPressed</name>
						<code>
							<![CDATA[btnUpdateAssig_OnPressed()
{
	// Validate Form
	if(!_swdoc.ValidateForm())
	{
		return;
	}
	
	
	// Update Calls Function -- this is being defined globally so that we can reuse it for the Update Call form
	UpdateCallsFun();
	// Validate the form

	/*


	_swdoc.UpdateText = Description.text;
	
	var bAssignedToThirdParty = false;
	var AssignToAnalyst = "";
	var AssignTo = "";
	
	var dlg = new AssignCallPropertySheet;
    if(dlg.Open() != IDOK)
    	return;
    	
	if(dlg.groupid.length)
	{
		AssignTo = "#";
		AssignTo += dlg.groupid;
		if(dlg.repid.length)
		{
			AssignToAnalyst = dlg.repid;
			AssignTo += ":";
			AssignTo += dlg.repid;
		}

		if(dlg.groupid == "_THIRDPARTY")
			bAssignedToThirdParty = true;
	}
	
	
	
	EncodeUpdateMail(_swdoc.MessageSource);
		
	if(!HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANASSIGNCALLS, TRUE))
		return;
		
	if(AssignToAnalyst.length)	// Only check if we are an analyst
	{
		var nStatus;
		var Message;
		var bBassignBlocked = FALSE;
		var nMaxAssignedCalls = 0;

		if(!bAssignedToThirdParty)
		{
			AanalystStat = new AnalystSatusHolder(AssignToAnalyst);
			if(!AanalystStat)
			{
				MessageBox("Unable to determine analyst status");
				return;
			}
			
			nStatus = AanalystStat.status;
			Message = AanalystStat.message;
			bBassignBlocked = AanalystStat.assignblocked;
			nMaxAssignedCalls = AanalystStat.maxassigncall;
		}
		
		if(bBassignBlocked)
		{
			MessageBox("Assigning calls to this analysts has been disallowed by the system administrator.", MB_ICONSTOP);
			return;
		}

		
		switch(nStatus)
		{
		case ANALYST_STATUS_ATLUNCH:
			if(MessageBox(AssignToAnalyst + " is at lunch.\n\n" + Message + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO) != IDYES)
				return;
			break;
		case ANALYST_STATUS_ONTRAINING:
			if(MessageBox(AssignToAnalyst + " is on training.\n\n" + Message + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO) != IDYES)
				return;
			break;
		case ANALYST_STATUS_ONHOLIDAY:
			if(MessageBox(AssignToAnalyst + " is on holiday.\n\n" + Message + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO) != IDYES)
				return;
			break;
		case ANALYST_STATUS_INAMEETING:
			if(MessageBox(AssignToAnalyst + " is in a meeting.\n\n" + Message + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO) != IDYES)
				return;
			break;
		case ANALYST_STATUS_OUTOFOFFICE:
			if(MessageBox(AssignToAnalyst + " is currently out of the office.\n\n" + Message + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO) != IDYES)
				return;
			break;
		case ANALYST_STATUS_DONOTDISTURB:
				if(MessageBox(AssignToAnalyst + " has requested not to be disturbed.\n\n" + Message + "\n\n" + "Do you still want to assign the call?", MB_ICONQUESTION | MB_YESNO) != IDYES)
				return;
			break;

		case ANALYST_STATUS_AVAILABLE:
		default:
			break;
		}

		if(nMaxAssignedCalls > 0) // Only 
		{
			SqlRecordSetObj = new SqlQuery;
			SqlRecordSetObj.Query("select count(*) as ct from opencall where status < 16 AND status != " + CS_RESOLVED + " and owner = '" + AssignToAnalyst + "'", "sw_systemdb");
			
			if(SqlRecordSetObj.Fetch())
			{
				var nCount = SqlRecordSetObj.GetValueAsNumber(0);
				if(nCount >= nMaxAssignedCalls)
				{
					MessageBox("The Maximum Call Assignment count has been reached for this analyst. No call assignment possible.", MB_ICONSTOP);
					SqlRecordSetObj.Reset();
					return;
				}
			}
			
			SqlRecordSetObj.Reset();
		}
	}
	
	var hdcon = new HelpdeskSession;
	
	if(hdcon.Connect())
	{
		var nCallRef = _swdoc.Callrefs[0]; 
		var SLAtext = (_swdoc.Callrefs.length > 1) ? "" : SLA.text;
	
		if(!_swdoc.bAllowResponse)
			checkMarkSLAResponse.text = "0";
			
		// We start a new transaction to update the specified call (complex req)
		if(hdcon.BeginUpdateCall(_swdoc.CallrefsCommaString))
		{   
			var bSendSuccess = hdcon.SendTableValues(_swdoc.GetDataPtr(), "updatedb");
  			
    		if(bSendSuccess && hdcon.SendNumber("backdateperiod", nBackdatePeriod) &&
		    	hdcon.SendBoolean("_acceptmode", _swdoc.bAcceptMode) &&
		    	hdcon.SendNumber("_targetfixtime", Target.text) &&
		    	hdcon.SendBoolean("markslaresponse", checkMarkSLAResponse.text) &&
		    	hdcon.SendBoolean("publicupdate", checkUpdatePublic.text) &&
		    	hdcon.SendString("priority", SLAtext) &&
		    	hdcon.SendString("assignto", AssignTo))
		    {
		    	for(i=0; i<AttachsList.rowCount();i++)
		    	{
    				if(!hdcon.SendFile("attach", AttachsList.GetItemText(i,0), AttachsList.GetItemText(i,3)))
    					return;
    			}
       			
    			if(hdcon.Commit())
    			{
    				if(!hdcon.GetResult())
    					return;
    					
    				
    				
    				var SessionFilesInfo = "";
    				if(checkEmailCustomer.text && app.global.IsConnectedToMailServer() && AttachsList.rowCount())
    					SessionFilesInfo = hdcon.GetSessionFileInfo();
    					
    				//app.global.Sleep(500);
    					
    				if(_swdoc.taskid)
    				{
    					var ReturnData = hdcon.GetReturnDataStr();
    					a = ReturnData.split(".");
    					
    					TempCallRef 		= a[0];
    					CallUpdateIndex 	= a[1];
    					
    					if(hdcon.BeginCompleteTask())
						{
							if(!hdcon.SendNumber("callref", _swdoc.Callrefs[0]) ||
						   	!hdcon.SendNumber("taskid", _swdoc.taskid) ||
						   	!hdcon.SendNumber("callupdateindex", CallUpdateIndex))
							{
								MessageBox("Error writing data during work item completion", MB_ICONSTOP);
								return;
							}
	
							if(!hdcon.Commit())
							{
								MessageBox("Error completing work item", MB_ICONSTOP);
								return;
							}
						}
    				}
    				
    				hdcon.StoreEmailAuditTrailJs(_swdoc.Callrefs[0], _swdoc.MessageSource);
    				
    				if(checkEmailCustomer.text == "1")
					{
						// OK, we are going to send the customer(s) an e-mail message to confirm the 
						// call closure. If we have uploaded file attachments, we can ask the session
						// for a list of the files. If available, the session variables will include
						// a _serverpath variable for each file. The returned list, is a list of 
						// strings that is suitable for passing to the compose message function
						
						EmailUpdate(_swdoc.CallrefsCommaString,
									Description.text, 
									SessionFilesInfo, TimeSpent.text,
									"UpdateCallMailTemplate", 
									TEMPLATE_UPDATECALL );
						
						
					
					}
					
					_swdoc.CloseForm();
    			}	
		    }
		}
		// We have finished with the connection, close it.    
		hdcon.Close();
	}*/
	
}]]>
						</code>
					</method>
					<method>
						<name>btnAdd_OnPressed</name>
						<code>
							<![CDATA[btnAdd_OnPressed()
{
	// TODO: Add your event handler code here
	AttachsList.newFile = InvokeCallAttachmentFileDialog();
}]]>
						</code>
					</method>
					<method>
						<name>btnRemove_OnPressed</name>
						<code>
							<![CDATA[btnRemove_OnPressed()
{
	// remove the highlighted attachment from the list
    for(var i=0; i<AttachsList.rowCount();i++)
    {
    	if(AttachsList.IsRowSelected(i))
    		AttachsList.RemoveRow(i);
    }
}]]>
						</code>
					</method>
					<method>
						<name>(User Defined Functions)</name>
						<code>
							<![CDATA[
]]>
						</code>
					</method>
					<method>
						<name>MenuButton1_OnPressed</name>
						<code>
							<![CDATA[MenuButton1_OnPressed()
{
	// TODO: Add your event handler code here
	MessageBox("Hello");

}]]>
						</code>
					</method>
					<method>
						<name>SLA_OnValueChanged</name>
						<code>
							<![CDATA[SLA_OnValueChanged(strValue)
{
	var str = new String (SLA.pickList);
	var strNew = new String (strValue + "|");
	
	if(str.toLowerCase().indexOf( strNew.toLowerCase() ) == -1)
	{
		if(IsAdministrator())
		{
			if( MessageBox("The SLA name you have selected is not valid. Do you want to add a new SLA with that name?", 
			MB_ICONQUESTION | MB_YESNO) == IDYES)
			{
				if(Sys_AddNewSLA(strValue))
					SLA.pickList = str + strNew;
				else
				{
					_ete(SLA , "");
				}
			}
		}
		else
		{
			MessageBox("The SLA name you have selected is not valid.");
			_ete(SLA , "");
		}	
	}
}]]>
						</code>
					</method>
					<method>
						<name>dtDateOfUpdate_OnValueChanged</name>
						<code>
							<![CDATA[dtDateOfUpdate_OnValueChanged(strValue)
{

	/*
	var dIn	= new Date();
    var currentTime	= Math.round(dIn.getTime()/1000);
	var updateDateTime = DateOfUpdate.text;
	nBackdatePeriod = currentTime - updateDateTime;
		
	if(nBackdatePeriod < 0)
	{
		var message = "You have attempted to forward date this call update which is not allowed.\n\nDo you want to use the current date and time to update this call.";
		if(MessageBox(message, MB_ICONQUESTION | MB_YESNO) != IDYES)
			return;
		
		nBackdatePeriod = 0;
	}
		
	if(!IsAllowedToBackDateCallUpdate() && nBackdatePeriod > 0)
	{
		var message = "You have attempted to backdate this call update but you do not have sufficient privileges to do so\n\nDo you want to use the current date and time to update this call?"
		if(MessageBox(message, MB_ICONQUESTION | MB_YESNO) != IDYES)
			return;
		nBackdatePeriod = 0;
	}
	else
	if(nBackdatePeriod > GetMaximumBackdatePeriodAllowed())
	{
		var dTime	= new Date();
		dTime = (currentTime - GetMaximumBackdatePeriodAllowed()) * 1000;
		var message = "You have attempted to backdate this call update further than you have sufficient privileges to do so.\n\nDo you want to use the oldest date/time that you are allowed: ";
		if(MessageBox(message + dTime.toLocalString(), MB_ICONQUESTION | MB_YESNO) != IDYES)			//SwGetInternalDateTimeFormat
			return;
			
		nBackdatePeriod = GetMaximumBackdatePeriodAllowed();
	}
		var CommaSeperatedCallrefs = _swdoc.Callrefs;
	SqlRecordSetObj = new SqlQuery;
	
	SqlRecordSetObj.Query("SELECT max(updatetimex) AS udtime FROM updatedb WHERE callref IN (" + CommaSeperatedCallrefs + ")", "sw_systemdb");
	if(SqlRecordSetObj.Fetch())
	{
		var tLastUpdate = SqlRecordSetObj.GetValueAsNumber(0);
		
		if(tLastUpdate > updateDateTime)
		{
			var dTime	= new Date();
			dTime = tLastUpdate;
			var message = "You have chosen to backdate this action \nto a time before than the last action was carried out against one of the selected calls. This is not allowed!\n\n\nThe last action was carried out on ";
			MessageBox(message + dTime.toLocalString(), MB_ICONQUESTION | MB_OK);
						
			return;
		}
	}
*/
}]]>
						</code>
					</method>
					<method>
						<name>dt_updatedate_OnValueChanged</name>
						<code>
							<![CDATA[dt_updatedate_OnValueChanged(strValue)
{
	// TODO: Add your event handler code here

	// Find out what time the date/time is being changed.  This number will be used to make sure that the analyst is
	// not trying to change the update to a time in the future.
	// The time the form was opened will be checked against the user's maximum backdate period
	// to make sure that they are not trying to backdate this update too far.  The reason for this is that the analyst
	// may ostensibly backdate from the max period before the form was opened, but for checking times in the future,
	// this would error if they spend any time editing the form.  
	
	// Get the backdate period that the analyst is trying to backdate to
	var dtBackdatePeriod = _swdoc.dtCurrentTime.getTime() - (dt_updatedate.value * 1000);
	// calculate the actual time the analyst can backdate to, based on current time - maximum backdate period
	
	var dtMaxBDTime = new Date();
		
	// GetMaxiumumBackdatePeriodAllowed is stored in seconds.  Convert to milliseconds to obtain actual
	// maximum backdate time.
	dtMaxBDTime.setTime(_swdoc.dtCurrentTime.getTime() - (GetMaximumBackdatePeriodAllowed() * 1000));
	

	// ensure that the backdate time entered is not in the future
	if(dt_updatedate.value > app.global.GetCurrentEpocTime())
	{
		var message = "Forwarding call updates is not permitted.";
		MessageBox(message, MB_ICONEXCLAMATION | MB_OK);
		_eva(dt_updatedate , app.global.GetCurrentEpocTime());
		return;
	}

	// ensure that the backdate period does not exceed the analyst's rights

	if((dtBackdatePeriod/1000) > GetMaximumBackdatePeriodAllowed())
	{
		
		var message = "The earliest time to which you can backdate calls is "+dtMaxBDTime.toLocaleString()+".\n\nDo you want to use this time and date?";
		if(MessageBox(message, MB_ICONQUESTION | MB_YESNO) == 6){ // 6 = YES
			_eva(dt_updatedate , dtMaxBDTime.getTime()/1000);
			return;
		}
		else{	
			_eva(dt_updatedate , app.global.GetCurrentEpocTime());
		}
	}
	// make sure that the backdate time is not prior to the last previous update time for any of the calls being updated
	SqlRecordSetObj = new SqlQuery;
	
	SqlRecordSetObj.Query("SELECT max(updatetimex) AS dtthemaxtime FROM updatedb WHERE callref IN (" + _swdoc._form["callrefs"] + ")", "sw_systemdb");
	if(SqlRecordSetObj.Fetch())
	{
		var dtLastUpdate = new Date();
		dtLastUpdate.setTime(SqlRecordSetObj.GetValueAsNumber(0));
		
		if(dtLastUpdate > (dt_updatedate.value * 1000))
		{
			var message = "You have chosen to backdate this action \nto a time before than the last action was carried out against one of the selected calls. This is not allowed!\n\n\nThe last action was carried out on ";
			MessageBox(message + dtLastUpdate.toLocaleString(), MB_ICONQUESTION | MB_OK);
						
			return;
		}
	}


}]]>
						</code>
					</method>
				</methods>
			</javascript>
		</layout>
	</layouts>
</espForm>
