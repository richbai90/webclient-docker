{"espForm":{"configuration":{"settings":{"name":"EfHoldCallForm_OLT","title":"Hold Call Form","options":{"allowResize":"true","showMenubar":"true","showToolbar":"false","showStatusBar":"false"}},"tables":{"table":[{"name":"updatedb","type":"Main Details Table","flags":"5"},{"name":"opencall","type":"Extended Details Table","mainDetailsColumn":"callref","flags":"0"}]},"javascript":{"methods":{"method":[{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t\/\/-- If the analyst does not have permissions to modify the status of call\n\t\/\/--  then they should not be able to place a call on hold\/take off hold\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t{\n    MessageBox(\"I am sorry, you do not have sufficient privileges to perform that action.  Please contact your system administrator\");\n    return false;\n\t}\n\t\n\t\/\/-- Initialise variables\n\t_swdoc.MessageSource = \"\";\n\t_swdoc.bSourceEmail = false;\n\t_swdoc.UpdateText\t= \"\";\n\t_swdoc.strActionSource = \"\";\n\t\/\/--\n\t\/\/-- get the form callrefs (those calls refs we are putting on hold)\n\t\/\/-- store the callrefs \"1,2,3\" \n\tvar Callrefs = _swdoc._form[\"callrefs\"];\n\t\n\tif(Callrefs==\"\")\n\t{\n\t\t\/\/-- see if we have passed any in\n\t\tCallrefs = _swdoc.GetArg(\"in_callrefs\");\n\t}\n\t\/\/-- re-assign callrefs string and also create an array\n\t_swdoc.CallrefsCommaString = Callrefs;\n\t_swdoc.Callrefs = Callrefs.split(\",\");\n\t\n\t\n\t\/\/-- Go lock these calls while we want to put them on hold\n\tif(!app.global.LockCalls(_swdoc.CallrefsCommaString, \"HOLD\", true))  \/\/_swdoc.updatedb.callref\n\t{\n\t\t\/\/-- one of the calls may already be locked\n\t\t\/\/MessageBox(\"Call '\" + _swdoc.CallrefsCommaString + \"' already locked\");\n\t\treturn false;\n\t}\n\t\n\t\/\/-- init form title based on number of calls we are working with\n\tvar strFormTitle = (_swdoc.Callrefs.length > 1) ? \"Place Calls On Hold \" : \"Place Call On Hold \";\n\t\n\t\/\/-- now format each of the callrefs to F#### and add to title\n\tfor(var i=0;i<_swdoc.Callrefs.length; i++)\n\t{\n\t\tif( i > 0)strFormTitle += \", \";\n\t\tstrFormTitle += dd.tables.opencall.columns.callref.FormatValue(_swdoc.Callrefs[i]);\n\t}\n\t\n\t\/\/-- set the title\n\t_swdoc.SetTitle(strFormTitle);\n\n\t\/\/-- check if putting on hold from an email\n\tif(_swdoc._form[\"_source_email\"])\n\t{\n\t\t_swdoc.bSourceEmail = (_swdoc._form[\"_source_email\"] == \"true\");\n\t\t\/\/MessageBox(\"_source_email = \" + _swdoc.bSourceEmail);\n\t}\n\t\n\t\/\/-- store action source\n\t_swdoc.strActionSource = (_swdoc.bSourceEmail) ? \"E-mail\": \"Telephone\";\n\t\n\n\t\/\/-- if we have passed in update text store it\t\t\n\tif(_swdoc._form[\"updatetext\"])\n\t{\n\t\t_swdoc.UpdateText = _swdoc._form[\"updatetext\"];\n\t\t_swdoc.updatedb.updatetxt = _swdoc._form[\"updatetext\"];\n\t}\n\t\n\t\/\/-- Q? : What is ResetModiedFlag\n\t_swdoc.ResetModiedFlag(\"updatedb\");\n\n\treturn true;\n}"},{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\tif (_swdoc.boolForceClose)\n\t{\n\t\treturn true;\n\t}\n\t\n\tvar funcUnclockReset = function()\n\t{\n\t\t\/\/-- unlock the calls\n\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\n\t\t\/\/-- clear down data\n\t\t_swdoc.ResetData();\n\t\n\t\treturn true;\n\t}\n\t\n\t\/\/Check for Changes to any of the data fields\n\tif(_swdoc.bFormFieldChanged)\n\t{\n\t\tMessageBox(\"You have unsaved data on this form. Do you still want to close this form?\", MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t{\n\t\t\tif(intDecision == IDNO)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncUnclockReset();\n\t\t\t\t_swdoc.boolForceClose = true;\n\t\t\t\t_swdoc.CloseForm();\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\tfuncUnclockReset();\n\t}\n}"},{"name":"(Globals)","code":"\nvar _swdoc = (IsObjectDefined(\"_bHtmlWebClient\"))?top:_swdoc;\n\nvar bFormFieldChanged = false;\t\/\/This var is used to check for changes to data fields and is set to true when any \n\t\t\t\t\t\t\t\t\/\/field data is changed\t\t\nvar boolForceClose = false;\n\t\t\t\t\t\t\nfunction MF(){\n\treturn mainform;\n}"},{"name":"(User Defined Functions)","code":"function replaceIllegalFileCharacters(strText)\n{\n\t\/\/-- This function is used to replace characters in the passed in string that \n\t\/\/-- are not suitable for use in filenames and return the modified string \n\t\n\tstrOutput = strText;\n\tstrReplacement = \"-\";\n\tvar i = 0;\n\t\n\twhile(i < strOutput.length)\n\t{\n\t\tstrOutput = strOutput.replace('\/', strReplacement);\n\t\tstrOutput = strOutput.replace(':', strReplacement);\n\t\tstrOutput = strOutput.replace('*', strReplacement);\n\t\tstrOutput = strOutput.replace('?', strReplacement);\n\t\tstrOutput = strOutput.replace('\"', strReplacement);\n\t\tstrOutput = strOutput.replace('\\'', strReplacement);\n\t\tstrOutput = strOutput.replace('<', strReplacement);\n\t\tstrOutput = strOutput.replace('>', strReplacement);\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn strOutput;\n}"},{"name":"OnSaveData","code":"OnSaveData()\n{\n\t\/\/ This should never get called, but if for some reason it does, we only want this form\n\t\/\/ to close if it is cancelled or if the analyst clicks one of the update buttons.\n\tMessageBox(\"Please use the [Place Call On Hold] button to process this on hold action.\");\n\treturn false;\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"555","height":"391","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"CaptionPanel2","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"0","caption":"Details","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"28","left":"3","right":"394","bottom":"165"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"CaptionPanel3","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"1","caption":"Options","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"28","left":"402","right":"551","bottom":"165"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"CaptionPanel1","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"2","caption":"Other Information","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"172","left":"3","right":"551","bottom":"388"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"tb_UpdateText","type":"Field","group":"Tab1:0"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"232","left":"20","right":"533","bottom":"372"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"data":{"binding":"updatedb.updatetxt"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"true","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"dt_HoldUntil","type":"Field"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"78","left":"11","right":"218","bottom":"96"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_TimeSpent","type":"Field"},"appearance":{"index":"5","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"78","left":"227","right":"286","bottom":"96"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Minute Time Period","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"5","borderColor":"#c0c0c0"}}},{"general":{"name":"cb_ActionSource","type":"Field"},"appearance":{"index":"6","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"123","left":"11","right":"218","bottom":"141"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"Telephone","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"Telephone","listItems":"Telephone|E-mail|","borderColor":"#c0c0c0","sqlSource":"swdata","distinctTable":"swlists","distinctColumn":"value","displayColumn":"display_name","listFilter":"lid=CALL-ACTION-SOURCE,CALL-ACTION-SOURCE-ON-HOLD","storedQuery":"common.getSwLists"}}},{"general":{"name":"cb_ActionType","type":"Field"},"appearance":{"index":"7","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"123","left":"227","right":"388","bottom":"141"},"scaling":{"top":"0","left":"25","right":"50","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"General Update","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"General Update","listItems":"General Update|Called Customer|E-mailed Customer|","borderColor":"#c0c0c0","sqlSource":"swdata","distinctTable":"swlists","distinctColumn":"value","displayColumn":"display_name","listFilter":"lid=CALL-ACTION-TYPE,CALL-ACTION-TYPE-ON-HOLD","storedQuery":"common.getSwLists"}}},{"general":{"name":"flg_emailcustomer","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"8","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"76","left":"406","right":"522","bottom":"95"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"E-mail customer^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_updatepublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"9","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"56","left":"406","right":"535","bottom":"74"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Update to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"Tab1","type":"TabControl","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","caption":"Tab1","backgroundColor":"#ded7ce","foregroundColor":"#ffffff","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"201","left":"10","right":"545","bottom":"382"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"tabStyle":"Top","tabSize":"19","items":{"item":[{"name":"Description","properties":"56=#d1e0ee|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#d1e0ee"}}},{"name":"File Attachments","properties":"56=#ffcc66|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#ffcc66"}}}]},"selectedTextFont":{"@size":"8","#text":"Arial"},"selectedTextColor":"#000000","deselectedTextColor":"#000000","tabSlopeLeft":"2","tabSlopeRight":"2","deselectedTabHeightOffset":"1","tabSpacing":"0","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"tabStyle":"0"}}},{"general":{"name":"fl_attachments","type":"FileListTable","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"true","horizontalGridLines":"true","autoLoad":"true","allowMultiSelect":"true"},"group":"Tab1:1"},"appearance":{"index":"11","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"230","left":"19","right":"458","bottom":"373"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"File Name","width":"160","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Size","width":"80","image":"-1","dataColumn":"1"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Last Modified","width":"120","image":"-1","dataColumn":"2"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Full Local Path","width":"100","image":"-1","dataColumn":"3"}]},"sortColumn":"-1","sortDescending":"false","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"content":"NAME=DeerSir1.doc;PATH=C:\\Documents and Settings\\NeilWJ\\My Documents\\DeerSir1.doc;SIZE=58880;LASTMODIFIED=1114767614","borderColor":"#c0c0c0"}}},{"general":{"name":"btnAdd","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"12","caption":"Add","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"230","left":"466","right":"530","bottom":"254"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74"}}},{"general":{"name":"btnRemove","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"13","caption":"Remove","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"260","left":"466","right":"530","bottom":"284"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"ActionTypeLabel","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"14","caption":"Action Type","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"101","left":"225","right":"287","bottom":"119"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"ActionSourceLabel","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"15","caption":"Action Source","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"101","left":"9","right":"82","bottom":"119"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"16","caption":"Time Spent","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"56","left":"225","right":"282","bottom":"74"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Text1","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"17","caption":"Place on hold until","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"56","left":"8","right":"120","bottom":"74"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"btnHoldCall","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"18","caption":"Place Call On Hold","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"-1","left":"8","right":"127","bottom":"22"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Hold Call;IconIndex=5","backgroundColor":"#ff9900"}}},{"general":{"name":"btnAdd","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"19","caption":"Attach File","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"-1","left":"460","right":"551","bottom":"22"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74","backgroundColor":"#ff9900"}}},{"general":{"name":"Rect1","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"20","backgroundColor":"#d4d0c8","foregroundColor":"#dddddd","font":{"@size":"0"},"borderStyle":"Rectangle","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"-1","left":"0","right":"560","bottom":"24"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"fld_on_hold_period","type":"Field"},"appearance":{"index":"21","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"144","left":"227","right":"388","bottom":"162"},"scaling":{"top":"0","left":"25","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"true","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"borderColor":"#c0c0c0","image":"#eeeeee","sqlSource":"swdata","distinctTable":"onhold_periods","distinctColumn":"period_name","disabledBackgroundColor":"#eeeeee","storedQuery":"common.filterByTableValues"}}},{"general":{"name":"lbl_on_hold_period","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"22","caption":"On Hold Period","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"145","left":"134","right":"222","bottom":"159"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"flg_addtoparentdiary","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"23","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"95","left":"406","right":"542","bottom":"114"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Add to parent diary^1|","disabledBackgroundColor":"#eeeeee"}}}]},"javascript":{"methods":{"method":[{"name":"btnHoldCall_OnPressed","code":"btnHoldCall_OnPressed()\n{\n\t\/\/-- required for modeless email template dialog\n\tvar funcCloseForm = function()\n\t{\n\t\t\/\/ -- Close Form\n\t\t_swdoc.bFormFieldChanged = false;\t\t\t\n\t\t_swdoc.CloseForm();\n\t}\n\t\n\tif(!ValidateForm())\n\t{\n\t\treturn false;\n\t}\n\t\n\t\/\/ -- Check that analyst has sufficient rights to place a call on hold\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANPLACECALLONHOL, TRUE))\n\t{\n\t\tMessageBox(\"You don't have sufficient rights to place a call on hold.\");\n\t\treturn false;\n\t}\n\t\n\t\/\/ -- Place the call on hold using XMLMC API(s)\n\tvar xmlmc = new XmlMethodCall;\n\t\/\/ -- API method\n\tvar strMethod = \"holdCalls\";\n\t\/\/ -- Find modified values in UPDATEDB table\n\tvar arrExtraUpdateDbValues = new Array();\n\tvar strUpdateDbValues = \"\";\n\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t{\n\t\tvar nColCount = rec.GetCount();\n\t\tfor(x = 0; x < nColCount; x++)\n\t\t{\n\t\t\tif(!rec.IsModified(x))\n\t\t\t\tcontinue;\n\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t}\n\t}\n\tfor (fieldName in arrExtraUpdateDbValues)\n\t{\n\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t}\n\t\n\t\/\/ -- Workout \"holdUntil\" value\n\tvar strHoldUntilDate = new Date(mainform.dt_HoldUntil.text);\n\t\n\t\/\/ ** API params ** \/\/\n\tvar arrCallrefs = _swdoc._form[\"callrefs\"].split(\",\");\n \tfor(x in arrCallrefs)\n\t\txmlmc.SetValue(\"callref\", arrCallrefs[x]);\n\txmlmc.SetValue(\"timeSpent\", mainform.tb_TimeSpent.value);\n\txmlmc.SetValue(\"description\", rec.updatetxt);\n\txmlmc.SetValue(\"holdUntil\", strHoldUntilDate);\n\tvar boolPublicUpdate = (flg_updatepublic.text == \"1\" )? true : false;\n\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\tif(rec.udsource!=\"\")\n\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\tif(rec.udcode!=\"\")\n\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\n\t\/\/ -- fileAttachment param\n\tfor(i=0; i<mainform.fl_attachments.rowCount();i++)\n\t{\n \t\t\/\/ -- Check for Server file (These need to use serverFileAttachment)\n\t\tvar fileName = fl_attachments.GetItemText(i,3);\n\t\tvar serverFile = fileName.indexOf(\"MFA:\");\n\t\tif(serverFile >= 0)\n\t\t{\n\t\t\t\/\/-- File was attached to email use serverFileAttachment param\n\t\t\tvar strFileName = fl_attachments.GetItemText(i,0);\n\t\t\tvar strData = fl_attachments.GetItemText(i,3);\n\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\tif(!app.bWebClient)\n\t\t\t\tstrXML += \"<fileSource>\"+strData+\"<\/fileSource>\";\n\t\t\txmlmc.SetParamAsComplexType(\"serverFileAttachment\",strXML);\n\t\t}else\n\t\t{\n\t\t\t\/\/-- File was uploaded to email use fileAttachement param\n\t\t\tvar strFileName = fl_attachments.GetItemText(i,0);\n\t\t\tvar strData = app.global.LoadFileInBase64(fl_attachments.GetItemText(i,3));\n\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\tif(!app.bWebClient)\n\t\t\t\tstrXML += \"<fileData>\"+strData+\"<\/fileData>\";\n\t\t\txmlmc.SetParamAsComplexType(\"fileAttachment\",strXML);\n\t\t}\n    }\n\tif(strUpdateDbValues!=\"\")\n\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\t\n\t\/\/ ** EO API params ** \/\/\n\t\n\t\/\/ -- Invoke XMLMC API\n\tif(xmlmc.Invoke(\"helpdesk\",strMethod))\n\t{\n\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\tvar objRes = XMCResult(strXML);\n\t\tif(!objRes.success)\n\t\t{\n\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\treturn false;\n\t    }\n\t\telse\n\t\t{\n\t\t\t\/\/ -- Handle XMLMC response\n\t\t\t\/\/ -- Call Attachments, Compose Email and \"On Hold Notifiers\" feature\n\t\t\t\n\t\t\t\/\/###20120704 - set up On Hold Notifiers\t\t\t\n\t\t\tif(boolOnHoldNotification && \"\" != _swdoc.MF().fld_on_hold_period.value){\n\t\t\t\tvar oh_period_name = _swdoc.MF().fld_on_hold_period.value;\n\t\t\t\tvar onhold_period = app.g.get_record(\"onhold_periods\",oh_period_name);\n\t\t\t\tvar intNow = new Date();\n\t\t\t\tintNow = Math.round(intNow.getTime() \/ 1000);\n\t\t\t\tvar intEndTime = _swdoc.MF().dt_HoldUntil.value;\n\t\t\t\t\/\/### as working days depend on the priority, we grab all the calls' priorities here\n\t\t\t\tvar strParams = \"crfs=\"+ pfu(_swdoc.CallrefsCommaString);\n\t\t\t\tvar callrefs_to_notify = app.g.get_sqrecordset(\"form\/EfHoldCallForm\/get_priorities_for_calls\", strParams);\n\t\t\t\twhile(callrefs_to_notify.Fetch()){\n\t\t\t\n\t\t\t\t\tvar priority_against = app.g.get_field(callrefs_to_notify, \"priority\");\n\t\t\t\t\tif (\"\"==priority_against){\n\t\t\t\t\t\tMessageBox(\"No priority was found, periodical on hold notifications will not be sent.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (1 == onhold_period.flg_work_week){\n\t\t\t\t\t\t\/\/### build array of \"calendar\" days\n\t\t\t\t\t\tvar arrLeadTimeExpiry = new Array();\n\t\t\t\t\t\tvar intArrayBuildInfo = intNow;\n\t\t\t\t\t\twhile (intArrayBuildInfo < intEndTime){\n\t\t\t\t\t\t\tarrLeadTimeExpiry[arrLeadTimeExpiry.length] = intArrayBuildInfo;\n\t\t\t\t\t\t\tintArrayBuildInfo += 86400;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tarrLeadTimeExpiry[arrLeadTimeExpiry.length] = intEndTime;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/### get array of \"working\" days\n\t\t\t\t\t\tvar arrLeadTimeExpiry = app.g.get_sla_end_date(intNow, priority_against, onhold_period.period_days + 1, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar strParams = \"name=\"+pfu(oh_period_name);\n\t\t\t\t\tvar onhold_settings = app.g.get_sqrecordset(\"form\/EfHoldCallForm\/get_notifiers_for_period\", strParams);\n\n\t\t\t\t\t\/\/### setting of Off Hold data\n\t\t\t\t\tvar oh_end_alert_time = arrLeadTimeExpiry[arrLeadTimeExpiry.length-1] + 14400; \/\/### ensuring this has not been sent at time of Off Hold.\n\t\t\t\t\tvar oh_end_popup_subject = \"\";\n\t\t\t\t\tvar oh_end_popup_message = \"\";\n\t\t\t\t\tvar oh_end_mailbox = \"\";\n\t\t\t\t\tvar oh_end_template = \"\";\n\t\t\t\t\tvar oh_end_diary_entry = \"\";\n\t\t\t\t\tvar oh_end_recipient = \"\";\n\t\t\t\t\t\n\t\t\t\t\twhile(onhold_settings.Fetch()){\n\t\t\t\t\t\tvar oh_days_into = app.g.get_field(onhold_settings,\"days_from\");\n\t\t\t\t\t\tvar from_start_or_end = app.g.get_field(onhold_settings,\"rem_strike\");\n\t\t\t\t\t\tvar blnSkip = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (onhold_period.period_days > oh_days_into){\n\t\t\t\t\t\t\tvar oh_alert_time = 0;\n\n\t\t\t\t\t\t\tif (1==from_start_or_end){\n\t\t\t\t\t\t\t\t\/\/### from end\n\t\t\t\t\t\t\t\tif (1 == onhold_period.flg_work_week){\n\t\t\t\t\t\t\t\t\tif(arrLeadTimeExpiry.length - (oh_days_into + 1)>=0)\n\t\t\t\t\t\t\t\t\t\toh_alert_time = arrLeadTimeExpiry[arrLeadTimeExpiry.length - (oh_days_into + 1)];\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tblnSkip = true; \/\/### in case the amount of days calculated falls out of scope THEN drop this reminder.\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar work_days = app.g.get_workdays_till_date(intNow, priority_against, intEndTime,true);\n\t\t\t\t\t\t\t\t\tif(work_days.length - (oh_days_into + 1)>=0)\n\t\t\t\t\t\t\t\t\t\toh_alert_time = work_days[work_days.length - (oh_days_into + 1)];\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tblnSkip = true; \/\/### in case the amount of days calculated falls out of scope THEN drop this reminder.\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\/\/### from start\n\t\t\t\t\t\t\t\toh_alert_time = arrLeadTimeExpiry[oh_days_into];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\/\/### setting of data for this particular reminder\n\t\t\t\t\t\t\tvar oh_popup_subject = (app.g.get_field(onhold_settings, \"popup_subject\"));\n\t\t\t\t\t\t\tvar oh_popup_message = (app.g.get_field(onhold_settings, \"popup_message\"));\n\t\t\t\t\t\t\tvar oh_mailbox = app.g.get_field(onhold_settings, \"mailbox\");\n\t\t\t\t\t\t\tvar oh_template = (app.g.get_field(onhold_settings, \"template\"));\n\t\t\t\t\t\t\tvar oh_diary_entry = (app.g.get_field(onhold_settings, \"diary_entry\"));\n\t\t\t\t\t\t\tvar oh_recipient = (app.g.get_field(onhold_settings, \"recipient\"));\n\t\t\t\t\t\t\tif (!blnSkip)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar ap = {}\n\t\t\t\t\t\t\t\tap.oh_mailbox=oh_mailbox;\n\t\t\t\t\t\t\t\tap.oh_template = oh_template;\n\t\t\t\t\t\t\t\tap.oh_diary_entry = oh_diary_entry;\n\t\t\t\t\t\t\t\tap.oh_period_name = oh_period_name;\n\t\t\t\t\t\t\t\tap.oh_recipient = oh_recipient;\n\t\t\t\t\t\t\t\tap.callref =  app.g.get_field(callrefs_to_notify, \"callref\");\n\t\t\t\t\t\t\t\tap.oh_alert_time = oh_alert_time;\n\t\t\t\t\t\t\t\tap.oh_popup_subject = oh_popup_subject;\n\t\t\t\t\t\t\t\tap.oh_popup_message = oh_popup_message;\n\t\t\t\t\t\t\t\tapp.g.submitsqs(\"form\/EfHoldCallForm\/add_notifier_for_call\", ap);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/### IF it reaches here (for some reason there is a days_from which is larger than the amount defined for the period) then capture this info for Off Hold\n\t\t\t\t\t\t\toh_end_popup_subject = (app.g.get_field(onhold_settings, \"popup_subject\"));\n\t\t\t\t\t\t\toh_end_popup_message = (app.g.get_field(onhold_settings, \"popup_message\"));\n\t\t\t\t\t\t\toh_end_mailbox = app.g.get_field(onhold_settings, \"mailbox\");\n\t\t\t\t\t\t\toh_end_template = (app.g.get_field(onhold_settings, \"template\"));\n\t\t\t\t\t\t\toh_end_diary_entry = (app.g.get_field(onhold_settings, \"diary_entry\"));\n\t\t\t\t\t\t\toh_end_recipient = (app.g.get_field(onhold_settings, \"recipient\"));\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tvar ap = {}\n\t\t\t\t\tap.oh_mailbox=oh_end_mailbox;\n\t\t\t\t\tap.oh_template = oh_end_template;\n\t\t\t\t\tap.oh_diary_entry = oh_end_diary_entry;\n\t\t\t\t\tap.oh_period_name = oh_period_name;\n\t\t\t\t\tap.oh_recipient = oh_end_recipient;\n\t\t\t\t\tap.callref =  app.g.get_field(callrefs_to_notify, \"callref\");\n\t\t\t\t\tap.oh_alert_time = oh_end_alert_time;\n\t\t\t\t\tap.oh_popup_subject = oh_end_popup_subject;\n\t\t\t\t\tap.oh_popup_message = oh_end_popup_message;\n\t\t\t\t\tapp.g.submitsqs(\"form\/EfHoldCallForm\/add_notifier_for_call\", ap);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar myXmlFile = new XmlFile(); \n\t\t\tbRet = myXmlFile.loadFromString(strXML); \n\t\t\tvar arrChildCallInfo = null;\n\t\t\tvar arrCallInfo = new Array();\n\t\t\tvar strDocs = \"\";\n\t\t\tfor (count = 0; count < myXmlFile.methodCallResult.params.length; count ++) \n\t\t\t{\n\t\t\t\tif(myXmlFile.methodCallResult.params[count].nodeName==\"callActionStatus\")\n\t\t\t\t{  \n\t\t\t\t\tvar boolSuccess = myXmlFile.methodCallResult.params[count]['success'].nodeValue;\n\t\t\t\t\tif(boolSuccess==\"false\")\n\t\t\t\t\t{\n\t\t\t\t\t\tvar strMessage =  myXmlFile.methodCallResult.params[count]['message'].nodeValue;\n\t\t\t\t\t\tMessageBox(strMessage);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tvar strCallref = myXmlFile.methodCallResult.params[count]['callref'].nodeValue;\n\t\t\t\t\tvar strIndex = myXmlFile.methodCallResult.params[count]['udIndex'].nodeValue;\n\t\t\t\t\tarrCallInfo[strCallref] = strIndex;\n\t\t\t\t}\n\t\t\t\telse if(myXmlFile.methodCallResult.params[count].nodeName==\"callFileAttachment\")\n\t\t\t\t{\n\t\t\t\t\tvar intCount = arrCallInfo.length;\n\t\t\t\t\tif(intCount==1)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar updateId = myXmlFile.methodCallResult.params[count]['updateId'].nodeValue;\n\t\t\t\t\t\t\tif(updateId==arrCallInfo[strCallref])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pathName = myXmlFile.methodCallResult.params[count]['pathName'].nodeValue;\n\t\t\t\t\t\t\t\tvar fileName = myXmlFile.methodCallResult.params[count]['fileName'].nodeValue;\n\t\t\t\t\t\t\t\tvar fileSize = myXmlFile.methodCallResult.params[count]['fileSize'].nodeValue;\n\t\t\t\t\t\t\t\tif(strDocs!=\"\") strDocs +=\"\\r\\n\";\n\t\t\t\t\t\t\t\tstrDocs +='displayname=\"'+fileName+'\"; path=\"'+pathName+'\"; size=\"'+fileSize+'\";';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/ --\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ If we have been invoked to update a call from an e-mail message, this update will \n\t\t\t\/\/ only relate to a single call. We can only handle e-mail audit trail if we are working\n\t\t\t\/\/ on a single-call update. \n\t\t\tif(arrCallrefs.length == 1 && \t\t\t\/\/ Are we only dealing with a single call reference?\n\t\t\t\t_swdoc._form[\"messagesource\"] && \t\/\/ Are we working from an e-mail message?\n\t\t\t\tdd.GetGlobalParamAsNumber(\"Email Audit Trail\/StoreEmailAuditTrail\")) \/\/ Are we configured?\n\t\t\t{\n\t\t\t\tapp.g.attach_message_to_call(_swdoc._form,arrCallrefs[0],arrCallInfo[arrCallrefs[0]]);\n\t\t\t}\n\t\n    \t\t\/\/ if we want to send an email to the customer AND there are file attachments, obtain the \n    \t\t\/\/ attachments to attach to the email as well\n    \t\tvar flSessionFilesInfo = \"\";\n    \t\tif(mainform.flg_emailcustomer.value && app.global.IsConnectedToMailServer())\n    \t\t{\n\t\t\t\t\/\/ Now, compose an email to the customer\t\t\t\t\n\t\t\t\tapp.global.ComposeCallUpdateEmail(arrCallInfo, \t\t\t\t\t\/\/ Array: Call reference-UdIndex\n\t\t\t\t\t\t\t\t\t\t_swdoc.updatedb.updatetxt, \t\/\/ Message text\n\t\t\t\t\t\t\t\t\t\tstrDocs, \t\t\/\/ File attachments\n\t\t\t\t\t\t\t\t\t\t_swdoc.updatedb.timespent,\n\t\t\t\t\t\t\t\t\t\t\"HoldCallMailTemplate\", \t\t\/\/ Template name\n\t\t\t\t\t\t\t\t\t\tTEMPLATE_HOLDCALL,\t\t\t\t\/\/ Template type\n\t\t\t\t\t\t\t\t\t\tfunction()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tfuncCloseForm();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncCloseForm();\n\t\t\t}\n\t\t}\n\t}\t\n\telse\n\t{\n\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\tfuncCloseForm();\n\t}\t\t\n}"},{"name":"btnAdd_OnPressed","code":"btnAdd_OnPressed()\n{\n\t\/\/-- add a new file\n\t\/\/fl_attachments.newFile = PickAnalystDialog();\n\tfl_attachments.AddFiles();\n\n}"},{"name":"btnRemove_OnPressed","code":"btnRemove_OnPressed()\n{\n\t\/\/-- remove selected files\n\tfor(var i=fl_attachments.rowCount()-1; i>=0;i--)\n    {\n    \t\/\/-- if selected remove\n    \tif(fl_attachments.IsRowSelected(i))\tfl_attachments.RemoveRow(i);\n    }\n}"},{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\/\/-- clear update field\n\t\t_ete(tb_UpdateText,\"\");\n\t\n\t\/\/--\n\t\/\/-- set public flag depending on the rights of the analyst\n\t\t_ete(flg_updatepublic,(app.session.IsDefaultOption(ANALYST_DEFAULT_HOLDPRIVATE) ? \"1\":\"0\"));\n\t\t\t\t\t\t\n\t\/\/-- check if we have a mail connection and analyst can send mail\n\t\tif(app.global.IsConnectedToMailServer() && app.global.CanSendMail())\n\t\t{\n\t\t\t\/\/-- set flg to editable and set to defualt setting for this analyst\n\t\t\t_ero(flg_emailcustomer,false);\n\t\t\t_ete(flg_emailcustomer,(app.session.IsDefaultOption(ANALYST_DEFAULT_HOLDSENDEMAIL) ? \"1\":\"0\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/-- not allowed to send email disable and set to 0\n\t\t\t_ero(flg_emailcustomer,true);\n\t\t\t_ete(flg_emailcustomer,\"0\");\n\t\t}\n\t\t\n\t\/\/--\n\t\/\/-- set update text\n\t\tif(_swdoc.UpdateText.length)_ete(tb_UpdateText,_swdoc.UpdateText);\n\t\t\n\t\t\n\n\t\/\/if this form has been called with attachments, add them to the attachments list\n\t\tvar index = 0;\n\t\tvar bAreAttachments = false;\n\t\t\n \t\twhile(_swdoc._form[\"attach\"+index]) \n \t\t{\n \t\t\tbAreAttachments = true;\n    \t\tfl_attachments.AddAttachment(_swdoc._form[\"attach\" + index]);\n\t\t\tindex++;\n \t\t} \n \t\n \t\/\/if the analyst does not have permissions to add files to calls, make the file attachments box invisible\n \t\/\/UNLESS there are file attachments being included from the email which called this form, in which case\n \t\/\/show the file attachments, but make the Add and Remove buttons invisible\n \t\n \t\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANATTACHFILESTOCALLS, false))\n \t\t{\n \t\t\tif(!bAreAttachments)\n \t\t\t{\n \t\t\t\tTab1.ShowTabItem(1,false);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n \t\t\t\t_evi(btnAdd,false);\n \t\t\t\t_evi(btnRemove,false);\n \t\t\t}\n \t\t}\n\t\t\n\t\/\/-- set the hold until date to now\n\t\t_eva(dt_HoldUntil, app.global.GetCurrentEpocTime());\n\t\t\n\t\/\/-- set action source\n\t\t_ete(cb_ActionSource,_swdoc.strActionSource);\n\t\n\t\/\/###20120704 - display the onhold period (or not)\n\t_evi(_swdoc.MF().fld_on_hold_period , boolOnHoldNotification); \n\t_evi(_swdoc.MF().lbl_on_hold_period , boolOnHoldNotification); \n\t\t\n\t\/\/-- Set the Default Value for the Time Spent field\n\t\/\/SetDefaultTimeSpent();\n}"},{"name":"(User Defined Functions)","code":"\/\/-- Validate the form data to make sure it is ok\nfunction ValidateForm()\n{\n\n\tif((tb_TimeSpent.text < 1 || tb_TimeSpent.text > 60000) &&(tb_TimeSpent.mandatory))\n\t{\n\t\tMessageBox(\"You must enter the amount of time you spent on this action\", MB_OK);\n\t\treturn false;;\t\/\/ Make sure that the time spent is within range\n\t}\n\t\n\tif(tb_UpdateText.text == \"\")\n\t{\n\t\tMessageBox(\"You must enter an update description to place this call on hold\", MB_OK);\n\t\treturn false;\t\/\/ Make sure we have some update text\n\t}\n\n\tvar nowTime = new Number(app.global.GetCurrentEpocTime());\n\tif(app.global.EpocTimeFromString(dt_HoldUntil.text) <= nowTime)\n\t{\n\t\tMessageBox(\"You must set a time in the future.\", MB_OK | MB_ICONSTOP);\n\t\treturn false;\n\t}\n\n\tif(cb_ActionSource.mandatory == true && cb_ActionSource.text.length == 0)\n\t{\n\t\tvar Message = \"The field'\" + ActionSourceLabel.text + \"' must be completed before you can apply this action\"\n\t\tMessageBox(Message);\n\t\treturn false;\n\t}\n\n\tif(cb_ActionType.mandatory == true  && cb_ActionType.text.length == 0)\n\t{\n\t\tvar Message = \"The field '\" + ActionTypeLable.text + \"' must be completed before you can apply this action\";\n\t\tMessageBox(Message);\n\t\treturn false;\n\t}\n\t\n\tif(!check_mandatory_fields(\"opencall\",mainform)) return false;\n\tif(!check_mandatory_fields(\"updatedb\",mainform)) return false;\n\n\treturn true;\n}\n\n\/\/-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table\n\/\/--\t\t\t\t\talert user if need be and return false\t\t\t\t\t\t\nfunction check_mandatory_fields(strTable,oForm)\n{\n    for (var x = 0; x<oForm.elements.length;x++)\n    {\n        var element = oForm.elements[x];\n        if ((element.mandatory) && (element.text ==\"\"))\n        {\n            var colName = \"\";\n            var fieldName = \"(not specified)\";\n            if(element.dataRef!=\"\")\n            {\n            \tvar arrInfo = element.dataRef.split(\".\");\n            \tvar strTable = arrInfo[0];\n            \tvar colName = arrInfo[1];\n            \tvar fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;\n            }\n            MessageBox(\"The field '\" + fieldName + \"' is a mandatory field and must be completed.\");\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction SetDefaultTimeSpent()\n{\n\n\t\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- This value is set when a field value has been changed.\n\t\/\/-- We check this variable on from closing to see if there are any data changes that need to be saved.\n\t_swdoc.bFormFieldChanged = true;\n\n\n}"},{"name":"fld_on_hold_period_OnValueChanged","code":"fld_on_hold_period_OnValueChanged(strValue)\n{\n\n\tif (\"\"!=strValue){\n\t\tvar a = app.g.get_record(\"onhold_periods\", strValue);\n\t\t\/\/var intRequestedDate = app.g.fix_epoch(OC().requested_start_datex);\n\t\tvar intNow = new Date();\n\t\tintNow = Math.round(intNow.getTime() \/ 1000);\n\t\tvar calls = _swdoc.CallrefsCommaString.split(\",\");\n\t\tvar c = app.g.get_sys_record(\"opencall\", calls[0]);\n\t\tvar intLeadTimeExpiry = 0;\n\t\tif (1 == a.flg_work_week){\n\t\t\tintLeadTimeExpiry = intNow + (a.period_days*86400)\n\t\t} else {\n\t\t\tintLeadTimeExpiry = app.g.get_sla_end_date(intNow, c.priority, a.period_days + 1);\n\t\t}\n\t\t_eva(_swdoc.MF().dt_HoldUntil , Number(intLeadTimeExpiry));\n\t\t_een(_swdoc.MF().dt_HoldUntil, (1==a.flg_override) );\n\t} else \t_een(_swdoc.MF().dt_HoldUntil, true);\n\n}"},{"name":"cb_ActionType_OnValueChanged","code":"cb_ActionType_OnValueChanged(strValue)\n{\n\tif (boolOnHoldNotification && \"\"!=strValue)\n\t{\n\t\tvar strParams = \"atype=\"+pfu(strValue);\n\t\tvar oRS  = app.g.get_sqrecordset(\"form\/EfHoldCallForm\/get_notifier_periods_for_action\",strParams);\n\t\tif (oRS.Fetch())\n\t\t{\n\t\t\tvar strType = app.g.get_field(oRS, \"action_type\");\n\t\t\tif (\"\"!=strType)\n\t\t\t{\n\t\t\t\tvar strName = app.g.get_field(oRS, \"period_name\");\n\t\t\t\t_eva(_swdoc.MF().fld_on_hold_period ,strName);\n\t\t\t\t_swdoc.MF().fld_on_hold_period_OnValueChanged(strName);\n\t\t\t}\n\t\t}\n\t}\n\t\n\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{}}]}}}