{"espForm":{"configuration":{"settings":{"name":"newResolveClose","title":"Resolve Close Call Form","options":{"allowResize":"true","showMenubar":"true","showToolbar":"false","showStatusBar":"false"}},"tables":{"table":[{"name":"updatedb","type":"Main Details Table","flags":"5"},{"name":"opencall","type":"Extended Details Table","mainDetailsColumn":"callref","flags":"0"}]},"javascript":{"methods":{"method":[{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t\/\/-- If the analyst does not have permissions to modify the status of call\n\t\/\/--  then they should not be able to resolve\/close a call\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t{\n    \tMessageBox(\"You do not have sufficient privileges to modify calls.  Please contact your system administrator\");\n    \treturn false;\n\t}\n\n\t\/\/-- _swdoc.Init _swdoc runtime variables\n\t_swdoc.strUpdateText \t\t= \"\";\n\t_swdoc.bSourceEmail \t\t= false;\n\t_swdoc.bResolveOnly \t\t= false;\n\t_swdoc.bSourceEmail \t\t= false\n\t_swdoc.bDateTimeChanged \t= false;\n\t_swdoc.bLogMode \t\t\t= false;\n\t_swdoc.strSubject \t\t= \"\";\n\n\t_swdoc.nPendingStatus = 0;\n\t_swdoc.nResolvedStatus = 0;\n\t_swdoc.nBackdatePeriod = 0;\n\n\t_swdoc.CallrefsCommaString = \"\";\n\t\n\t_swdoc.strIssueref \t\t= \"\";\n\t_swdoc.strMessageSource \t= \"\";\n\t_swdoc.strFixCode \t\t= \"\";\n\t\t\n\t_swdoc.SurveyNameSurvIdMap \t= new Array();\n\t_swdoc.CallStatusMap \t\t\t= new Array();\n\t_swdoc.CallOpenTaskMap \t\t= new Array();\n\t\n\tif(_swdoc._form[\"logmode\"])_swdoc.bLogMode = true;\n\n\t\/\/-- if we are display the form in the log call form\n\tif(_swdoc.bLogMode)\n\t{\n\t\t\/\/-- set records values and return\n\t\t_swdoc.updatedb.timespent = \"5\";\n\t\t_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime();\n\t\t_swdoc.updatedb.udcode = \"General Update\";\n\t    _swdoc.updatedb.udsource = \"E-mail\";\n\t\t_swdoc.UpdateFormFromData();\n\n\t\treturn true;\n\t}\n\n\t\/\/-- call user defined function\t\t\n\tvar bRetVal = _swdoc.Init(_swdoc._form[\"callrefs\"]);\n\t\n\t\n\t_swdoc.ResetModiedFlag(\"updatedb\");\n\t_swdoc.ResetModiedFlag(\"opencall\");\n\treturn bRetVal;\n\t\n\t\n\n}"},{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\t\/\/Check for Changes to any of the data fields\n\tif(_swdoc.bFormFieldChanged)\n\t{\n\t\t\r\n\t\t\t\t\/\/-- are we running in webclient\r\n\t\t\t\tif(app && app._wc_version)\r\n\t\t\t\t{\r\n\t\t\t\t\t\/\/-- return object that contains save message and the code to execute if the user chooses to leave the page\r\n\t\t\t\t\tvar o = {};\r\n\t\t\t\t\to.message = \"You have unsaved data on this form.\";\r\n\t\t\t\t\to.onclosexecute = function()\r\n\t\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t\tapp.global.UnlockCalls(_swdoc._form[\"callrefs\"]);\r\n\t\t\t\t\t\t\t\t_swdoc.ResetData();\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\treturn o;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(MessageBox(\"You have unsaved data on this form. Do you still want to close this form?\", MB_ICONQUESTION | MB_YESNO) == IDNO)\r\n\t\t\t\t\r\n\t\t\t\n\t\t\treturn false;\n\t}\n\t\n\tif(!_swdoc.CallrefsCommaString.length)\n\t{\t\n\t\t_swdoc.ResetData();\n\t\treturn true;\n\t}\n\t\t\n\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\n\t_swdoc.ResetData();\n\treturn true;\n}"},{"name":"OnAdviseActionCompleted","code":"OnAdviseActionCompleted(nAction, stActionResultValues)\n{\n\tvar res = new String(stActionResultValues);\n\tvar ar = res.split(\"&\");\n\tif(nAction == LOG_CALL_ACTION)\n\t{\n\t\tvar i=0; \n\t\tfor( ; i< ar.length; i++)\n\t\t{\n\t\t\tvar pos = ar[i].indexOf(\"callref=\");\n\t\t\tif(pos != -1)\n\t\t\t{\n\t\t\t\tvar arCallref = ar[i].split(\"=\");\n\t\t\t\tif(_swdoc.Init(arCallref[1]))\n\t\t\t\t{\n\t\t\t\t\t_swdoc.LogMode = true;\n\t\t\t\t\t\/\/mainform.InitialiseForm();\n\t\t\t\t\treturn true;\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}"},{"name":"(User Defined Functions)","code":"\/\/-- 03.06.2005\n\/\/-- NWJ - commenting\n\/\/-- initialise the form\nfunction Init(strCallrefValue)\n{\n\n\t\t\/\/-- clear down Arrays\n\t\t_swdoc.SurveyNameSurvIdMap.length = 0;\n\t\t_swdoc.CallStatusMap.length = 0;\n\t\t_swdoc.CallOpenTaskMap.length = 0;\n\t\t\n\t\t\/\/-- get our comma list of callrefs\n\t\tvar strCallrefs = new String(strCallrefValue);   \n\t\t_swdoc.CallrefsCommaString = strCallrefs;  \n\t\t\n\t\t\/\/-- create array of callrefs\n\t\t_swdoc.arrCallrefs = strCallrefs.split(\",\");\n\t\t\n\t\t\/\/-- do we have an issue reference\n\t\tif(_swdoc._form[\"issueref\"])\n\t\t{\n\t\t\t_swdoc.strIssueref = _swdoc._form[\"issueref\"];\n\t\t}\n\t\t\n\t\tvar bCheckVal = true;\n\t\tif(_swdoc.strIssueref.length) bCheckVal = false;\n\n\t\t\/\/-- 19.01.2006 - DJH\n\t\t\/\/-- Change made to check if there are outstanding open work items and if so do \n\t\t\/\/-- not lock the call as we have a system message that will stop the user resolving the call\n\t\t\/\/-- Before this change if the call is locked it cannot be unlocked.\n\t\tvar strSqlRecordsetObj = new SqlQuery;\n\t\t\n\t\tstrSqlRecordsetObj.Query(\"select count(*) as recordcount from calltasks where callref IN (\" + _swdoc.CallrefsCommaString + \") and status < 16\",\"syscache\");\n\t\twhile(strSqlRecordsetObj.Fetch())\n\t\t{\n\t\t\tvar intrecordCount = strSqlRecordsetObj.GetValueAsNumber(\"recordcount\");\n\t\t}\n\t\tstrSqlRecordsetObj.Reset();\n\t\t\n\t\tif(intrecordCount == 0)\n\t\t{\n\t\t\t\/\/-- lock selected calls for close activity\t\n\t\t\tif(!app.global.LockCalls(strCallrefValue, \"CLOSE\"))\n\t\t\t{\n\t\t\t\t\/\/Close Form\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\/\/-- End 19.01.2006 - DJH\n\t\t\n\t\t\/\/-- start to contruct form title (call local function to format callrefs and finish title)\n\t\tvar strFormTitle = (_swdoc.arrCallrefs.length > 1) ? \"Resolve\/Close Calls \" : \"Resolve\/Close Call \";\n\t\tstrFormTitle = _swdoc.constructFormTitleCallrefs(strFormTitle,_swdoc.arrCallrefs);\n\t\t\n\t\t\/\/-- if we are closing an issue and to title\n\t\tif(_swdoc.strIssueref.length) strFormTitle += \" Closing issue \" + _swdoc.strIssueref\n\t\t\t\n\t\t\/\/-- set the title\n\t\t_swdoc.SetTitle(strFormTitle);\n\t\t\n\t\t\/\/-- are we resolving only\n\t\tif(_swdoc._form[\"resolve\"])_swdoc.bResolveOnly = (_swdoc._form[\"resolve\"] == \"1\");\n\t\t\n\t\t\/\/-- did we come from an email\n\t\tif(_swdoc._form[\"_source_email\"])\t_swdoc.bSourceEmail = (_swdoc._form[\"_source_email\"] == \"true\");\n\n\t\t\/\/-- do we have a subject\t\t\n\t\tif(_swdoc._form[\"subject\"])_swdoc.strSubject = (_swdoc._form[\"subject\"] == \"true\");\n\t\t\n\t\t\/\/--- set update text\n\t\tif(_swdoc._form[\"updatetext\"])_swdoc.strUpdateText = _swdoc._form[\"updatetext\"];\n\t\t\n\t\t\/\/-- get the status and class for our callref\/s\n     \tvar SqlRecordSetObj\t= new SqlQuery;\n     \tif(!SqlRecordSetObj.Query(\"SELECT callref, status, callclass, fixcode FROM opencall WHERE callref IN(\" + _swdoc.CallrefsCommaString + \")\", \"sw_systemdb\"))\n     \t{\n     \t\t\/\/-- failed - check if we have an issue\n     \t\tif(_swdoc.strIssueref.length == 0)\n     \t\t{\n     \t\t\tMessageBox(\"Unable to query call status values. Progress not possible.\", MB_ICONSTOP);\n     \t\t\treturn false;\n     \t\t}\n     \t}\n\t\t\n\t\t\n\t\tvar boolMixedCallClasses = false;\n\t\t_swdoc.strCallClass = \"\";\n\t\t\t\t\n\t\t\/\/--\n\t\t\/\/-- loop through our returned rows\n\t\t_swdoc.nPendingStatus = 0;\n\t\t_swdoc.nResolvedStatus = 0;\n\t\tvar nOtherStatus = 0;\n\t\t\n\t\tvar strLastCallClass = null;\n\t\twhile(SqlRecordSetObj.Fetch())\n\t\t{\n\t\t\t\n\t\t\t\/\/-- get status and callref\n\t\t\t\/\/-- and add info an array\n\t\t\tvar iStatus =  SqlRecordSetObj.GetValueAsNumber(\"status\");\n\t\t\tvar iCalref =  SqlRecordSetObj.GetValueAsNumber(\"callref\");\n\t\t\t_swdoc.CallStatusMap[iCalref] = iStatus;\n\t\t\t\t\t\t\n\t\t\t\/\/-- get call class and check if it same as others\n\t\t\t\/\/-- simply want to check if we have selected to resolve or close perate call classes\n\t\t\t_swdoc.strCallClass = SqlRecordSetObj.GetValueAsString(\"callclass\");\n\t\t\tif ((strLastCallClass != null) && (!boolMixedCallClasses))\n\t\t\t{\n\t\t\t\t\n\t\t\t\tboolMixedCallClasses = (strLastCallClass != _swdoc.strCallClass);\n\t\t\t}\n\t\t\tstrLastCallClass = _swdoc.strCallClass;\n\t\t\t\n\t\t\t\n\t\t\tswitch(iStatus)\n\t\t\t{\n\t\t\t\tcase CS_PENDING:\n\t\t\t\t\t_swdoc.nPendingStatus++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CS_RESOLVED:\n\t\t\t\t\t_swdoc.nResolvedStatus++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tnOtherStatus++;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\n\n\t\t\/\/-- we have different call classes and not working with an issue\n\t\tif((boolMixedCallClasses) && (_swdoc.strIssueref.length == 0))\n\t\t{\n\t\t\tvar Message = \"The calls you have selected to resolve or close have different call classes, so any resolution profile you may specify will not be applied if you continue. Do you want to continue?\\n\\n(If you want resolution profiles to apply, you should click No and resolve\/close each call separately)\";\n\t\t\tif(MessageBox(Message, MB_ICONSTOP | MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t{\n\t\t\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_swdoc.strCallClass = \"\";\n\t\t}\n\t\n\t\t\/\/--- if not pending or resolved && not dealing with issue\n\t\tif((nOtherStatus) &&(_swdoc.strIssueref.length == 0))\n\t\t{\t\t\t\n\t\t\tMessageBox(\"One or more selected calls can not be closed because they have a status other than Pending or Resolved.\", MB_ICONSTOP);\n\t\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\t\treturn false;\n\t\t}\n\n\t\t\/\/-- we have pending and resolved callss\t\n\t\tif(_swdoc.nPendingStatus && _swdoc.nResolvedStatus)\n\t\t{\n\t\t\tif(_swdoc.strIssueref.length == 0)\n\t\t\t{\n\t\t\t\tvar Message = \"The calls you have selected have a mixture of 'Pending' and 'Resolved' statuses. As resolved calls have already been attributed a resolution profile, the resolution profile selected for closing these calls will only be applied to the calls that currently have a status of 'Pending'. The 'Resolved' calls will be completed leaving the previously applied resolution profile. \\n\\nDo you want to continue?\";\n\t\t\t\tif(MessageBox(Message, MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\t{\n\t\t\t\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\/\/-- reset recordset object\n\t\tSqlRecordSetObj.Reset();\n\t\t\/\/--\t\t\n\t\t\/\/-- perform a sql check to see if we have any open calltasks\n\t\t\/\/-- this can be a standard api call\n\t\tvar SqlCommand  = \"SELECT callref, count(*) as ct FROM calltasks WHERE status <> \" + TASK_STATUS_COMPLETE + \" AND callref IN(\";\n\t\t\tSqlCommand += _swdoc.CallrefsCommaString + \") GROUP BY callref HAVING ct > 0\";;\n\n\t\tif(!SqlRecordSetObj.Query(SqlCommand, \"sw_systemdb\"))\n     \t{\n     \t\tif(_swdoc.strIssueref.length == 0)\n     \t\t{\n     \t\t\tMessageBox(\"Unable to query call status values. Progress not possible.\", MB_ICONSTOP);\n     \t\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n     \t\t\treturn false;\n     \t\t}\n     \t}\n\t\t\n\t\t_swdoc.CallOpenTaskMap.length = 0;\n\t\t\n\t\twhile(SqlRecordSetObj.Fetch())\n\t\t{\n\t\t\tvar nCount =  SqlRecordSetObj.GetValueAsString(\"ct\");\n\t\t\tvar calref =  SqlRecordSetObj.GetValueAsString(\"callref\");\n\t\t\t_swdoc.CallOpenTaskMap[calref] = nCount;\n\t\t}\n\t\n\t\tvar nLength = _swdoc.CallOpenTaskMap.length;\n\t\tif(nLength)\n\t\t{\n\t\t\tvar Ref = \"\";\n\t\t\tvar Message = \"\";\n\t\t\t\n\t\t\tif(nLength > 1)\n\t\t\t{\n\t\t\t\tfor(ID in _swdoc.CallOpenTaskMap)\n\t\t\t\t{\n\t\t\t\t\tvar Value = dd.tables[\"opencall\"].columns[\"callref\"].FormatValue(ID);\n\t\t\t\t\t\/\/-- 30.01.2006 - DJH code to add comma between call refs when dealing with multiple calls\n\t\t\t\t\tif(Ref != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tRef += \",\";\n\t\t\t\t\t}\n\t\t\t\t\tRef += Value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tMessage = \"The following calls still have outstanding work items assigned to them and can not be closed:-\\n\\n\" + Ref; \/\/Removed  + \"1\" from end\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(ID in _swdoc.CallOpenTaskMap)\n\t\t\t\t{\n\t\t\t\t\tMessage = \"The call \" + ID + \" still has \" + _swdoc.CallOpenTaskMap[ID] + \" outstanding work item(s) and can not be closed.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tMessageBox(Message, MB_ICONSTOP);\n\t\t\t\n     \t\treturn false;\n\t\t}\n\n\treturn TRUE;\n}\n\n\/\/-- NWJ\n\/\/-- 03.06.2005\n\/\/-- construct title string with callrefs formatted\nfunction constructFormTitleCallrefs(strFormTitle,_swdoc.arrCallrefs)\n{\n\n\t\/\/-- loop through array and format callrefs\t\n\tfor(var i=0;i<_swdoc.arrCallrefs.length; i++)\n\t{\n\t\tif( i > 0) strFormTitle += \", \";\n\t\tstrFormTitle += dd.tables[\"opencall\"].columns[\"callref\"].FormatValue(_swdoc.arrCallrefs[i]);\n\t}\n\t\n\treturn strFormTitle;\n\n}"},{"name":"OnExecuteAction","code":"OnExecuteAction(nAction)\n{\n\t\/\/-- trigger an action\n\t\n\t\/\/-- closing call\n\tif(nAction == CLOSE_CALL_ACTION) return mainform.ResolveClose();\n\t\t\n\t\/\/-- attaching a call to the action.\n\tif(nAction == ATTACHFILETOCALL_ACTION)\n\t{\n\t\tmainform.btnAddFile_OnPressed();\n\t\treturn true;\n\t}\n\n\treturn true;\n}"},{"name":"OnValidate","code":"OnValidate()\n{\n\n\t\/\/-- validate the form\n\tif(!mainform.ValidateForm())return VALIDATE_FAIL;\n\t\n\t\n\tif(mainform.cb_callaction.text == \"Resolve Call\")\t\t\n\t{\n\t\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS)) return VALIDATE_FAIL;\n\t}\n\telse\n\t{\n\t\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANCLOSECALLS)) return VALIDATE_FAIL;\n\t}\n\n\t\/\/-- get the number of profile levels the analyst HAS to choose\n\tvar nLevelNeeded = app.session.GetCloseProfileLevelRequired();\n\n\t\/\/-- determine the number of Profile levels the user has selected\n\t\/\/-- NWJ - can we turn this into a app.global.i.e. app.global.returnProfileLevelCount(strProfileCode);\n\tvar strTempProfileCodes = new String(_swdoc.strFixCode);\n\tvar nLevels = 0;\n\t\t\n\twhile(strTempProfileCodes.indexOf('-') != -1)\n\t{\n\t\tnLevels++;\n\t\tstrTempProfileCodes = strTempProfileCodes.substr((strTempProfileCodes.indexOf('-')+1),strTempProfileCodes.length);\n\t}\n\t\n\tif(strTempProfileCodes.length)nLevels++;\n\t\n\t\/\/-- If insufficient profile levels are specified then alert the user\n\tif(nLevels < nLevelNeeded)\n\t{\n\t\tMessageBox(\"You must profile this call resolution. Your access control rights require you to choose at least \" + nLevelNeeded + \" profile level(s)\", MB_ICONSTOP);\n\t\treturn VALIDATE_FAIL;\n\t}\n\t\n\treturn VALIDATE_DEFAULT;\n}"},{"name":"(Globals)","code":"var boolClosing = false;\nvar bFormFieldChanged = false;\t\/\/This var is used to check for changes to data fields and is set to true when any \n\t\t\t\t\t\t\t\t\/\/field data is changed\n\t\t\t\t\t\t\t\t\n\n\n\/\/-- validate form data that user has set\nfunction ValidateForm()\n{\n\tif((tb_timespent.text < 1 || tb_timespent.text > 60000) && (tb_timespent.mandatory))\n\t{\n\t\tMessageBox(\"You must enter the amount of time you spent on this action\", MB_OK);\n\t\treturn false;\t\/\/ Make sure that the time spent is within range\n\t}\n\n\tif(_swdoc.updatedb.updatetxt == \"\")\n\t{\n\t\tMessageBox(\"You must enter a description in the Action Description tab.\", MB_OK | MB_ICONINFORMATION );\n\t\treturn false;\t\/\/ Make sure we have some update text\n\t}\n\n\t\/\/-- check other required fields\n\tif (!_swdoc.check_mandatory_fields(\"updatedb\",mainform))return false;\t\t\n\tif (!_swdoc.check_mandatory_fields(\"opencall\",mainform))return false;\n\t\n\treturn TRUE;\n}\n\n\n\/\/-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table\n\/\/--\t\t\t\t\talert user if need be and return false\t\t\t\t\t\t\nfunction check_mandatory_fields(strTable,oForm)\n{\n    for (var x = 0; x<oForm.elements.length;x++)\n    {\n        var element = oForm.elements[x];\n        if ((element.mandatory) && (element.text ==\"\"))\n        {\n            var colName = \"\";\n            var fieldName = \"(not specified)\";\n            if(element.dataRef!=\"\")\n            {\n            \tvar arrInfo = element.dataRef.split(\".\");\n            \tvar strTable = arrInfo[0];\n            \tvar colName = arrInfo[1];\n            \tvar fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;\n            }\n            MessageBox(\"The field '\" + fieldName + \"' is a mandatory field and must be completed.\");\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction setup_form_mode()\n{\n\t\/\/-- _swdoc _swdoc.LogMode (if we are logging a call).\t\n\tif(_swdoc.bLogMode)\n\t{\n\t\t\/\/-- this form is being shown in the logcall form so hide buttons\n\t\tapp._evi(mainform.ToolbarRect , false);\n\t\tapp._evi(mainform.btnResolveClose , false);\t\t\n\t}\n\telse\n\t{\n\t\n\t\tapp._evi(mainform.ToolbarRect , true);\n\t\tapp._evi(mainform.btnResolveClose , true);\n\t}\n}\n\n\/\/-- 08.02.2007 - NWJ - One function to handle which standard check boxes should be enabled\/disabled\n\/\/--\t\t\t\t\tchecked or unchecked, as old code fglas were set all over the place\nfunction setup_checkbox_flags()\n{\n\tif (_swdoc.boolClosing)\n\t{\n\t\t\/\/-- closing\n\t}\n\telse\n\t{\n\t\t\/\/-- resolving\n\t}\n}\n\nfunction setup_email_flag()\n{\n\t\/\/--\n\t\/\/-- if we have a mailserver and can send mail set flg\n\tif(app.global.IsConnectedToMailServer() && app.global.CanSendMail())\n\t{\n\t\tapp._een(mainform.flg_emailcustomer , true);\n\t\tapp._ete(mainform.flg_emailcustomer , (app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSESENDEMAIL)) ? \"1\":\"0\");\n\t}\n\telse\n\t{\n\t\tapp._een(mainform.flg_emailcustomer , false);\n\t\tapp._ete(mainform.flg_emailcustomer , \"0\");\n\t}\n}\n\n\/\/--\n\/\/-- initialise the surveys list\nfunction setup_survey_options()\n{\n\t\/\/-- empty the picklist\n\tmainform.cb_surveys.pickList = \"\";\n\t\n\t\/\/-- select all of the system mailboxes and add all shared mailboxes to an array\n\tvar SqlRecordSetObj\t= new SqlQuery;\n\t\n\t\/\/-- select all of the surveys and the mailbox they are associated to\n\tSqlRecordSetObj.Reset();\n\tSqlRecordSetObj.Query(\"Select DISTINCT surveyname,surveyid,Mailbox from survey_config\", \"sw_systemdb\");\n\t\t\n\tvar str = \"\";\n\tvar selected = \"\";\n\tvar strTemps = new Array();\n\tbselecteddefaultsurvey = false;\n\t\n\t\/\/-- loop through the surveys and and match those associated to shared mailboxes\n\t\/\/-- for each survey add it into an array and to the pick list string and when the \n\t\/\/-- first survey is found identify it as the default option for the survey picklist\n\twhile(SqlRecordSetObj.Fetch())\n\t{\n\t\t\n\t\t\t\n\t\t\t\/\/-- get the recordset value for survey name and id\n\t\t\tvar surveyname = SqlRecordSetObj.GetValueAsString(\"surveyName\");\n\t\t\tvar surveyid = SqlRecordSetObj.GetValueAsString(\"surveyid\");\n\t\t\t\n\t\t\t\/\/-- add the survey name\/id pair into the array\n\t\t\t_swdoc.SurveyNameSurvIdMap[surveyname] = surveyid;\n\t\t\t\n\t\t\t\/\/-- build the picklist\toptions string\t\n\t\t\tstr += surveyname + \"|\";\n\t\t\t\n\t\t\t\/\/-- identify the default survey (currently the first one added)\n\t\t\tfor(ID in _swdoc.SurveyNameSurvIdMap)\n\t\t\t{\n\t\t\t\tif(_swdoc.SurveyNameSurvIdMap[ID])\n\t\t\t\t{\n\t\t\t\t\tif(!bselecteddefaultsurvey)\n\t\t\t\t\t{\n\t\t\t\t\t\tbselecteddefaultsurvey = true;\n\t\t\t\t\t\tselected = surveyname;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t}\n\t\/\/-- populate the surveys pick list\n\tmainform.cb_surveys.pickList = str;\n\t\n\t\/\/-- set the default selected survey\n\tapp._ete(mainform.cb_surveys , selected);\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"549","height":"359","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"tb_updatetext","type":"Field","group":"Tab1:0"},"appearance":{"index":"0","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"208","left":"12","right":"537","bottom":"348"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"data":{"binding":"updatedb.updatetxt"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"true","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"dt_actiontime","type":"Field"},"appearance":{"index":"1","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"53","left":"11","right":"218","bottom":"70"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.updatetimex"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0"}}},{"general":{"name":"tb_timespent","type":"Field"},"appearance":{"index":"2","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"53","left":"227","right":"286","bottom":"70"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Minute Time Period","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"defaultValue":"5","activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"cb_actionsource","type":"Field"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"90","left":"11","right":"218","bottom":"107"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"Telephone","distinctTable":"updatedb","distinctColumn":"udsource"}}},{"general":{"name":"tb_actiontype","type":"Field"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"90","left":"227","right":"388","bottom":"107"},"scaling":{"top":"0","left":"25","right":"50","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"defaultValue":"General Update","listItems":"General Update|Called Customer|E-mailed Customer|","activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"btnBrowseProfile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"5","caption":"...","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"128","left":"362","right":"388","bottom":"147"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1"}}},{"general":{"name":"tb_fixcodedescription","type":"Field"},"appearance":{"index":"6","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"129","left":"11","right":"360","bottom":"146"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_emailcustomer","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"7","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"52","left":"406","right":"522","bottom":"71"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"E-mail customer^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_updatepublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"8","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"33","left":"406","right":"535","bottom":"51"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Update to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_chargeable","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"9","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"72","left":"406","right":"547","bottom":"90"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Call to be chargeable^1|","disabledBackgroundColor":"#eeeeee","defaultValue":"0"}}},{"general":{"name":"flg_addKBase","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"92","left":"406","right":"548","bottom":"111"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Add to KnowledgeBase^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_customersurvey","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"11","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"111","left":"406","right":"564","bottom":"132"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Send customer survey:^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"cb_surveys","type":"Field"},"appearance":{"index":"12","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"134","left":"410","right":"540","bottom":"149"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"cb_callaction","type":"Field"},"appearance":{"index":"13","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"8","left":"172","right":"347","bottom":"23"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"Close Call|Resolve Call|"}}},{"general":{"name":"btnGetProfileText","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"14","caption":"Profile Text","backgroundColor":"#ffffff","foregroundColor":"#0000ff","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"160","left":"475","right":"540","bottom":"176"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"type":"Rectange"},"appearance":{"index":"15","backgroundColor":"#ccecff","foregroundColor":"#000000","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"-10","left":"0","right":"553","bottom":"364"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#336699"}}},{"general":{"name":"Rect2","type":"Rectange"},"appearance":{"index":"16","backgroundColor":"#f8f8f8","foregroundColor":"#003366","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"31","left":"3","right":"396","bottom":"155"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#ccecff"}}},{"general":{"name":"Tab1","type":"TabControl","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"17","caption":"Tab1","backgroundColor":"#ded7ce","foregroundColor":"#f7f3ef","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"177","left":"2","right":"548","bottom":"358"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"tabStyle":"Top","tabSize":"19","items":{"item":[{"name":"Action Description","properties":"56=#d1e0ee|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#d1e0ee"}}},{"name":"File Attachment","properties":"56=#ffcc66|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#ffcc66"}}}]},"selectedTextFont":{"@size":"8","#text":"Arial"},"selectedTextColor":"#000000","deselectedTextColor":"#000000","tabSlopeLeft":"2","tabSlopeRight":"2","deselectedTabHeightOffset":"1","tabSpacing":"0","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"tabStyle":"2"}}},{"general":{"name":"fl_attachments","type":"FileListTable","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"false","horizontalGridLines":"false","autoLoad":"true","allowMultiSelect":"true"},"group":"Tab1:1"},"appearance":{"index":"18","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"205","left":"10","right":"451","bottom":"349"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"File Name","width":"160","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Size","width":"80","image":"-1","dataColumn":"1"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Last Modified","width":"120","image":"-1","dataColumn":"2"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Full Local Path","width":"100","image":"-1","dataColumn":"3"}]},"sortColumn":"-1","sortDescending":"false","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"content":"NAME=css-bug-raising.gif;PATH=C:\\Documents and Settings\\NeilWJ\\My Documents\\css\\css-bug-raising.gif;SIZE=18746;LASTMODIFIED=1091525370"}}},{"general":{"name":"btnAddFile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"19","caption":"Add","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"205","left":"459","right":"539","bottom":"229"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74"}}},{"general":{"name":"btnRemove","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"20","caption":"Remove","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"235","left":"459","right":"539","bottom":"259"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"btnResolveClose","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"21","caption":"Resolve Call","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"4","left":"16","right":"100","bottom":"27"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Helpdesk Tools;IconIndex=6","eventButtonIconAlign":"0"}}},{"general":{"type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"22","caption":"Action Source","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"74","left":"9","right":"82","bottom":"86"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"LabelCode","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"23","caption":"Action Type","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"74","left":"225","right":"291","bottom":"86"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Text1","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"24","caption":"Date\/Time of Action","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"37","left":"8","right":"120","bottom":"51"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Label2","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"25","caption":"Time Spent","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"37","left":"225","right":"289","bottom":"51"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"ResolProfile","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"26","caption":"Resolution Profile","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"113","left":"8","right":"208","bottom":"127"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"ToolbarRect","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"27","backgroundColor":"#ffffff","foregroundColor":"#003366","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"4","left":"3","right":"545","bottom":"27"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#e2f1ff"}}},{"general":{"name":"btnAddFile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"28","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"4","left":"515","right":"545","bottom":"27"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74"}}},{"general":{"name":"LabelAction","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"29","caption":"Call Action:","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"10","left":"107","right":"176","bottom":"24"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"Rect2","type":"Rectange"},"appearance":{"index":"30","backgroundColor":"#f8f8f8","foregroundColor":"#003366","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"31","left":"400","right":"545","bottom":"155"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#ccecff"}}},{"general":{"name":"Label1","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"31","caption":"Post Code","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"10","left":"335","right":"392","bottom":"26"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"opencall.postcode"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Field1","type":"Field"},"appearance":{"index":"32","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"10","left":"392","right":"527","bottom":"26"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"opencall.postcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"content":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}}]},"javascript":{"methods":{"method":[{"name":"btnResolveClose_OnPressed","code":"btnResolveClose_OnPressed()\n{\n\tmainform.ResolveClose();\n}"},{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\/\/-- 03.06.2005\n\t\/\/-- NWJ\n\n\tapp._ete(tb_fixcodedescription, \"\");\n\t\n\t_swdoc.setup_form_mode();\n\n\t_swdoc.setup_email_flag()\n\n\t_swdoc.setup_survey_options();\n\n\t\/\/-- if they do not have surveys hide options\n\tif(!app.global.IsSurveyModuleEnabled())\n\t{\n\t\tapp._ete(flg_customersurvey , \"0\");\t\n\t\tapp._evi(flg_customersurvey , false);\n\t\tapp._evi(cb_surveys , false);\n\t}\n\telse\n\t{\n\t\t\/\/-- get survey options\n\t\t_swdoc.setup_survey_options();\t\n\t\t\t\n\t\t\/\/-- not allowed to change send survey options\n\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_DISABLESENDSURVEY))\n\t\t{\n\t\t\t\/\/--code change DavidJH 09.06.05\n\t\t\tapp._een(flg_customersurvey , false);\n\t\t\tapp._een(cb_surveys , false);\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp._een(flg_customersurvey , true);\n\t\t\tapp._een(cb_surveys , true);\t\t\t\n\t\t}\n\t\t\n\t\t\/\/-- default setting\n\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_SETSENDSURVEY))\n\t\t{\n\t\t\tapp._ete(flg_customersurvey , \"1\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp._ete(flg_customersurvey , \"0\");\n\t\t}\n\t\t\n\t}\n\t\n\n\t\/\/-- initialise other form elements\n\tif (!_swdoc.isQuickLogCall)\n\t{\n\t\/\/\tflg_chargeable.text \t= (app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSECHARGABLE)) ? \"1\":\"0\";\n\t\/\/\tflg_addKBase.text \t\t= (app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEKNOWLEDGEBASE)) ? \"1\":\"0\";\n\t\/\/\tflg_updatepublic.text \t= (app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEPRIVATE) )? \"1\":\"0\";\n\t}\n\n\t\/\/-- check analysts rights \n\tif(!app.session.HaveRight(ANALYST_RIGHT_C_GROUP,ANALYST_RIGHT_C_CANADDTOKNOWLEDGEBASE))\n\t{\n\t\t\t\/\/flg_addKBase.text \t= \"0\";\n\t\t\t\/\/flg_addKBase.enable = false;\n\t}\n\telse\n\t{\n\t\t\/\/-- enable the KB option\n\t\t\/\/flg_addKBase.enable = true;\n\t}\n\n\t\/\/-- reset call actions list\n\t\/\/-- then populate with options based on analyst permissions\n\t\n\t\/\/-- if we do not have any call ref return (i.e. were viewing in log call form)\n\tif(!_swdoc._form[\"callrefs\"])\treturn true;\n\t\t\n\t\/\/-- DJH\n\t\/\/-- 24.01.2006 \n\t\/\/-- if the call is resolved, pull the resolution text and prepopulate the boxes with this text.\n\tvar SqlRecordSetObj\t= new SqlQuery;\n\tif(_swdoc.nResolvedStatus > 0 && _swdoc.nPendingStatus == 0)\n\t{\n\t\n\t\t\/\/-- NWJ - 24.01.2006\n\t\t\/\/--       If closing call do not allow user to select fix code profile\n\t\t\/\/--\t   due to core product server restrictions\n\t\tapp._een(tb_fixcodedescription,false);\n\t\tapp._een(btnBrowseProfile,false);\n\t\t\n\t\n\t\t\/\/-- NWJ -  24.01.2006\n\t\t\/\/--\t\tGet distinct profile codes for passed in calls\n\t\tif (!SqlRecordSetObj.Query(\"SELECT distinct opencall.fixcode FROM opencall WHERE callref IN(\" + _swdoc.CallrefsCommaString + \")\", \"syscache\"))\n     \t{\n\t\t\tMessageBox(\"Unable to query call status values. Progress not possible.\", MB_ICONSTOP);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/-- NWJ - 24.01.2006\n\t\t\t\/\/-- \t   See if we have more than 1 fixcode\n\t\t\tvar strFixCode \t= \"\"\n\t\t\tvar strFixText\t= \"\";\n\t\t\tvar intFixCodeCount = 0;\n\t\t\twhile(SqlRecordSetObj.Fetch())\n\t\t\t{\n\t\t\t\tintFixCodeCount++;\t\t\t\n\t\t\t\t\/\/-- we have multiple fixcodes\n\t\t\t\tif (intFixCodeCount > 1) \n\t\t\t\t{\n\t\t\t\t\tstrFixCode = \"\";\n\t\t\t\t\tstrFixText = \"<multiple profiles>\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tstrFixCode = SqlRecordSetObj.GetValueAsString(\"fixcode\");\n\t\t\t}\n\t\t\t\n\t\t\t\/\/-- if we have one fix code we should load this profile\n\t\t\tif (intFixCodeCount == 1)\n\t\t\t{\n\t\t\t\tvar objFix = app.global.GetResolutionProfileDescription(strFixCode);\n\t\t\t\tstrFixText = objFix.strCodeDesc;\t\t\t\n\t\t\t}\n\n\t\t\t\/\/_swdoc.updatedb.updatetxt = strFixText;\n\t\t\tapp._ete(tb_fixcodedescription , strFixText);\n\t\t\t_swdoc.opencall.fixcode = strFixCode;\t\t\n\t\t\t\t\n\t\t}\/\/end else query was successful\n\t}\/\/end if resolved call\n\n\tif(_swdoc.strUpdateText.length)_swdoc.updatedb.updatetxt = _swdoc.strUpdateText;\n\n\t_swdoc.updatedb.udsource = 'E-mail'; \n\t_swdoc.UpdateFormFromData();\n\n\n}"},{"name":"btnBrowseProfile_OnPressed","code":"btnBrowseProfile_OnPressed()\n{\n\t\/\/-- get resolution profile filter\n\t\n\t\/\/-- NWJ - 29.06.2006 - get close filter or resolve filter depending on call closure option (requested by Dan 47766)\n\tif (cb_callaction.text == \"Resolve Call\")\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/ResolveProfileFilter\");\n\t}\n\telse\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/ProfileCodeFilter\");\n\t}\n\t\n\tvar pc = new ChooseProfileCodeDialog;\n\t\/\/-- default analyst permission to auto fill the resolution text on resolve\/close call is set\n\n    pc.useDescriptionText =  app.session.IsDefaultOption(ANALYST_DEFAULT_AUTOFILLRESOLUTIONTEXT); \n    \n    if(pc.Open(true, true, _swdoc.strFixCode, Filter) == IDOK)\n    {\n        \/\/-- Get the fix code and split it into an array\n        var strCodeDesc = pc.codeDescription;\n        var strCode = pc.code;\n        \n        \/\/-- If no codes are found then stop\n        if(strCode==\"\") return;\n        \n        \/\/-- Set the text in the resolution profile text box\n        \/\/-- 08.02.2007 - NWJ - set the opencall record value instead of the element name \n\t\t_swdoc.opencall.fixcode = strCode;       \n        app._ete(tb_fixcodedescription , strCodeDesc);\n        \n        \/\/-- Attempt to add the resolution profile description to the Action Description box if the\n        \/\/-- default analyst permission to auto fill the resolution text on resolve\/close call is set\n        if(pc.useDescriptionText)\n        {\n        \t\/\/-- 08.02.2007 - NWJ - set the opencall record value instead of the element name \n        \tvar strCurrentUpdateText = _swdoc.updatedb.updatetxt;\n           \t\n        \tif(pc.description.length)\n        \t{\n        \t\t\/\/if(tb_updatetext.text.length)\n        \t\tif(strCurrentUpdateText.length)\n\t\t\t\t{\n\t\t\t\t\tvar Message = \"You have chosen to transfer the default profile text into the description field of the close call form. However, you have already entered some text into this field. Do you want to append the text you have typed?\\n\\nTo append the default text to the text you have already typed, click Yes\\nTo transfer the default text and overwrite what you have already typed, click No\\nTo ignore the default text and leave the text you have typed alone, click Cancel\";\n\t\t\t\t\tswitch(MessageBox(Message, MB_ICONQUESTION | MB_YESNOCANCEL))\n\t\t\t\t\t{\n\t\t\t\t\tcase IDYES:\n\t\t\t\t\t\tif(_swdoc.updatedb.updatetxt.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t \/\/-- add a line feed\n\t\t\t\t\t\t\t strCurrentUpdateText += \"\\r\\n\";\n\t\t\t\t\t\t\t \/\/tempText = _swdoc.updatedb.updatetxt + \"\\r\\n\"; \n\t\t\t\t\t\t}\n\t\t\t\t\t\tstrCurrentUpdateText += pc.description;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IDNO:\n\t\t\t\t\t\tstrCurrentUpdateText = pc.description;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IDCANCEL:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstrCurrentUpdateText = pc.description;\n\t\t\t\t}\n        \t}\n        \t\n        \t\/\/-- add back to update record\n        \t_swdoc.updatedb.updatetxt = strCurrentUpdateText;\n        \t_swdoc.UpdateFormFromData();\n        }\n\n\t\t\/\/-- if we are working with webclient\n\t\tif(app.bWebClient)\n\t\t{\n\t\t\tapp._een(btnGetProfileText , false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp._een(btnGetProfileText , (_swdoc.updatedb.updatetxt? true:false));\n\t\t}\n    }\n}"},{"name":"btnAddFile_OnPressed","code":"btnAddFile_OnPressed()\n{\n\t\/\/-- add files\n\t\/\/fl_attachments.newFile = InvokeCallAttachmentFileDialog();\n\tfl_attachments.AddFiles();\n\n}"},{"name":"btnRemove_OnPressed","code":"btnRemove_OnPressed()\n{\n\t\/\/ -- remove selected files\n\tfor(i=fl_attachments.rowCount()-1; i>=0;i--)\n    {\n    \tif(fl_attachments.IsRowSelected(i))\n    \t{\n    \t\t\/\/-- remove\n    \t\tfl_attachments.RemoveRow(i);\n    \t}\n    }\n\n}"},{"name":"btnGetProfileText_OnPressed","code":"btnGetProfileText_OnPressed()\n{\n\tif(_swdoc.updatedb.updatetxt.length)\n\t{\n\t\tif(MessageBox(\"If you retrieve the default text description from the profile database you will overwrite the current Action Description text.\\n\\nDo you wish to continue?\", MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\treturn;\n\t}\n\t\n\t\/\/-- get resolution profile description\t\n\tvar currentResProfileDesc = app.global.GetResolutionProfileDescription(_swdoc.opencall.fixcode);\n\t_swdoc.updatedb.updatetxt = currentResProfileDesc.strDescription;\n\t_swdoc.UpdateFormFromData();\n}"},{"name":"checkCustomerSurvey_OnValueChanged","code":"checkCustomerSurvey_OnValueChanged(strValue)\n{\n\tvar bChecked = checkCustomerSurvey.text == \"1\";\n\tapp._een(Surveys , bChecked);\n}"},{"name":"(User Defined Functions)","code":"\/\/--\n\/\/-- resolve or close the call\nfunction ResolveClose()\n{\n\t\/\/-- validate the form\n\tif(!mainform.ValidateForm())return false;\n\t\n\t\t\/\/-- validate the rights and profile levels\n\t\n\tif(mainform.cb_callaction.text == \"Resolve Call\")\t\t\n\t{\n\t\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS)) return false;\n\t}\n\telse\n\t{\n\t\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP, ANALYST_RIGHT_A_CANCLOSECALLS)) return false;\n\t}\n\n\t\/\/-- get the number of profile levels the analyst HAS to choose\n\tvar nLevelNeeded = app.session.GetCloseProfileLevelRequired();\n\n\t\/\/-- determine the number of Profile levels the user has selected\n\t\/\/-- NWJ - can we turn this into a app.global.i.e. app.global.returnProfileLevelCount(strProfileCode);\n\tvar strTempProfileCodes = new String(_swdoc.opencall.fixcode);\n\tvar nLevels = 0;\n\twhile(strTempProfileCodes.indexOf('-') != -1)\n\t{\n\t\tnLevels++;\n\t\tstrTempProfileCodes = strTempProfileCodes.substr((strTempProfileCodes.indexOf('-')+1),strTempProfileCodes.length);\n\t}\n\t\n\tif(strTempProfileCodes.length)nLevels++;\n\t\n\t\/\/-- If insufficient profile levels are specified then alert the user\n\tif(nLevels < nLevelNeeded)\n\t{\n\t\tMessageBox(\"You must profile this call resolution. Your access control rights require you to choose at least \" + nLevelNeeded + \" profile level(s)\", MB_ICONSTOP);\n\t\treturn false;\n\t}\n\t\n\t\n\t\/\/-- call function to check back dating\n\tif (!mainform.checkBackDateAction()) return false;\n\t\n\tif(cb_callaction.text == \"Resolve Call\") _swdoc.bResolveOnly = true;\n\t\t\n\tif(_swdoc.bResolveOnly)\n\t{\n\t\tif(MessageBox(_swdoc.arrCallrefs.length >1 ? \"Are you sure you want to resolve these calls?\" : \"Are you sure you want to resolve this call?\" , MB_YESNO| MB_ICONINFORMATION ) != IDYES)\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tvar MsgTmp = \"\";\n\t\tif(_swdoc.strIssueref.length)\n\t\t{\n\t\t\tif(_swdoc.arrCallrefs.length > 1)\n\t\t\t\tMsgTmp = \"Are you sure you want to close these calls, and the issue they belong to?\";\n\t\t\telse\n\t\t\t\tMsgTmp = \"Are you sure you want to close this call, and the issue it belongs to?\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(_swdoc.arrCallrefs.length > 1)\n\t\t\t\tMsgTmp = \"Are you sure you want to close these calls?\";\n\t\t\telse\n\t\t\t\tMsgTmp = \"Are you sure you want to close this call?\";\n\t\t}\n\n\t\tif(MessageBox(MsgTmp, MB_YESNO | MB_ICONINFORMATION ) != IDYES)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\n\t}\n\t\t\n\tvar nStatus = CS_CLOSED;\n\tif(_swdoc.bResolveOnly)\n\t{\n\t\tnStatus = CS_RESOLVED;\n\t}\n\telse\n\t{\n\t\tif(flg_chargeable.text == \"1\")\tnStatus = CS_CLOSEDCHARGABLE;\n\t}\n\t\t\n\t\/\/-- handle web client\n\tif(app.bWebClient && _swdoc.bLogMode)\n\t{\n\t \tnStatus = CS_CLOSED;\n\t \tflg_chargeable.text == \"0\"\n\t}\t\n\t\t\n\t\t\n\tvar strProbText = \"\";\n\tvar strProbCode = \"\";\n\t\n\t\/\/-- we want to update KB\n\tif(flg_addKBase.text == \"1\" && _swdoc.arrCallrefs.length == 1)\n\t{\n\t\n\t\tvar nCallref = _swdoc.arrCallrefs[0];\n\t\t\/\/-- get the problem text from updatedb\n\t\tstrProblem = mainform.get_call_problemtext(nCallref);\n\t\t\n\t\t\/\/-- get the problem code from open call\n\t\tstrProbCode = mainform.get_call_problemcode(nCallref);\n\t}\n\n\t\/\/-- create a new HD connection and connection\n\tvar hdcon = new HelpdeskSession;\n\tif(!hdcon.Connect())return false;\n\n\n\t\/\/-- check if we are sending a survey\n\tvar bSendSurveyToCustomer = false;\n\tvar SurveyID = 0;\n\tvar SurveyName = \"\";\n\tif(app.global.IsSurveyModuleEnabled())\n\t{\n\t\tif (flg_customersurvey.text == \"1\" && cb_surveys.text.length)\n\t\t{\n\t\t\tSurveyName = cb_surveys.text;\n\t\t\t\n\t\t\t\/\/-- get surveyid from the _swdoc.SurveyNameSurvIdMap\n\t\t\tfor(ID in _swdoc.SurveyNameSurvIdMap)\n\t\t\t{\n\t\t\t\tif(ID  == SurveyName)\n\t\t\t\t{\n\t\t\t\t\tSurveyID = _swdoc.SurveyNameSurvIdMap[SurveyName]; \n\t\t\t\t\tbSendSurveyToCustomer = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\t\/\/-- send survey request to the server\t\t\t\n\t\t\tif (bSendSurveyToCustomer)\n\t\t\t{\n\t\t\t\thdcon.SendCustomerSurvey(SurveyID, _swdoc.CallrefsCommaString);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\/\/-- If we're in an issue we wan't to dissassociate the calls with the issue before we close the call.\n\tif(_swdoc.strIssueref.length)\n\t{\n\t\t\/\/-- send HD call to remove calls from an issue\n\t\tif(!hdcon.RemoveCallFromIssue(_swdoc.strIssueref, _swdoc.CallrefsCommaString))\n\t\t\tMessageBox(\"There were problems removing the call(s) from the issue they're associated with.\\n\\nError: \" + hdcon.GetLastErrorStr());\n\t}\n\n\n\t\/\/-- store first callref\t\n\tvar nCallRef = _swdoc.arrCallrefs[0];\n\n\t\/\/-- NWJ - 08.02.2007 - We might want to update call values before closing i.e. for customisation\n\t\/\/-- update opencall fields - we need to do this by looping through form elements\t\n\t\/\/-- problem is BeginCallValueUpdates doesnt accept multiple callrefs so have to do a call update per callref\n\tvar rec = _swdoc.GetRecord(\"opencall\");\t\t\t\n\tif(rec)\n\t{\n\t\tfor(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)\n\t\t{\n\t\t\tif(hdcon.BeginCallValueUpdates(_swdoc.arrCallrefs[refcount],\"Before ResolveClose Call\"))\n\t\t\t{\n\t\t\t\tvar boolUpdateCallValues = false;\n\t\t\t\tvar nColCount = rec.GetCount();\n\t\t\t\tfor(x=0; x<nColCount; x++)\n\t\t\t\t{\n\t\t\t\t\tif(!rec.IsModified(x))continue;\n\t\t\t\t\thdcon.SendValue(\"opencall.\" + rec.GetColumnName(x), rec.GetValue(x));\n\t\t\t\t}\n\t\t\t}\t\t\n        \thdcon.Commit();\n\t\t}\n\t}\n\t\n\t\/\/-- We start a new transaction to update the specified call (complex req)\n\tif(hdcon.BeginCloseCall(_swdoc.CallrefsCommaString))\n\t{   \n    \tvar bSendSuccess = true;\n    \t\n      \t\n    \t\/\/-- send update db values\n\t\tvar rec = _swdoc.GetRecord(\"updatedb\");\t\t\t\n\t\tif(rec)\n\t\t{\n\t\t\tvar nColCount = rec.GetCount();\n\t\t\tfor(x=0; x<nColCount; x++)\n\t\t\t{\n\t\t\t\tif(!rec.IsModified(x))continue;\n\t\t\t\t\n\t\t\t\tif(!hdcon.SendValue(\"updatedb.\" + rec.GetColumnName(x), rec.GetValue(x)))\n\t\t\t\t{\n\t\t\t\t\tbSendSuccess = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\t\/\/-- NWJ - 24.01.2006\n\t\t\/\/--\t   Known core product issue - if fixcode is already populated before \"closing\"\n\t\t\/\/--\t   a call, and user has changed the fixcode whilst closing, then the new\n\t\t\/\/--\t   fix code is not applied in the below SendString ?? \t\t\t\t\n\n\n\n\t\t\/\/-- if send of info worked  \t\t\t\n    \tif(bSendSuccess && hdcon.SendNumber(\"status\", nStatus) && \n\t\t\thdcon.SendText(\"fixcode\", _swdoc.opencall.fixcode) &&    \t\n\t \t\thdcon.SendNumber(\"backdateperiod\", _swdoc.nBackdatePeriod) &&\n\t   \t\thdcon.SendBoolean(\"publicupdate\", flg_updatepublic.text) &&\n\t   \t\thdcon.SendBoolean(\"delaycacheflush\", flg_emailcustomer.text) &&\n\t   \t\thdcon.SendNumber(\"timespent\", mainform.tb_timespent.value))\n\t\t{\n\t\t\n\t\t\t\/\/-- send attachments\n\t\t\tfor(i=0; i<fl_attachments.rowCount();i++)\n\t\t    {\n    \t\t\tif(!hdcon.SendFile(\"attach\", fl_attachments.GetItemText(i,0), fl_attachments.GetItemText(i,3)))\n    \t\t\t\treturn false;\n    \t\t}\n    \t\t\t\n    \t\t\/\/-- commit our data send\n    \t\tif(hdcon.Commit())\n    \t\t{\n    \t\t\t\/\/-- failed HD\n    \t\t\tif(!hdcon.GetResult()) return false;\n    \t\t\t\t\t\n    \t\t\t\/\/-- The returned data is in the format \"updateref=<callref>.<udindex>\"\n    \t\t\t\/\/-- The following regex will put the callref into arrCallInfo[1] and the udindex\n    \t\t\t\/\/-- into arrCallInfo[2]\n    \t\t\tvar arrCallInfo = hdcon.GetCallUpdateResultData();\t\n    \t\t\t\n    \t\t\t\/\/ If we have been invoked to update a call from an e-mail message, this update will \n\t\t\t\t\t\/\/ only relate to a single call. We can only handle e-mail audit trail if we are working\n\t\t\t\t\t\/\/ on a single-call update.\n\t\t\t\t\tif(_swdoc.arrCallrefs.length == 1 && \t\t\t\/\/ Are we only dealing with a single call refernce?\n\t\t\t\t\t\t_swdoc._form[\"messagesource\"] && \t\/\/ Are we woring from an e-mail message?\n\t\t\t\t\t\tdd.GetGlobalParamAsNumber(\"Email Audit Trail\/StoreEmailAuditTrail\")) \/\/ Are we configured?\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/ The message source string contains the \"mailbox name\\message id\". We need \n\t\t\t\t\t\t\/\/ to split these out for the following function\n\t\t\t\t\t\tvar arrMsgInfo = _swdoc._form[\"messagesource\"].split('\\\\');\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ Check config to see if we need to include the file attachments in the message too\n\t\t\t\t\t\tvar bIncludeAttachments = dd.GetGlobalParamAsNumber(\"Email Audit Trail\/IncludeAttachmentsInMessage\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ We need to specify the folder to which the message should be moved to based\n\t\t\t\t\t\t\/\/ on the options set in the DD. \n\t\t\t\t\t\tvar strMoveMessageToFolder = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ Next, see if we have specified a specific folder to move the message to\n\t\t\t\t\t\tstrMoveMessageToFolder = dd.GetGlobalParamAsString(\"Mail Move Folders\/CloseCallMailFolder\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (strMoveMessageToFolder.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/ First we see if the config tells us to move the message to the deleted items folder\n\t\t\t\t\t\t\tif(dd.GetGlobalParamAsNumber(\"Email Audit Trail\/MoveToDeletedItems\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstrMoveMessageToFolder = \"Deleted Items\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ As we are going to use the Email Subject in the name of the audit trail file we are saving\n\t\t\t\t\t\t\/\/ we need to check it for characters that are invalid in a filename and replace them with \"-\"\n\t\t\t\t\t\t\tvar strEmailSubject = \"\";\n\t\t\t\t\t\t\tif(_swdoc._form[\"subject\"])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstrEmailSubject = replaceIllegalFileCharacters(_swdoc._form[\"subject\"]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ The following function does a number of things. It tells the server to encode\n\t\t\t\t\t\t\/\/ and attach the specified message to the call. It sets the state icon of the \n\t\t\t\t\t\t\/\/ call update to \"mail-received\" in this instace. If the strMoveMessageToFolder\n\t\t\t\t\t\t\/\/ contains a valid folder, it will move the specified mail message to the folder\n\t\t\t\t\t\tif(!app.global.AttachMessageToCall(arrMsgInfo[0], \t\t\t\t\t\t\t\t\/\/ Mailbox name\n\t\t\t\t\t\t\t\t\t\t\t\tarrMsgInfo[1], \t\t\t\t\t\t\t\t\/\/ Message ID\n\t\t\t\t\t\t\t\t\t\t\t\t\"Received-\" + strEmailSubject + \".swm\", \t\/\/ File name\n\t\t\t\t\t\t\t\t\t\t\t\t_swdoc.arrCallrefs[0], \t\t\t\t\t\t\t\/\/ Call reference\n\t\t\t\t\t\t\t\t\t\t\t\tarrCallInfo[_swdoc.arrCallrefs[0]],\t\t\t\t\/\/ UdIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\"mail-received\",\t\t\t\t\t\t\t\/\/ Indicate that this is a received message\n\t\t\t\t\t\t\t\t\t\t\t\tbIncludeAttachments,\t\t\t\t\t\t\/\/ Include File attachments?\n\t\t\t\t\t\t\t\t\t\t\t\tstrMoveMessageToFolder))\t\t\t\t\t\/\/ Move the message to this folder\n\t\t\t\t\t\t{\n\t\t\t\t    \t\tMessageBox(\"There was an error attaching the originating e-mail to this call.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tapp.global.CloseMailMessageWindow(arrMsgInfo[1]);\n\t\t\t\t\t\t}\n\t\t\t\t    }\n\n    \t\t\t\n       \t\t\t\/\/-- add knowledge base\t\n    \t\t\tif(flg_addKBase.text == \"1\") app.global.AddResolutionToKnowledgeBase(strProblem, strProbCode, tb_updatetext.text, _swdoc.strFixCode, _swdoc.CallrefsCommaString);\n    \t\t\t    \t\t\t\n    \t\t\t\/\/-- we are updating an issue\t\t\n    \t\t\tif(_swdoc.strIssueref.length)\n\t\t\t\t{\n\t\t\t\t\t\/\/-- \n\t\t\t\t\tif(hdcon.BeginUpdateIssue(_swdoc.strIssueref))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar dIn\t= new Date();\n\t\t\t\t\t\thdcon.SendNumber(\"status\",ISSUE_STATUS_CLOSED);\n\t\t\t\t\t\thdcon.SendDate(\"resolved\",dIn.getTime());\n\t\t\t\t\t\tif(!hdcon.Commit())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMessageBox(\"There were problems closing the issue.\\n\\nError: \" + hdcon.GetLastErrorStr());\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\/\/-- if we want to send an email to the customer AND there are file attachments, obtain the \n    \t\t\t\t\/\/-- attachments to attach to the email as well\t\n\t\t\t\t\tif(mainform.flg_emailcustomer.value && app.global.IsConnectedToMailServer())\n   \t\t\t\t\t{\n    \t\t\t\t\t\/\/-- OK, we are going to send the customer(s) an e-mail message to confirm the \n\t\t\t\t\t\t\/\/-- call closure. If we have uploaded file attachments, we can ask the session\n\t\t\t\t\t\t\/\/-- for a list of the files. If available, the session variables will include\n\t\t\t\t\t\t\/\/-- a _serverpath variable for each file. The returned list, is a list of \n\t\t\t\t\t\t\/\/-- strings that is suitable for passing to the compose message function\t\n\t\t\t\t\t\tapp.global.ComposeCallUpdateEmail(arrCallInfo,\t\t\t\/\/Array: Call Reference-UdIndex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttb_updatetext.text, \t\t\/\/Message Text\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thdcon.GetSessionFileInfo(), \/\/File Attachments\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttb_timespent.text,\t\t\t\/\/Time spent on Last Action\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"CloseCallMailTemplate\", \t\/\/Template Name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTEMPLATE_CLOSECALL );\t\t\/\/Template Type\n\t\t\t\t\t}\n\t\t\t\t    \n    \t\t\thdcon.Close();\t\n    \t\t\t_swdoc.bFormFieldChanged = false;\t\t\n    \t\t\t_swdoc.CloseForm();\n    \t\t\treturn true;\t\n    \t\t}\n\t\t    else\n\t\t    {\n\t\t    \tMessageBox(hdcon.GetLastErrorStr());\n\t\t    }\/\/-- if(hdcon.Commit())\n\t\t}\n\t\telse\n\t\t{\n\t\t    \tMessageBox(hdcon.GetLastErrorStr());\n\t\t}\/\/-- if send of info worked  \t\t\t\n\t}\n\t\n\t\/\/-- if we got here we failed\n\thdcon.Close();\n\treturn false;\n}\n\n\n\/\/-- initalise the main form in the onform loaded\nfunction InitialiseForm()\n{\n\t\tapp._een(btnBrowseProfile , true);\n\t\tapp._een(flg_customersurvey , true);\n\t\tapp._ete(flg_customersurvey , \"0\");\n\t\n\t\tvar SqlRecordSetObj\t= new SqlQuery;\n\t\t\n\t\t\n\t\tif(_swdoc.strUpdateText.length)app._ete(tb_updatetext , _swdoc.strUpdateText);\n\t\t\n\t\tvar ProfileCodeFilter = \"\";\n\t\t\n\t\tif(_swdoc.strCallClass.length) ProfileCodeFilter = dd.GetGlobalParamAsString(_swdoc.strCallClass + \"\/ProfileCodeFilter\");\n\t\t\t\n\t\tif(!app.global.IsSurveyModuleEnabled())\n\t\t{\n\t\t\tapp._evi(flg_customersurvey , false);\n\t\t\tapp._evi(cb_surveys , false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/-- call function to load listbox\n\t\t\tif(!_swdoc.bLogMode)initSurveyList();\n     \t\t\n\t\t\t\/\/-- default setting\n\t\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_SETSENDSURVEY))\n\t\t\t{\n\t\t\t\tapp._ete(flg_customersurvey , \"1\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\/\/-- not allowed to change send survey options\n\t\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_DISABLESENDSURVEY))\n\t\t\t{\n\t\t\t\tapp._een(flg_customersurvey , false);\n\t\t\t}\n\t\t}\n\t\n\t\tapp._een(cb_surveys , (flg_customersurvey.text == \"1\"));\n\t\t\n\t\t_swdoc.bAutoRetriveProfileText = app.session.IsDefaultOption(ANALYST_DEFAULT_AUTOFILLRESOLUTIONTEXT);\n\t\t\n\t\t\/\/flg_chargeable.text = app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSECHARGABLE) ? \"1\":\"0\";\n\t\tapp._ete(flg_addKBase , app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEKNOWLEDGEBASE) ? \"1\":\"0\");\n\t\tapp._ete(flg_updatepublic , app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEPRIVATE) ? \"1\":\"0\");\n\t\t\n\t\t\t\n\t\tif(!app.session.HaveRight(ANALYST_RIGHT_C_GROUP,ANALYST_RIGHT_C_CANADDTOKNOWLEDGEBASE))\n\t\t{\n\t\t\tapp._ete(flg_addKBase , \"0\");\n\t\t\tapp._een(flg_addKBase , false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(_swdoc.arrCallrefs.length == 1)\n\t\t\t{\n\t\t\t\t\/\/-- We need to check whether this call has been added to the knowledge\n\t\t\t\t\/\/-- base when it was resolved.\n\t\n\t\t\t\tapp._een(flg_addKBase , true);\n\t\t\t\tvar nCallRef = _swdoc.arrCallrefs[0];\n\t\t\t\tvar nStatus = 0;\n\t\n\t\t\t\tvar bExists = false;\n\t\t\t\t\n\t\t\t\tif(_swdoc.CallStatusMap[nCallRef])\n\t\t\t\t\tnStatus = _swdoc.CallStatusMap[nCallRef];\n\t\t\t\t\t\n\t\t\t\tif(nStatus =! 0)\n\t\t\t\t{\n\t\t\t\t\tif(nStatus == CS_RESOLVED)\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/ This is the only case in which we need to check. The analyst can only\n\t\t\t\t\t\t\/\/  have added to the knowledge base if the call has been resolved and\n\t\t\t\t\t\t\/\/  we're now in the process of closin it.\n\t\t\t\t\t\t\n\t\t\t\t\t\tSqlCommand = \"SELECT COUNT(*) AS ct FROM kbdocuments WHERE callref='\" + dd.tables.opencall.column.callref.FormatValue(_swdoc.arrCallrefs[1]) + \"'\";\n\n\t\t\t\t\t\tif(SqlRecordSetObj.Query(SqlCommand, \"sw_knowledgebase\"))\n     \t\t\t\t\t{\n     \t\t\t\t\t\tif(SqlRecordSetObj.Fetch())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar nct =  SqlRecordSetObj.GetValueAsString(0);\n\t\t\t\t\t\t\t\tif(nct > 0)\tbExists = TRUE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSqlRecordSetObj.Reset();\n     \t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t\/\/-- already exists in the KB so disable flag\n\t\t\t\tif(bExists)\t\n\t\t\t\t{\n\t\t\t\t\tapp._ete(flg_addKBase , \"0\");\n\t\t\t\t\tapp._een(flg_addKBase , false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\/\/-- Don't even bother for multiple calls, the resolution should only\n\t\t\t\t\/\/--  be added once anyway.\n\t\t\t\tapp._ete(flg_addKBase , \"0\");\n\t\t\t\tapp._een(flg_addKBase , false);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/-- init file list and add any attachments (if coming from email)\n\t\tinitFileList();\t\n\t\t\n\t\t\/\/-- init Call Types list\t\t\n\t\tinitCallTypes();\n\t\t\n\t\t\n\t\tif(_swdoc.bSourceEmail)\n\t\t{\n\t\t\t_swdoc.updatedb.udsource = 'E-mail'; \n\t\t\t_swdoc.UpdateFormFromData();\n\t\t}\n\t\t\/\/-- so if not running in log call.\n\t\tif(!_swdoc.bLogMode)_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime();\n\t\t\n\t\t\n}\n\n\n\/\/-- init file list\nfunction initFileList()\n{\n\t\/\/--read the passed in attachemnets\n\t\n\tvar x=0;\n\twhile(_swdoc._form[\"attach\"+x])\n\t{\n\t\tfl_attachments.AddAttachment(_swdoc._form[\"Attach\" + x]);\n\t\tx++;\n\t}\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANATTACHFILESTOCALLS,false))\n\t{\n\t\tif(_swdoc._form[\"Attach1\"])\n\t\t{\n\t\t\tapp._evi(btnAddFile , false);\n\t\t\tapp._evi(btnRemoveFile , false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tTab1.ShowTabItem(1,false);\n\t\t}\n\t}\n}\n\n\/\/-- init call action list\nfunction initCallActions()\n{\n\t\t\/\/-- reset\n\t\tcb_callaction.pickList = \"\";\n\t\n\t\t\/\/--\n\t\t\/\/-- if call is already resolved set call action to Close Call and disable listbox\n\t\tif(_swdoc.nResolvedStatus > 0 && _swdoc.nPendingStatus == 0)\n\t\t{\n\t\t\t\/\/-- set flags for close call only\t\n\t\t\tmainform.init_closecall_only();\n\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/-- set flags \/ buttons based on close or resolve \n\t\t\tmainform.init_close_or_resolve();\n\t\t}\n\n\t\t\/\/-- if we are resolving an issue\t\t\n\t\tif(_swdoc.strIssueref.length)\n\t\t{\n\t\t\t\n\t\t\tapp._ete(cb_callaction , \"Close Call\");\n\t\t\tapp._een(cb_callaction , false);\n\t\t\tapp._ete(btnResolveClose , (_swdoc.arrCallrefs.length>1) ? \"Close Calls\" : \"Close Call\");\n\t\t}\n\t\t\n\t\t\/\/-- call function to process on call action setting\n\t\tsetCRButtonText(cb_callaction.text);\n}\n\n\/\/--init Call Types list\nfunction initCallTypes()\n{\n\tapp._ete(tb_actiontype , \"General Update\");\n}\n\n\/\/--\n\/\/-- set the text on the action button for this form\nfunction setCRButtonText(strCallAction)\n{\n}\n\n\/\/--\n\/\/-- can only close the call\/s so set flags etc\nfunction init_closecall_only()\n{\n\t_swdoc.bResolveOnly = false;\n\t\n\tapp._ete(cb_callaction , \"Close Call\");\n\tapp._een(cb_callaction , false);\n\t\n\tapp._emt(btnResolveClose , \"&Close Call\");\n\t\t\t\n\tapp._een(btnBrowseProfile , false);\n\tapp._een(btnGetProfileText , false);\n\tapp._een(tb_fixcodedescription , false);\n\n\tapp._ete(flg_chargeable , (app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSECHARGABLE)) ? \"1\":\"0\");\n\tapp._een(flg_chargeable , true);\n\t\t\n}\n\nfunction init_close_or_resolve()\n{\n\t\/\/-- user has option to resolve or close\n\t\/\/-- add option to close \n\tif(app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS))\n\t{\n\t\tcb_callaction.pickList += \"Close Call|\";\n\t}\n\t\n\t\/\/-- add option to resolve\n\tif(app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS))\n\t{\n\t\tcb_callaction.pickList += \"Resolve Call|\";\n\t}\n\t\t\n\t\n\t\/\/-- set the default selection for the call action pick list based on the DD entry \n\tvar bResolveByDefault = app.session.IsDefaultOption(ANALYST_DEFAULT_RESOLVEBYDEFAULT);\n\tif(_swdoc.bResolveOnly || bResolveByDefault)\n\t{\n\t\tapp._ete(cb_callaction , \"Resolve Call\");\n\t}\n\telse\n\t{\n\t\tapp._ete(cb_callaction , \"Close Call\")\n\t}\t\n}\n\n\n\n\/\/-- check back dating functions\nfunction checkBackDateAction()\n{\n\tvar nBackdatePeriod = 0;\n\t\n\t\/\/-- if we have changed time\n\tif(_swdoc.bDateTimeChanged)\n\t{\n\t\t\/\/Calculate the BackDate Period\n    \tvar currentTime\t= app.global.GetCurrentEpocTime() ;\n\t\tvar updateDateTime = dt_actiontime.text;\n\t\tnBackdatePeriod = currentTime - updateDateTime;\n\t\t\t\n\t\t\/\/If attempted to forward date then deny\n\t\tif(nBackdatePeriod < 0)\n\t\t{\n\t\t\tvar message = \"You have attempted to forward date this call update which is not allowed.\\n\\nDo you want to use the current date and time to update this call.\";\n\t\t\tif(MessageBox(message, MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tnBackdatePeriod = 0;\n\t\t}\n\t\t\n\t\t\/\/If not allowed to backdate and resolve date is backdated then prompt to use current time or cancel\n\t\tif(!app.session.CanBackdateCallActions() && nBackdatePeriod > 0)\n\t\t{\n\t\t\tvar message = \"You have attempted to backdate this call update but you do not have sufficient privileges to do so\\n\\nDo you want to use the current date and time to update this call?\"\n\t\t\tif(MessageBox(message, MB_ICONQUESTION | MB_YESNO) != IDYES)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tnBackdatePeriod = 0;\n\t\t}\n\t\t\n\t\t\/\/If backdate period > the analyst max backdate period then prompt to use current time or cancel\n\t\tif(nBackdatePeriod > app.session.GetMaxBackdatePeriodAllowed())\n\t\t{\n\t\t\tvar dTime\t= new Date();\n\t\t\tdTime = (currentTime - app.session.GetMaxBackdatePeriodAllowed()) * 1000;\n\t\t\tvar message = \"You have attempted to backdate this call update further than you have sufficient privileges to do so.\\n\\nDo you want to use the oldest date\/time that you are allowed: \";\n\t\t\tif(MessageBox(message + getReadableDatefromEpoch(dTime), MB_ICONQUESTION | MB_YESNO) != IDYES)\t\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tnBackdatePeriod = app.session.GetMaxBackdatePeriodAllowed();\n\t\t}\n\t\t\n\t}\n\t\n\t\/\/Set the _swdoc level variable for use in the resolve\/close and return true\n\t_swdoc.nBackdatePeriod = nBackdatePeriod;\n\treturn true;\n}\n\n\n\n\/\/-- get the problem text for a call\nfunction get_call_problemtext(nCallRef)\n{\n\tvar probtext = \"\";\n\tSqlRecordSetObj = new SqlQuery;\n\tSqlRecordSetObj.Query(\"SELECT updatetxt FROM updatedb WHERE udindex = 0 AND callref = \" + nCallRef, \"sw_systemdb\");\n\tif(SqlRecordSetObj.Fetch())\n\t{\n\t\tprobtext = SqlRecordSetObj.GetValueAsString(0);\n\t}\n\tSqlRecordSetObj.Reset();\t\n\t\n\treturn probtext;\n}\n\n\n\/\/-- get the problem code from open call\nfunction get_call_problemcode(nCallRef)\n{\n\t\/\/-- get the problem code from open call\n\tvar probcode = \"\";\n\tSqlRecordSetObj = new SqlQuery;\n\tSqlRecordSetObj.Query(\"SELECT probcode FROM opencall WHERE callref = \" + nCallRef, \"sw_systemdb\");\n\tif(SqlRecordSetObj.Fetch())\n\t{\n\t\tprobcode = SqlRecordSetObj.GetValueAsString(0);\n\t}\n\tSqlRecordSetObj.Reset();\n\t\n\treturn probcode;\n}\n\n\/\/-- Set survey ability\/visibility on the form\nfunction SetSurveyDefaults()\n{\n\tapp._een(cb_surveys , true);\n\tapp._een(flg_customersurvey , true);\n\tapp._ete(flg_customersurvey , \"0\");\n\t\t\t\n\t\/\/-- call function to load listbox\n\tif(!_swdoc.bLogMode)initSurveyList();\n     \t\t\n\t\/\/-- default setting\n\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_SETSENDSURVEY))\n\t{\n\t\tapp._ete(flg_customersurvey , \"1\");\n\t}\n\t\t\n\t\/\/-- not allowed to change send survey options\n\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_DISABLESENDSURVEY))\n\t{\n\t\tapp._een(flg_customersurvey , false);\n\t}\n\t\t\t\n\tapp._een(cb_surveys , (flg_customersurvey.text == \"1\"));\n}\n\nfunction getReadableDatefromEpoch(dt_epochdate)\n{\n\tvar strFormattedDate = \"\";\n\tvar theDate = new Date(dt_epochdate);\n\tdateString = theDate.toString();\n\tarrDateStr = dateString.split(\" \");\n\tstrFormattedDate = arrDateStr[2] + \"\/\" + getNumericMonth(arrDateStr[1]) + \"\/\" + arrDateStr[3] + \" \" + arrDateStr[4].substr(0,2) + \":\";\n\tstrFormattedDate += arrDateStr[4].substr(3,2) + \":\" + arrDateStr[4].substr(6,2);\n\treturn strFormattedDate;\n}\n\nfunction getNumericMonth(strMonth)\n{\n\tvar arrMonth = new Array(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\");\n\tfor(i=0; i<arrMonth.length; i++)\n\t{\n\t\tif(strMonth == arrMonth[i])\n\t\t\treturn i+1;\n\t}\n}\n\nfunction replaceIllegalFileCharacters(strText)\n{\n\t\/\/-- This function is used to replace characters in the passed in string that \n\t\/\/-- are not suitable for use in filenames and return the modified string \n\t\n\tstrOutput = strText;\n\tstrReplacement = \"-\";\n\tvar i = 0;\n\t\n\twhile(i < strOutput.length)\n\t{\n\t\tstrOutput = strOutput.replace('\/', strReplacement);\n\t\tstrOutput = strOutput.replace(':', strReplacement);\n\t\tstrOutput = strOutput.replace('*', strReplacement);\n\t\tstrOutput = strOutput.replace('?', strReplacement);\n\t\tstrOutput = strOutput.replace('\"', strReplacement);\n\t\tstrOutput = strOutput.replace('\\'', strReplacement);\n\t\tstrOutput = strOutput.replace('<', strReplacement);\n\t\tstrOutput = strOutput.replace('>', strReplacement);\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn strOutput;\n}"},{"name":"cb_callaction_OnValueChanged","code":"cb_callaction_OnValueChanged(strValue)\n{\n\t\/\/-- set mode and then setup defaults for that mode\n\t_swdoc.boolClosing = (strValue!=\"Resolve Call\");\n\t_swdoc.setup_checkbox_flags();\n\n}"},{"name":"dt_actiontime_OnValueChanged","code":"dt_actiontime_OnValueChanged(strValue)\n{\n\t_swdoc.bDateTimeChanged = true;\n}"},{"name":"flg_customersurvey_OnValueChanged","code":"flg_customersurvey_OnValueChanged(strValue)\n{\n\t\/\/ TODO: Add your event handler code here\n\tvar bChecked = flg_customersurvey.text == \"1\";\n\tapp._een(cb_surveys , bChecked);\n\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- This value is set when a field value has been changed.\n\t\/\/-- We check this variable on from closing to see if there are any data changes that need to be saved.\n\t_swdoc.bFormFieldChanged = true;\n\n\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{}}]}}}