{"espForm":{"configuration":{"settings":{"name":"EfIssueForm","title":"EfIssueForm","options":{"allowResize":"true","showMenubar":"true","showToolbar":"true","showStatusBar":"false"}},"tables":{"table":{"name":"swissues","type":"Main Details Table","flags":"5"}},"javascript":{"methods":{"method":[{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t\/\/F0105345 - Disable Issues within ITSM application\n\t\/\/Can be re-enabled by adding String value to Application Settings Name: EnableIssues Value:Yes \n\tif(dd.GetGlobalParamAsString(\"Application Settings\/EnableIssues\") != \"Yes\")\n\t{\n\t\tMessageBox(\"Issues are not supported within this application.\", MB_ICONSTOP);\n\t\treturn false;\n\t}\n\n\t\/\/-- Default form variables\n\t_swdoc.bSaveMode = false;\n\t\n\t\/\/-- Declare and set the form title\n\t_swdoc.strFormTitle = \"Create New Issue\";\n\t\n\t\/\/-- Try to obtain the IssueRef if there is one\t\n\tif(_swdoc._form[\"Issueref\"])\n\t{\n\t\t_swdoc.swissues.issueref = _swdoc._form[\"Issueref\"];\n\t\t_swdoc.strFormTitle = \"View\/Edit Issue \" + _swdoc.swissues.issueref;\n\t\t\n\t\t_swdoc.UpdateFormFromData();\n\t\t\n\t\t\/\/-- this clears the modified flags on the _swdoc\n\t\t_swdoc.ResetModiedFlag(\"swissues\");\n\t}\n\telse \/\/Set the form field default values\n\t{\n\t\t_swdoc.swissues.issuetype = ISSUE_TYPE_HOT;\n\t\t_swdoc.swissues.status = ISSUE_STATUS_OPEN;\n\t\t_swdoc.swissues.starttimex = app.global.GetCurrentEpocTime();\n\t\t_swdoc.swissues.resolvebyx = app.global.GetCurrentEpocTime();\n\t\t_swdoc.swissues.mastercallref = 0;\n\t}\n\n\t_swdoc.SetTitle(_swdoc.strFormTitle);\n\t\n\treturn true;\n}"},{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\t\/\/-- check if the form data has been modified, if it has prompt the analyst to save changes\n\t\/\/-- and if Yes is clicked carry out a save\n\tif(_swdoc.bFormFieldChanged)\n\t{\n\t\tvar strMessage = (_swdoc.swissues.issueref.length == 0) ? \"Your issue has not yet been created, do you want to create the issue before the form is closed?\\n\\nClick Yes to create the issue and close this form\\nClick No to close this form without creating this issue\\nClick Cancel to return to this form\" : \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"There is unsaved data on this form.  Do you want to save it before closing the form?\\n\\nClick Yes to create the issue and close this form\\nClick No to close this form without saving this issue\\nClick Cancel to return to this form\";\n\t\tswitch(MessageBox(strMessage,MB_ICONQUESTION |  MB_YESNOCANCEL ))\n\t\t{\n\t\tcase IDYES:\n\t\t\tif(mainform.tb_summary.text.length > 0)\n\t\t\t{\n\t\t\t\tmainform.CreateUpdateIssue();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrMessage = (_swdoc.swissues.issueref.length == 0) ? \"You must enter an issue summary before this issue can be created\" : \"You must enter an issue summary before this issue can be saved\";\n\t\t\t\tMessageBox(strMessage, MB_ICONEXCLAMATION | MB_OK);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase IDNO:\n\t\t\tbreak;\n\t\tcase IDCANCEL:\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t\/\/Unlock calls associated to this issue\n\tvar strCommSepCallrefs = mainform.GetCommaSepCallrefsString();\n\tif(strCommSepCallrefs.length)\n\t\tapp.global.UnlockCalls(strCommSepCallrefs);\n\t\t\n\t\/\/This is undocumented, not sure what it does\n\t_swdoc.ResetData();\n\treturn true;\n}"},{"name":"(Globals)","code":"var bFormFieldChanged = false;\t\/\/This var is used to check for changes to data fields and is set to true when any \n\t\t\t\t\t\t\t\t\/\/field data is changed"},{"name":"(User Defined Functions)","code":"function AddCallsToIssue( strCommaSepCallrefs )\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function is used to add call references to an Issue \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\n\t\/\/-- Check that there is an Issue Reference to attach call to, if not then quit\n\tif(_swdoc.swissues.issueref.length == 0)\n\t\treturn false;\n\t\n\t\/\/-- Check that we have a HelpdeskSession connection to attach the call, if not then quit\t\n\tvar con = new HelpdeskSession;\n\tif(!con.Connect())\n\t{\n\t\treturn false;\n\t}\n\t\n\t\/\/-- Add the call(s) to the issue, if this fails then close the connection and quit\n\tif(!con.AddCallToIssue(_swdoc.swissues.issueref, strCommaSepCallrefs))\n\t{\n\t\tcon.Close();\n\t\treturn false;\n\t}\n\t\n\t\/\/-- If call successfully added to Issue then we close the HelpdeskSession connection here\n\tcon.Close();\n\t\t\n\treturn true;\n}\n\nfunction LogAndAddCustomerCall()\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function logs a new call based on the details contained in the master\t\t\/\/\n\t\/\/ call for a customer selected through a Tree Browser dialog and then assigns this \/\/\n\t\/\/ to the Issue\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\n\t\/\/-- Check that the issue has a master call reference set as this will form the basis of the \n\t\/\/-- new call we will be logging and linking to this issue.  If no master call reference is\n\t\/\/-- is set then prompt the analyst that one must be set before carrying out this action.\n\tif(_swdoc.swissues.mastercallref == 0)\n\t{\n\t\tvar strMessage  = \"There is no master call set for this issue, this is used to populate the call logged for this customer.\\r\\n\";\n\t\t    strMessage += \"Select a master call reference from the calls in the issue and try again.\";\n\t\tMessageBox(strMessage);\n\t\treturn false;\n\t}\n\t\n\t\/\/-- Identify the SQL Tree Browser Form we should be opening from the setting in the DD\n\t\/\/-- If there is no value specified in the DD then default to the \"Customer\" form\n\tvar strPickCustomerForm = dd.GetGlobalParamAsString(\"Issue View\/PickCustomerForm\");\n\n\tif(strPickCustomerForm.length == 0)\n\t\tstrPickCustomerForm = \"Customer\";\n\t\n\t\n\tvar arrSqlTreeForms = dd.GetSqlTreeBrowsersFormParameters(strPickCustomerForm );\n\n\t\/\/-- Get the CustomerID of the chosen customer from the Sql Tree Browser\n\tvar strCustId = app.global.OpenSqlTreeBrowserForm(strPickCustomerForm, true, true);\n\tif(strCustId.length == 0)\n\t\treturn false;\n\t\n\t\/\/-- Check we have an open HelpdeskSession connection\n\tvar con = new HelpdeskSession;\n\tif(!con.Connect())\n\t{\n\t\treturn false;\n\t}\n\t\n\t\/\/-- Log the new call against the selected customerID and associate it to this issue, if the\n\t\/\/-- action fails then close the HelpdeskSession connection and quit\n\tif(!con.AddCustomerToIssue(_swdoc.swissues.issueref,arrSqlTreeForms[0].table ,strCustId))\n\t{\n\t\tcon.Close();\n\t\treturn false;\n\t}\n\n\t\/\/-- If call has been successfully logged and associated to the issue then close the HelpdeskSession connection\n\tcon.Close();\n\treturn true;\n}\n\n\nfunction CloseIssue()\n{\t\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function is used to close an issue and calls associated to it\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\tif(_swdoc.swissues.issueref.length == 0)\n\t\treturn true;\n\t\t\n\tvar strCommaSepCallrefs = mainform.GetCommaSepCallrefsString();\n\t\t\n\t\/\/If there are calls associated to this Issue\n\tif(strCommaSepCallrefs.length)\n\t{\n\t\t\/\/Unlock call(s) associated to this issue\n\t\tapp.global.UnlockCalls(strCommaSepCallrefs);\n\t\t\n\t\t\/\/-- Line Added DavidJH - 21.06.2005\n\t\t\/\/-- Accept any unassigned or unaccepted calls (if there are any) to enable the issue to be closed\n\t\tmainform.ManuallyAcceptLinkedIssueCalls();\n\t\t\n\t\t\/\/-- If call(s) cannot be closed then quit\n\t\tif(!_swdoc.CanCloseCalls(strCommaSepCallrefs))\n\t\t\treturn false\n\t\t\n\t\t\/\/-- Set the text to be used in the resolve\/close form\n\t\tvar strCloseUpdateText = \"Call closed as part of issue \" + _swdoc.swissues.issueref;\n\t\t\t\n\t\t\/\/-- Open the resolve\/close form with the text set above (strCloseUpdateText) and the Issue Ref to be closed\t\n\t\tapp.OpenCallResolveCloseForm(strCommaSepCallrefs, strCloseUpdateText, strCloseUpdateText, \"\", _swdoc.swissues.issueref);\n\t\treturn true\n\t}\n\telse \/\/-- No calls associated to this Issue so we simply set Issue Status to \"Closed\" and save change\n\t{\n\t\t_swdoc.swissues.status = ISSUE_STATUS_CLOSED;\n\t\treturn mainform.CreateUpdateIssue();\n\t}\n\t\n\treturn false\n}\n\nfunction CanCloseCalls( CallrefsCommaString )\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function checks a comma separated list of Call Refs and determines which ones \/\/\n\t\/\/ cannot be closed as they do not have a status from which a call can be closed. The \/\/\n\t\/\/ analyst will be alerted with a list of call refs that cannot be closed.\t\t\t  \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\tvar strInvalidCallRefs = \"\";\n\tvar strValidCloseCallStatuses = \"1,2,3,5,6,7,8,9,10,11,12,13,14\";\n\t\n\tfor(var i=0; i < mainform.sl_issuecallslist.rowCount(); i++)\n\t{\n\t\tvar strStatus = mainform.sl_issuecallslist.GetItemTextRaw(i,1);\n\t\tstrStatus++;\n\t\tstrStatus--;\n\t\tswitch(strStatus)\n\t\t{\n\t\t\tcase CS_PENDING:\n\t\t\tcase CS_UNASSIGNED:\n\t\t\tcase CS_UNACCEPTED:\n\t\t\tcase CS_OFFHOLD:\n\t\t\tcase CS_ONHOLD:\n\t\t\tcase CS_RESOLVED:\n\t\t\tcase CS_ESCALATEDOWNER:\n\t\t\tcase CS_ESCALATEDGROUP:\n\t\t\tcase CS_ESCALATEDALL:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t{\n\t\t\t\tif(strInvalidCallRefs.length)\n\t\t\t\t\tstrInvalidCallRefs += \", \";\n\t\t\t\t\t\n\t\t\t\tstrInvalidCallRefs += mainform.sl_issuecallslist.GetItemText(i,0);\n\t\t\t\tstrInvalidCallRefs += \" (\" + mainform.sl_issuecallslist.GetItemText(i,1) + \")\";\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(strInvalidCallRefs.length)\n\t{\n\t\tMessageBox(\"The following calls cannot be closed due to them having invalid statuses. Please modify the(se) calls so that they can be closed or detach them from the issue before attempting to close it again.\\n(the valid statuses for closing calls attached to issues are \" \n\t\t+ strValidCloseCallStatuses + \"\\r\\n\\r\\n\" + strInvalidCallRefs, MB_ICONSTOP);\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\n\nfunction PopulateFromCall( nCallref )\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function is used to retrieve either the call description or the issue description  \/\/\n\t\/\/ and assuming one of these is found we save this to a variable for use in populating the \/\/\n\t\/\/ summary and description fields in mainform.onFormLoaded.\t\t\t\t\t\t\t\t   \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\t\/\/-- get the status and class for our callref\/s\n    var SqlRecordSetObj\t= new SqlQuery;\n    if(!SqlRecordSetObj.Query(\"SELECT prob_text FROM opencall WHERE callref = \" + nCallref, \"sw_systemdb\"))\n    {\n     \t\/\/-- failed - check if we have an issue\n     \tif(_swdoc.strIssueref.length == 0)\n     \t{\n     \t\tMessageBox(\"Unable to query call status values. Progress not possible.\", MB_ICONSTOP);\n     \t\treturn false;\n     \t}\n    }\n    \n    \/\/-- set the variable for use later in retrieving the issue summary and description\n    if(SqlRecordSetObj.Fetch())\n    {\n    \t_swdoc.swissues.description = SqlRecordSetObj.GetValueAsString(0);\n    \treturn true;\n    }\n    \n\treturn false;\n}\n\n\nfunction RemoveCalls( strCommaSepCallrefs )\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function removes calls from an Issue \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\t\/\/-- If there is no Issue Ref to remove calls from then quit\n\tif(_swdoc.swissues.issueref.length == 0)\n\t\treturn false;\n\n\tvar bRetVal = false;\n\n\t\/\/-- Check we have an open HelpdeskSession connection, if not we quit\n\tvar con = new HelpdeskSession;\n\tif(!con.Connect())\n\t\treturn false;\n\t\t\n\t\/\/-- Remove call(s) from the Issue\n\tif(con.RemoveCallFromIssue(_swdoc.swissues.issueref, strCommaSepCallrefs))\n\t{\n\t\t\n\t}\n\treturn true;\n}"},{"name":"OnLoadRecord","code":"OnLoadRecord(strTable, strKeyValue)\n{\n\t\/\/-- Attempt to the load the record data from cache to avoid the time delay \n\t\/\/-- in retrieving the data from the database.  If this is not successful then \n\t\/\/-- we return true to continue with the load from the database\n\tif(_swdoc.LoadRecordData(\"syscache\", strTable, strKeyValue))\n\t\treturn false;\n\n\treturn true;\n\n\n\treturn true;\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"550","height":"339","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"tb_issuetype","type":"Field"},"appearance":{"index":"0","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"53","left":"11","right":"218","bottom":"70"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"data":{"binding":"swissues.issuetype"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List (Numeric Mode)","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"HOT^1|KNOWN^2|","defaultValue":"1"}}},{"general":{"name":"dt_starttime","type":"Field"},"appearance":{"index":"1","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"53","left":"227","right":"387","bottom":"70"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"data":{"binding":"swissues.starttimex"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0"}}},{"general":{"name":"tb_mastercallro","type":"Field"},"appearance":{"index":"2","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"90","left":"11","right":"218","bottom":"107"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"true","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"F0000016^16|"}}},{"general":{"name":"dt_resolvetime","type":"Field"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"90","left":"227","right":"387","bottom":"107"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"data":{"binding":"swissues.resolvebyx"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"true","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0"}}},{"general":{"name":"tb_summary","type":"Field","group":"Tab1:0"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"196","left":"12","right":"537","bottom":"213"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"tb_issuedescription","type":"Field","group":"Tab1:0"},"appearance":{"index":"5","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"233","left":"12","right":"537","bottom":"329"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"Rect1","type":"Rectange"},"appearance":{"index":"6","backgroundColor":"#ccecff","foregroundColor":"#000000","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"-10","left":"0","right":"555","bottom":"344"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#336699"}}},{"general":{"name":"Rect2","type":"Rectange"},"appearance":{"index":"7","backgroundColor":"#f8f8f8","foregroundColor":"#003366","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"31","left":"3","right":"396","bottom":"155"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#ccecff"}}},{"general":{"name":"Rect2","type":"Rectange"},"appearance":{"index":"8","backgroundColor":"#f8f8f8","foregroundColor":"#003366","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"31","left":"400","right":"545","bottom":"155"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#ccecff"}}},{"general":{"name":"dt_resolvedtime","type":"Field"},"appearance":{"index":"9","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"129","left":"227","right":"387","bottom":"146"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"data":{"binding":"swissues.resolved"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"true","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0"}}},{"general":{"name":"flg_markpublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"33","left":"406","right":"542","bottom":"51"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"data":{"binding":"swissues.flags"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Issue to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"Tab1","type":"TabControl","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"11","caption":"Tab1","backgroundColor":"#ded7ce","foregroundColor":"#f7f3ef","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"158","left":"2","right":"548","bottom":"339"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"tabStyle":"Top","tabSize":"19","items":{"item":[{"name":"Issue Details","properties":"56=#d1e0ee|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#d1e0ee"}}},{"name":"Calls","properties":"56=#ffcc66|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#ffcc66"}}},{"name":"Affected Customers","properties":"56=#c2cca2|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#c2cca2"}}}]},"selectedTextFont":{"@size":"8","#text":"Arial"},"selectedTextColor":"#000000","deselectedTextColor":"#000000","tabSlopeLeft":"2","tabSlopeRight":"2","deselectedTabHeightOffset":"1","tabSpacing":"0","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"tabStyle":"2"}}},{"general":{"name":"btnCreateIssue","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"12","caption":"Save Changes","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"4","left":"16","right":"113","bottom":"27"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Issue;IconIndex=0"}}},{"general":{"name":"btnAddCall","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"13","caption":"Add Call(s) to Issue","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"4","left":"115","right":"236","bottom":"27"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Issue;IconIndex=1"}}},{"general":{"name":"btnRemoveCall","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"14","caption":"Remove Call(s)","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"4","left":"240","right":"350","bottom":"27"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Issue;IconIndex=2"}}},{"general":{"name":"btnAddCusomer","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"15","caption":"Log Call and Add","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"4","left":"342","right":"467","bottom":"27"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Issue;IconIndex=3"}}},{"general":{"name":"btnCloseIssue","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"16","caption":"Close Issue","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"4","left":"456","right":"547","bottom":"27"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Issue;IconIndex=4"}}},{"general":{"name":"lbl_starttime","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"17","caption":"Start Time","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"37","left":"225","right":"337","bottom":"51"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_resolveby","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"18","caption":"Resolve by","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"74","left":"225","right":"287","bottom":"86"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_issuetype","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"19","caption":"Issue Type","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"37","left":"9","right":"82","bottom":"49"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_summary","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:0"},"appearance":{"index":"20","caption":"Summary","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"180","left":"11","right":"67","bottom":"194"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_description","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:0"},"appearance":{"index":"21","caption":"Description","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"215","left":"12","right":"212","bottom":"229"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_resolvedtime","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"22","caption":"Resolved:","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"113","left":"224","right":"337","bottom":"127"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"Rect2","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"23","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"0"},"borderStyle":"None","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"4","left":"3","right":"545","bottom":"27"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#e2f1ff"}}},{"general":{"name":"tb_mastercall","type":"Field","group":"Tab1:1"},"appearance":{"index":"24","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"314","left":"438","right":"538","bottom":"329"},"scaling":{"top":"100","left":"100","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"true","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"F0000016^16|"}}},{"general":{"name":"lbl_mastercall","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"25","caption":"Master Call:","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"297","left":"434","right":"494","bottom":"311"},"scaling":{"top":"100","left":"100","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"btn_SetMasterCall","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"26","caption":"Set Master Call","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"189","left":"438","right":"538","bottom":"213"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"27","caption":"Master Call Reference Number","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"74","left":"8","right":"171","bottom":"88"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"sl_issuecallslist","type":"SqlTable","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"false","horizontalGridLines":"false","autoLoad":"true","allowMultiSelect":"false"},"group":"Tab1:1"},"appearance":{"index":"28","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"189","left":"12","right":"428","bottom":"329"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"column":"callref"},"name":"Call Reference","width":"120","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"column":"status"},"name":"Status","width":"120","image":"-1","dataColumn":"1"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"column":"cust_name"},"name":"Customer Name","width":"120","image":"-1","dataColumn":"2"}]},"sortColumn":"2","sortDescending":"true","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"sqlSource":"syscache","table":"opencall","listFilter":"issueref = 'IR200603310002'"}}},{"general":{"name":"sl_affectedcustomerslist","type":"SqlTable","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"false","horizontalGridLines":"false","autoLoad":"true","allowMultiSelect":"false"},"group":"Tab1:2"},"appearance":{"index":"29","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"189","left":"12","right":"536","bottom":"329"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"column":"cust_id"},"name":"Customer ID","width":"120","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","properties":{"column":"cust_name"},"name":"Customer Name","width":"120","image":"-1","dataColumn":"1"}]},"sortColumn":"-1","sortDescending":"false","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"sqlSource":"syscache","table":"opencall","listFilter":"issueref = 'IR200603310002' GROUP BY cust_id"}}}]},"javascript":{"methods":{"method":[{"name":"btnAddCall_OnPressed","code":"btnAddCall_OnPressed()\n{\n\t\/\/-- Create a new Add Calls to Dialog Object passing in the Issue Object \n\t\/\/-- and a boolean value to indicate that the calls will be added to the issue object\n\tvar dlg = new AddCallsToIssueDialog();\n\t\n\t\/\/-- This opens an Add Calls dialog and will add the selected calls to the supplied Issue Object \n\t\/\/-- returning \"IDOK\" if calls were succesfully added or \"IDCANCEL\" if the addition failed or the \n\t\/\/-- user cancelled the operation\n\tif(dlg.Open() != IDOK)\n\t\treturn;\n\t\t\n\tif(dlg.selCount)\n\t{\n\t\tvar arrPickedCalls = dlg.arrSelectedCallrefs;\n\t\t\n\t\tif(_swdoc.AddCallsToIssue(arrPickedCalls.toString()))\n\t\t{ \n\t\t\t\/\/-- This call will repopulate the Master Call drop down box with all calls that are linked to this issue,\n\t\t\t\/\/-- it will then enable or disable the drop down depending on whether the analyst has rights \n\t\t\t\/\/-- to modify issues\n\t\t\tReloadRelatedDataLists();\n\t\t\t\n\t\t\t\/\/ If there is only one call now in the list then it must be the one we have just added so\n\t\t\t\/\/ we will make this the master call....\n\t\t\t\/\/ -- OR --\n\t\t\t\/\/ If there is more than one call in the list but the mastercall record is not set then make\n\t\t\t\/\/ the lowest numbered call the master call record\n\t\t\tif((sl_issuecallslist.rowCount() == 1) || ((sl_issuecallslist.rowCount() > 1) && ((tb_mastercall.text == \"\") || (tb_mastercall.text == \"<Undefined>\"))))\n\t\t\t{\n\t\t\t\t_ete(tb_mastercall , sl_issuecallslist.GetItemText(0,0));\n\t\t\t\t_ete(tb_mastercallro , sl_issuecallslist.GetItemText(0,0));\n\t\t\t\t_swdoc.swissues.mastercallref = sl_issuecallslist.GetItemTextRaw(0,0);\n\t\t\t\tbFormFieldChanged = true;\n\t\t\t}\t\t\n\t\t}\n\t\t\n\t\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\t\/\/-- issue form buttons as required\n\t\tUpdateBtnState();\n\t}\n}"},{"name":"btnRemoveCall_OnPressed","code":"btnRemoveCall_OnPressed()\n{\n\t\/\/-- Set a control variable to determine if we are removing the master call, default it to false\n\tvar bRemovingMaterCall = false;\n\t\n\tvar strcommasepCallsrefs = \"\";\n\t\n\t\/\/-- Iterate through the list of calls associated to an issue\n\tfor(x=0; x<sl_issuecallslist.rowCount();x++)\n\t{\n\t\t\/\/-- If the call in the list is selected\n\t\tif(sl_issuecallslist.IsRowSelected(x))\n\t\t{\n\t\t\t\/\/-- If commasepCallrefs is not empty we add a comma before accepting the next callref\n\t\t\tif(strcommasepCallsrefs.length)\n\t\t\t\tstrcommasepCallsrefs += \",\";\n\t\t\t\/\/-- Get the callref for the current row in the Issue Calls List\t\n\t\t\tvar ItemText = sl_issuecallslist.GetItemText(x, 0) ; \n\t\t\t\/\/-- If the callref matches the master call ref on the form e.g. \"F0000001\"=\"F0000001\" then \n\t\t\t\/\/-- we must be removing the master call and set the flag accordingly\n\t\t\t\n\t\t\tif(tb_mastercall.text == ItemText)\n\t\t\t\tbRemovingMaterCall = true;\n\n\t\t\tstrcommasepCallsrefs += sl_issuecallslist.GetItemTextRaw(x, 0);\n\t\t}\t\n\t}\n\n\t\/\/-- If there were Calls to be removed and the call to remove them was successful then continue\n\tif(strcommasepCallsrefs.length && _swdoc.RemoveCalls(strcommasepCallsrefs))\n\t{\n\t\tReloadRelatedDataLists();\n\t\t\n\t\t\/\/-- This call will repopulate the Master Call drop down box with all calls that are linked to this issue,\n\t\t\/\/-- it will then enable or disable the drop down depending on whether the analyst has rights \n\t\t\/\/-- to modify issues\n\t\t\n\t\tif(bRemovingMaterCall)\n\t\t{\n\t\t\tif(sl_issuecallslist.rowCount())\n\t\t\t{\n\t\t\t\t_ete(tb_mastercall , sl_issuecallslist.GetItemText(0,0));\n\t\t\t\t_ete(tb_mastercallro , sl_issuecallslist.GetItemText(0,0));\n\t\t\t\t\n\t\t\t\tstrCallref = sl_issuecallslist.GetItemTextRaw(0,0);\n\t\t\t\tstrCallref++;\n\t\t\t\tstrCallref--;\n\t\t\t\t_swdoc.swissues.mastercallref = strCallref;\n\t\t\t\tbFormFieldChanged = true;\n\t\t\t\t\n\t\t\t\tUpdateIssueData();\n\t\t\t\t\n\t\t\t\tbFormFieldChanged = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_swdoc.swissues.mastercallref = 0;\n\t\t\t\t_ete(tb_mastercall , \"\");\n\t\t\t\t_ete(tb_mastercallro , \"\");\n\t\t\t\tbFormFieldChanged = true;\n\t\t\t\tUpdateIssueData();\n\t\t\t\tbFormFieldChanged = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\t\/\/-- issue form buttons as required\n\t\tUpdateBtnState();\n\t}\n}"},{"name":"(User Defined Functions)","code":"function UpdateIssueData()\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function is used to create a new issue or to update an existing issue. \t\t\t\/\/\n\t\/\/ An issue will be created if no Issue reference is found or if an issue reference is\t\/\/\n\t\/\/ found then that issue will be updated\t\t\t\t\t\t\t\t\t\t\t\t\/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\t\/\/-- Validate that mandatory fields are completed, this triggers the OnPreValidate and OnValidate events\n\tif(!_swdoc.ValidateFormData())\n\t\treturn false;\n\t\t\n\t\/\/-- Get a helpdesk connection onbject\n\tvar con = new HelpdeskSession;\n\tif(!con.Connect())\n\t{\n\t\treturn false;\n\t}\n\n\t\/\/-- If an issue is set in the record already then we will be updating an issue\n\tif(_swdoc.swissues.issueref.length)\n\t{\n\t\t\/\/-- Advise the server of the data update operation for it to start the transaction\n\t\tif(con.BeginUpdateIssue(_swdoc.swissues.issueref))\n\t\t{\n\t\t\t\/\/-- Send data to server\n\t\t\tif(SendIssueChanges(con))\n\t\t\t{\n\t\t\t\t\/\/-- Commit transaction data\n\t\t\t\tif(!con.Commit())\n\t\t\t\t{\n\t\t\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\t\/\/-- report error\n\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\n\t\t}\n\t}\n\telse\n\t{\n\t\t\/\/-- We need to create the issue\n\t\t\/\/-- Advise the server of the create operation to for it to start the transaction\n\t\tif(con.BeginCreateIssue())\n\t\t{\n\t\t\t\/\/-- send data to server\n\t\t\tif(SendIssueChanges(con))\n\t\t\t{\t\n\t\t\t\t\/\/-- Commit transaction data\n\t\t\t\tif(!con.Commit())\n\t\t\t\t{\n\t\t\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t\/\/-- Having created the new issue, we retrieve its properties using GetResultInfo() into\n\t\t\t\t\/\/-- the array arrResultInfo from which we can obtain the issue reference\n\t\t\t\tvar arrResultInfo = con.GetResultInfo();\n\t\t\t\t\n\t\t\t\tif(arrResultInfo && arrResultInfo.length)\n\t\t\t\t{\n\t\t\t\t\t\/\/set the issue field value\n\t\t\t\t\t_swdoc.swissues.issueref = arrResultInfo[0].issueref;\n\t\t\t\t\t\n\t\t\t\t\t\/\/-- set the save mode boolean flag\n\t\t\t\t\t_swdoc.bSaveMode = true;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/-- report error\n\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\nfunction SendIssueChanges( con )\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function sends the data from the summary and description fields plus any     \/\/\n\t\/\/ other modified issue form fields to the database.  Note: Although the data values \/\/\n\t\/\/ are sent to the database from this function, these values are not committed to \t \/\/\n\t\/\/ the database here, the commit() call to save the data to the database is called \t \/\/\n\t\/\/ from the UpdateIssueData() function                        \t\t\t\t\t\t \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\n\t\/\/-- Collect description field data from the two elements tb_summary and tb_issuedescription content\n\tvar strTempDesc = tb_summary.text;\n\tstrTempDesc += \"\\r\\n\";\n\tstrTempDesc += tb_issuedescription.text;\n\tif(_swdoc.swissues.description != strTempDesc)\n\t{\n\t\t_swdoc.swissues.description = strTempDesc;\n\t}\n\t\n\t_swdoc.swissues.dd = dd.Name;\n\t_swdoc.swissues.suppgroup = app.session.groupID;\n\t\t\t\n\tvar bSendSuccess = true;\n\n\t\/\/-- Send each bound value in the swissues table that has been modified\n\tif(rec = _swdoc.GetRecord(\"swissues\"))\n\t{\n\t\tvar nColCount = rec.GetCount();\n\t\tfor(x = 0; x < nColCount; x++)\n\t\t{\n\t\t\tif(!rec.IsModified(x))\n\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\n\t\t\tif(!con.SendValue(\"swissues.\" + rec.GetColumnName(x), rec.GetValue(x)))\n\t\t\t{\n\t\t\t\tbSendSuccess = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bSendSuccess;\n}\n\nfunction ReloadRelatedDataLists()\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function is used to refresh the contents of the Issue Calls and Affected \/\/\n\t\/\/ Customers Sql Lists on the Calls and Affected Customers tabs\t\t\t\t\t \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\t\t\/\/-- Empty the Issue Calls List\n\t\tsl_issuecallslist.Reset();\n\t\t\/\/-- Empty the Affected Customers List\n\t\tsl_affectedcustomerslist.Reset();\n\t\t\n\t\t\/\/-- If there are calls associated to this issue then continue\n\t\tif(_swdoc.swissues.issueref.length)\n\t\t{\n\t\t\t\/\/-- Filter the associated issue calls list\n\t\t\t_slf(sl_issuecallslist , \"issueref = '\" + _swdoc.swissues.issueref + \"'\");\n\t\t\t\t\t\t\n\t\t\t\/\/-- Filter the affected customers list\n\t\t\t_slf(sl_affectedcustomerslist , \"issueref = '\" + _swdoc.swissues.issueref + \"' GROUP BY cust_id\");\n\t\t}\n}\n\nfunction UpdateBtnState()\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function checks the rights of the logged on analyst and the current state \/\/\n\t\/\/ of the issue and sets the availability of each of the buttons accordingly      \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\t\/\/-- If analyst has rights to modify issues or if the issue is being created then\n\t\/\/-- enable the \"Log Call and Add\" button\n\tif(!app.session.HaveRight(ANALYST_RIGHT_B_GROUP,ANALYST_RIGHT_B_CANMODIFYISSUES))\n\t{\n\t\t_een(btnAddCusomer , false);\n\t}\n\telse\n\t{\t\n\t\tif((_swdoc.swissues.issueref.length) && (tb_mastercall.text != \"\") && (tb_mastercall.text != \"<Undefined>\"))\n\t\t\t_een(btnAddCusomer , true)\n\t\telse\n\t\t\t_een(btnAddCusomer , false);\n\t}\n\t\n\t\/\/-- If analyst has rights to create issues or if the analyst is modifying\n\t\/\/-- an existing issue then show the \"create issue\" button which in the case\n\t\/\/-- of a modification will have the button text reading \"Save Changes\"\n\tif(!app.session.HaveRight(ANALYST_RIGHT_B_GROUP,ANALYST_RIGHT_B_CANCREATEISSUES))\n\t{\n\t\t_een(btnCreateIssue , false);\n\t}\n\telse\n\t{\n\t\tif(_swdoc.swissues.issueref.length)\n\t\t{\n\t\t\tif(_swdoc.bFormFieldChanged)\n\t\t\t\t_een(btnCreateIssue , true);\n\t\t\telse\n\t\t\t\t_een(btnCreateIssue , false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(tb_issuedescription.text.length > 0)\n\t\t\t\t_een(btnCreateIssue , true);\n\t\t\telse\n\t\t\t\t_een(btnCreateIssue , false);\n\t\t}\n\t}\n\t\n\t\/\/-- This sets the test on the Create Issue\" button to \"Save Changes\" if changes\n\t\/\/-- have been made to the data and then enables it\n\tif(_swdoc.swissues.issueref.length)\n\t{\n\t\t_ete(btnCreateIssue , \"Save Changes\");\n\t\t\n\t\tif(_swdoc.bFormFieldChanged)\n\t\t{\n\t\t\t_een(btnCreateIssue , true);\n\t\t}\n\t}\n\t\n\t\/\/-- If the analyst has rights to close issues and the issue is created then show the close button\n\tif(!app.session.HaveRight(ANALYST_RIGHT_B_GROUP,ANALYST_RIGHT_B_CANCLOSEISSUES))\n\t{\n\t\t_een(btnCloseIssue , false);\n\t}\n\telse\n\t{\n\t\t_een(btnCloseIssue , (_swdoc.swissues.issueref.length) ? true : false);\n\t}\n\n\t\/\/--If the analyst has rights to modify issues and one or more calls associated \n\t\/\/-- to the issue are selected then enable the \"Remove Call\" button\n\tif(!app.session.HaveRight(ANALYST_RIGHT_B_GROUP,ANALYST_RIGHT_B_CANMODIFYISSUES))\n\t{\n\t\t_een(btnRemoveCall , false);\n\t}\n\telse\n\t{\n\t\tif(!_swdoc.swissues.issueref.length)\n\t\t{\n\t\t\t_een(btnRemoveCall , false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar bEnable = false;\n\t\t\tfor(x=0;x < sl_issuecallslist.rowCount(); x++)\n\t\t\t{\n\t\t\t\tif(sl_issuecallslist.IsRowSelected(x))\n\t\t\t\t{\n\t\t\t\t\tbEnable = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t_een(btnRemoveCall , bEnable);\n\t\t}\n\t}\n\t\n\t\/\/-- If the analyst has rights to modify issues and the issue is fully created the\n\t\/\/-- \"Add Call to Issue\" button is enabled.\n\tif(_swdoc.swissues.issueref.length \n\t\t&& app.session.HaveRight(ANALYST_RIGHT_B_GROUP,ANALYST_RIGHT_B_CANMODIFYISSUES))\n\t\t_een(btnAddCall , true);\n\telse\n\t\t_een(btnAddCall , false);\n}\n\nfunction ManuallyAcceptLinkedIssueCalls()\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ -- New Code Added - DavidJH - 21.06.2005\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \/\/\n\t\/\/ This function is called from _swdoc.CloseIssue() as part of the process of closing an issue. \/\/ \n\t\/\/ This function has been added to check if any calls associated to this issue currently have the \/\/\n\t\/\/ status \"unassigned\" or \"unaccepted in which case they should be implicitly accepted by the     \/\/\n\t\/\/ analyst carrying out the operation before we close the call(s).  This resolves the problem     \/\/\n\t\/\/ where an issue and its related calls would fail to be closed when any one or more calls have   \/\/\n\t\/\/ an \"unassigned\" or \"unaccepted\" status\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\n\t\/\/-- Iterate through the list of calls associated to the issue\n\tfor(x=0; x<sl_issuecallslist.rowCount();x++)\n\t{\n\t\t\/\/-- Get numeric callref from the current row in the Issue Calls List\n\t\tvar nCallRef = sl_issuecallslist.GetItemTextRaw(x, 0) ;\n\t\tnCallRef++;\n\t\tnCallRef--;\n\t\t\n\t\t\/\/-- Get the call status string (e.g. \"Unaccepted\") for the current row in the Issue Calls List\n\t\tvar strCallStatus = sl_issuecallslist.GetItemTextRaw(x, 1) ;\n\t\t\n\t\t\/\/-- If the call is currently unassigned or unaccepted then change the call status so that \n\t\t\/\/-- the call is implicitly accepted by the logged on analyst closing the issue\n\t\t\n\t\t\/\/-- NWJ - accept all calls that are not resolved or closed already\n\t\tif((strCallStatus != 6) || (strCallStatus < 15 ))\n\t\t{\n\t\t\tvar swHDSession = new HelpdeskSession;\n\t\t\t\n\t\t\tif(swHDSession.Connect()) \n\t\t\t{\n\t\t\t\tswHDSession.AcceptCall(nCallRef);\n\t\t\t\tswHDSession.Close();\n\t\t\t}\n\t\t} \n\t}\n}\n\nfunction CreateUpdateIssue()\n{\t\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function is called from the Create Issue button and controls the creation of a new    \/\/\n\t\/\/ issue or the update of an existing issue.  This function calls UpdateIssueData() to create \/\/\n\t\/\/ or update the issue data.  If the action was to create an Issue then following successful  \/\/\n\t\/\/ creation this function carries out updates to the form display title and buttons etc. to   \/\/\n\t\/\/ reflect that the issue has now been created.  Lastly the button states are refreshed to \t  \/\/\n\t\/\/ ensure that the correct buttons are displayed for the analyst\t\t\t\t\t\t\t  \/\/\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\tvar bNewIssueCreation = (_swdoc.swissues.issueref.length == 0);\n\t\n\t\/\/-- This call will save the issue details from the object\n\tif(mainform.UpdateIssueData())\n\t{\n\t\t\/\/-- If we have just created the issue then run this code to update the form title and buttons etc\n\t\tif(bNewIssueCreation)\n\t\t{\n\t\t\t\/\/-- Try to get an array of any callrefs associated to this issue\n\t\t\tif(_swdoc._form[\"callrefs\"])\n\t\t\t{\n\t\t\t\tvar strCallrefsCommaString = _swdoc._form[\"callrefs\"];\n\t\t\t\tvar arrCallrefs = strCallrefsCommaString.split(\",\");\n\t\t\t\t\n\t\t\t\tif(_swdoc.AddCallsToIssue(strCallrefsCommaString))\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tvar strCallref = new String();\n\t\t\t\t\tstrCallref = tb_mastercall.text;\n\t\t\t\n\t\t\t\t\t\/\/-- Identify the numeric part of the call ref e.g. to get 12 from F0000012\n\t\t\t\t\tvar nCallref = strCallref.substr(1, strCallref.length-1);\n\t\t\t\t\tnCallref++;\n\t\t\t\t\tnCallref--;\n\t\t\t\n\t\t\t\t\t\/\/--Set the master call ref value\n\t\t\t\t\t_swdoc.swissues.mastercallref = nCallref;\n\t\t\t\t\t\n\t\t\t\t\t\/\/-- 26.10.2005 - Set Issue owner to be the logged on analyst\n\t\t\t\t\t_swdoc.swissues.owner = app.session.analystid;\n\t\t\t\t\t\n\t\t\t\t\t\/\/-- Update the master call ref to be the one selected by the user during creation\n\t\t\t\t\t\/\/-- This code is required here because this update cannot occur until the issue\n\t\t\t\t\t\/\/-- has been created in the database\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/-- Get a helpdesk connection onbject\n\t\t\t\t\t\t\tvar con = new HelpdeskSession;\n\t\t\t\t\t\t\tif(con.Connect())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(con.BeginUpdateIssue(_swdoc.swissues.issueref))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\/\/-- Send master call ref data value to server\n\t\t\t\t\t\t\t\t\tif(con.SendNumber(\"swissues.mastercallref\", _swdoc.swissues.mastercallref) && con.SendString(\"swissues.owner\", _swdoc.swissues.owner))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\/\/con.SendString(\"swissues.owner\", _swdoc.swissues.owner);\n\t\t\t\t\t\t\t\t\t\t\/\/-- Commit transaction data\n\t\t\t\t\t\t\t\t\t\tif(!con.Commit())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\t\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\t\/\/-- report error\n\t\t\t\t\t\t\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tReloadRelatedDataLists();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\n\t\t\t\/\/26.10.2005 - Updated to set issue owner to be the logged on analyst\n\t\t\t\/\/-- Get a helpdesk connection onbject\n\t\t\t\tvar con = new HelpdeskSession;\n\t\t\t\tif(con.Connect())\n\t\t\t\t{\n\t\t\t\t\tif(con.BeginUpdateIssue(_swdoc.swissues.issueref))\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/-- Send master call ref data value to server\n\t\t\t\t\t\tif(con.SendString(\"swissues.owner\", app.session.analystid))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/-- Commit transaction data\n\t\t\t\t\t\t\tif(!con.Commit())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\t\n\t\t\t\t\t\t\/\/-- report error\n\t\t\t\t\t\tMessageBox(con.GetLastErrorStr(), MB_ICONSTOP);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\/\/-- Create a _swdoc title\n\t\t\tvar  strTitle = \"View\/Edit Issue \";\n\t\t\t\/\/-- Add the issue reference to the title\n\t\t\tstrTitle += _swdoc.swissues.issueref;\n\t\t\t\/\/-- Set the form title\n\t\t\t_swdoc.SetTitle(strTitle);\n\t\t\n\t\t\t\/\/-- Change the text of the \"Create\" button to read \"Save Issue\" if the issue has been created\n\t\t\t_ete(btnCreateIssue , \"Save Changes\");\n\t\t\t\/\/-- Change the Action Menu Item link to match the text change on the button\n\t\t\t_emt(btnCreateIssue , \"&Save Changes\");\n\t\t\t\/\/-- Disable the button so that the Save button is not available until a change has been made\n\t\t\t_een(btnCreateIssue , false);\n\t\t}\n\t\t\n\t\t_swdoc.ResetModiedFlag(\"swissues\");\n\t\t\/\/-- We have just saved the issue so we can reset the flag monitoring data field changes\n\t\t_swdoc.bFormFieldChanged = false;\n\t\t\n\t\t\n\t\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\t\/\/-- issue form buttons as required\n\t\tmainform.UpdateBtnState();\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\n\n\nfunction GetCommaSepCallrefsString()\n{\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\t\/\/ This function creates a comma separated string of the calls related to   \/\/\n\t\/\/ this issue as listed in the Sql List on the calls tab on the Issue Form. \/\/  \n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\tvar strCommaSepString = \"\";\n\tfor(var i=0; i< sl_issuecallslist.rowCount();i++)\n\t{\n\t\tstrCommaSepString += sl_issuecallslist.GetItemTextRaw(i,0) + \",\";\n\t}\n\t\n\tif(strCommaSepString.length)\n\t{\n\t\tvar strCallrefs = new String();\n\t\tstrCallrefs = strCommaSepString;\n\t\tstrCommaSepString = strCallrefs.substr(0, strCallrefs.length-1);\n\t}\n\t\n\treturn strCommaSepString;\n}\n\nfunction GetQuotedCommaSepCallrefsString(strText)\n{\n\t\/\/-- This function is used to place all call refs in a comma separated list in between quotes \n\t\/\/-- so that this value can be used in an SQL \"IN\" statement e.g. , becomes ','\n\t\n\t\/\/Declare and default the control variables\n\tstrInput = strText;\n\tstrOutput = \"\";\n\tstrReplacement = \"','\";\n\tvar strLength = strInput.length;\n\tvar i = 0;\n\tvar charValue = \"\";\n\t\n\t\/\/ Loop through each character in the supplied string\t\n\twhile(i < strLength)\n\t{\n\t\t\/\/ Select the first character in the string\n\t\tcharValue = strInput.charAt(0);\n\t\t\n\t\t\/\/ If the character is a comma then add ',' to the output string, \n\t\t\/\/ else just add the existing character to the output string\n\t\tif(charValue == \",\")\n\t\t{\n\t\t\tstrOutput += \"','\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstrOutput += charValue;\n\t\t}\n\t\t\n\t\t\/\/ Remove the checked character from the input string \t\n\t\tstrInput = strInput.substr(1, strLength);\n\t\t\n\t\t\/\/ Increment the loop\t\n\t\ti++;\n\t}\n\t\n\treturn strOutput;\n}"},{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\/\/-- If there is an Issue Ref then reload the issue calls and affected customers sql lists\n\t\/\/-- and disable the create issue button, otherwise set the button and action menu text to \"Create Issue\"\n\tif(_swdoc.swissues.issueref.length)\n\t{\n\t\tReloadRelatedDataLists();\n\t\t_een(btnCreateIssue , false);\n\t}\n\telse\n\t{\n\t\t\/\/Set up the create button\n\t\t_ete(btnCreateIssue , \"Create Issue\");\n\t\t_emt(btnCreateIssue , \"Create I&ssue\");\n\t\t\n\t\t\n\t}\n\n\t\n\t\/\/-- If Analyst has rights to modify issues\n\tif(!app.session.HaveRight(ANALYST_RIGHT_B_GROUP,ANALYST_RIGHT_B_CANMODIFYISSUES))\n\t{\t\n\t\t\/\/-- If the issue has been created\n\t\tif(_swdoc.swissues.issueref.length)\n\t\t{\t\n\t\t\t\/\/-- Disable form controls\n\t\t\t_een(tb_issuetype\t\t\t, false);\n\t\t\t_een(tb_mastercall \t\t, false);\n\n\t\t\t_een(dt_starttime\t\t\t, false);\n\t\t\t_een(dt_resolvetime\t\t, false);\n\t\t\t_een(dt_resolvedtime \t\t, false);\n\t\t\t\n\t\t\t_een(tb_summary\t\t\t, false);\n\t\t\t_een(tb_issuedescription \t, false);\n\t\t\t\n\t\t\t_een(flg_markpublic \t\t, false);\n\t\t\t\n\t\t\t_een(lbl_starttime \t\t, false);\n\t\t\t_een(lbl_resolveby \t\t, false);\n\t\t\t_een(lbl_resolvedtime \t, false);\n\t\t\t\n\t\t\t_een(lbl_issuetype \t\t, false);\n\t\t\t_een(lbl_mastercall\t\t, false);\n\t\t\t_een(btn_SetMasterCall \t, false);\n\t\t\t\n\t\t\t_een(lbl_summary\t \t\t, false);\n\t\t\t_een(lbl_description , false);\n\t\t}\n\t}\n\t\n\t\/\/-- Disable the Remove Calls Button\n\t\n\t\t_een(btnRemoveCall , false);\n\t\n\t\/\/-- Try to get an array of any callrefs associated to this issue\n\t\tstrTempCallrefsCommaString = \"\";\n\t\tif(_swdoc._form[\"callrefs\"])\n\t\t{\n\t\t\tstrTempCallrefsCommaString = _swdoc._form[\"callrefs\"];\n\t\t\tvar arrTempCallrefs = strTempCallrefsCommaString.split(\",\");\n\t\t\t\n\t\t\t_swdoc.PopulateFromCall(arrTempCallrefs[0]);\n\t\t\t_swdoc.swissues.mastercallref = arrTempCallrefs[0];\n\t\t}\n\t\n\t\/\/This code is required to populate the issue calls and affected customers lists when initally creating an issue\n\t\/\/prior to the information being stored in the database.\n\t\tif((!_swdoc.swissues.issueref.length) && (strTempCallrefsCommaString.length))\n\t\t{\n\t\t\t\/\/-- Empty the Issue Calls List and affected customer lists\n\t\t\t\tsl_issuecallslist.Reset();\n\t\t\t\tsl_affectedcustomerslist.Reset(); \t\n\t\t\t\t\t\n\t\t\t\/\/-- Filter the Calls List to show just the calls that are being associated to this issue\n\t\t\t\t_slf(sl_issuecallslist , \"callref IN (\" + strTempCallrefsCommaString + \")\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\/\/-- Filter the Affected Customers list to list just those customers who have raised the associated calls\n\t\t\t\/\/-- Note: Extended Code required below to carry out a \"distinct\" select\t\n\t\t\t\tvar SqlRecordSetObj = new SqlQuery;\n\t\t\t\tSqlRecordSetObj.Query(\"SELECT DISTINCT cust_id from opencall where callref IN (\" + strTempCallrefsCommaString + \")\",\"syscache\");\n\t\t\t\tvar str_custids = \"\";\n\t\t\t\twhile(SqlRecordSetObj.Fetch())\n\t\t\t\t{\n\t\t\t\t\tstr_custids += SqlRecordSetObj.GetValueAsString(0);\n\t\t\t\t\tstr_custids += \"','\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSqlRecordSetObj.Reset();\n\t\t\t\t\n\t\t\t\tif(str_custids.length)\n\t\t\t\t{\n\t\t\t\t\tstr_custids = str_custids.substr(0, str_custids.length-3);\n\t\t\t\t\t_slf(sl_affectedcustomerslist , \"callref IN (\" + strTempCallrefsCommaString + \") AND cust_id IN ('\" + str_custids + \"') GROUP BY cust_id\");\n\t\t\t\t}\n\t\t}\n\t\t\n\t\/\/-- Identify the Master Call Record and make it selected by default in the issue calls sql list\n\t\tvar strFormatedCallref = \"\";\n\t\tif(_swdoc.swissues.mastercallref)\n\t\t{\n\t\t\tvar strFormatedCallref = dd.tables.opencall.columns.callref.FormatValue(_swdoc.swissues.mastercallref);\n\t\t\t\n\t\t\tfor(var i=0; i< sl_issuecallslist.rowCount(); i++)\n\t\t\t{\n\t\t\t\tif(sl_issuecallslist.GetItemText(i,0) == strFormatedCallref)\n\t\t\t\t{\n\t\t\t\t\tsl_issuecallslist.SetRowSelected(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\/\/--*************** AWAITING BUG FIX F38822 - THIS CODE CAN THEN BE REMOVED ***********************--\n\t\/\/-- Reset Master Call fields if no calls are listed against this issue\n\t\/\/-- NOTE: This should only occur if a call that is linked to one Issue is then added to a second issue,\n\t\/\/-- \t   the call will be unlinked from the first issue but the master call ref for the first issue is not automatically \n\t\/\/--\t   reset.  This is used as a catch all to pick up when no calls are linked and to reset the master\n\t\/\/--       call field in swissues\n\t\n\t\tif(sl_issuecallslist.rowCount() == 0)\n\t\t\t{\n\t\t\t\t_ete(tb_mastercall , \"\");\n\t\t\t\t_swdoc.swissues.mastercallref = \"\";\n\t\t\t\t\/\/mainform.CreateUpdateIssue();  Doing the update causes too many problems, need to revise\n\t\t\t}\n\t\/\/--*************** AWAITING BUG FIX F38822 - THIS CODE CAN THEN BE REMOVED ***********************--\n\t\n\t\/\/--More Master Call Checks\n\t\/\/Set the master call and master call read only fields\n\t\tif(_swdoc.swissues.mastercallref)\n\t\t{\n\t\t\t_ete(tb_mastercall , dd.tables.opencall.columns.callref.FormatValue(_swdoc.swissues.mastercallref));\n\t\t\t_ete(tb_mastercallro , dd.tables.opencall.columns.callref.FormatValue(_swdoc.swissues.mastercallref));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!strFormatedCallref.length == 0)\n\t\t\t{\n\t\t\t\t_ete(tb_mastercall , strFormatedCallref);\n\t\t\t\t_ete(tb_mastercallro , strFormatedCallref);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t_ete(tb_mastercall , \"<Undefined>\");\n\t\t\t\t_ete(tb_mastercallro , \"<Undefined>\");\n\t\t\t}\n\t\t}\n\t\n\t\/\/Enable the \"Set Master Call\" button if one or more calls are attached to the issue otherwise disable it\n\t\tvar bCallsAttached = (sl_issuecallslist.rowCount()) ? true : false;\n\t\t_een(tb_mastercall , bCallsAttached);\n\t\n\t\/\/ If there are calls attached to the issue and the issue has been created \n\t\/\/ (not in the process of being created) then we will enable the Set Master Call button\n\t\t\/\/if((bCallsAttached) && (_swdoc.swissues.issueref.length))\n\t\tif(bCallsAttached)\n\t\t{\n\t\t\t_een(btn_SetMasterCall , true);\n\t\t}\n\t\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as neccessary\n\t\t\n\t\tUpdateBtnState();\n\t\n\t\t\n\t\/\/-- From the Description field (which contains the issue summary and description text) in swissues identify\n\t\/\/-- the summary and description and populate them into the tb_summary and tb_issuedescription form fields\n\t\t\n\t\t\/\/--\n\t\t\/\/-- NWJ - 09.03.2006 - Think there is a problem here as description is coming back as a negative number\n\t\tvar strTemp = new String(_swdoc.swissues.description);\n\t\tvar nLoc = strTemp.indexOf(\"\\n\");\n\t\t\n\t\tif(nLoc >= 0 && nLoc < strTemp.length)\n\t\t{\n\t\t\tvar strTitle = strTemp.substr(0,nLoc);\n\t\t\t_ete(tb_summary , strTitle);\n\t\n\t\t\tvar strprobText = strTemp.substr(nLoc+1, strTemp.length - nLoc+1);\n\t\t\t_ete(tb_issuedescription , strprobText);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_ete(tb_issuedescription , strTemp);\n\t\t}\n\t\t\n\t\t\n}"},{"name":"btnCreateIssue_OnPressed","code":"btnCreateIssue_OnPressed()\n{\n\tmainform.CreateUpdateIssue();\n}"},{"name":"btnAddCusomer_OnPressed","code":"btnAddCusomer_OnPressed()\n{\n\t\/\/-- Check that the issue object is available\n\tif(_swdoc.swissues.issueref.length)\n\t{\n\t\t\/\/-- If the customer tree browser has been opened and the user has successfully added a customer\n\t\tif(_swdoc.LogAndAddCustomerCall())\n\t\t{\n\t\t\tReloadRelatedDataLists();\n\t\t\n\t\t\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\t\t\/\/-- issue form buttons as neccessary\n\t\t\tUpdateBtnState();\n\t\t}\n\t}\n}"},{"name":"tb_issuetype_OnValueChanged","code":"tb_issuetype_OnValueChanged(strValue)\n{\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as required\n\tUpdateBtnState();\n\n\n}"},{"name":"dt_resolvetime_OnValueChanged","code":"dt_resolvetime_OnValueChanged(strValue)\n{\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as required\n\tUpdateBtnState();\n\n\n}"},{"name":"dt_resolvedtime_OnValueChanged","code":"dt_resolvedtime_OnValueChanged(strValue)\n{\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as required\n\tUpdateBtnState();\n\n}"},{"name":"tb_summary_OnValueChanged","code":"tb_summary_OnValueChanged(strValue)\n{\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as required\n\tUpdateBtnState();\n\n\n}"},{"name":"tb_issuedescription_OnValueChanged","code":"tb_issuedescription_OnValueChanged(strValue)\n{\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as required\n\tUpdateBtnState();\n\n}"},{"name":"flg_markpublic_OnValueChanged","code":"flg_markpublic_OnValueChanged(strValue)\n{\n\t\/\/-- This call will check the issue status and the analyst permissions and will enable or disable the \n\t\/\/-- issue form buttons as required\n\tUpdateBtnState();\n\n}"},{"name":"btnCloseIssue_OnPressed","code":"btnCloseIssue_OnPressed()\n{\n\t\n\t\/\/-- If Issue is successfully closed then close the form\n\tif(_swdoc.CloseIssue())    \/\/_swdoc.IssueObj.Close())\n\t{\t\n\t\t_swdoc.CloseForm();\n\t}\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- This value is set when a field value has been changed.\n\t\/\/-- We check this variable on from closing to see if there are any data changes that need to be saved.\n\t_swdoc.bFormFieldChanged = true;\n\tUpdateBtnState();\n}"},{"name":"btn_SetMasterCall_OnPressed","code":"btn_SetMasterCall_OnPressed()\n{\n\t\/\/-- Loop through all calls linked to this issue\n\tfor(var i=0; i< sl_issuecallslist.rowCount(); i++)\n\t{\t\n\t\t\/\/-- If the row is selected\n\t\tif(sl_issuecallslist.IsRowSelected(i))\n\t\t{\n\t\t\t\/\/Set the master call field to the call ref of the selected call\n\t\t\t_ete(tb_mastercall , sl_issuecallslist.GetItemText(i,0));\n\t\t\t_ete(tb_mastercallro , sl_issuecallslist.GetItemText(i,0));\n\t\t\t\n\t\t\tvar strCallref = new String();\n\t\t\tstrCallref = tb_mastercall.text;\n\t\t\t\n\t\t\t\/\/-- Identify the numeric part of the call ref e.g. to get 12 from F0000012\n\t\t\tvar nCallref = strCallref.substr(1, strCallref.length-1);\n\t\t\tnCallref++;\n\t\t\tnCallref--;\n\t\t\t\n\t\t\t\/\/--Set the master call ref value\n\t\t\t_swdoc.swissues.mastercallref = nCallref;\n\t\t\t\n\t\t\t\/\/-- Change flag to signal that a save is required to complete the change\n\t\t\t_swdoc.bFormFieldChanged = true;\n\t\t\t\n\t\t\t\/\/-- Update the Visibility of the buttons\n\t\t\tUpdateBtnState()\n\t\t\tbreak;\n\t\t}\n\t}\n}"},{"name":"sl_issuecallslist_OnItemDoubleClicked","code":"sl_issuecallslist_OnItemDoubleClicked(nRow, nCol)\n{\n\t\/\/-- If the row number passed in is less than 0 or greater than the number of rows then quit\n\tif(nRow <0 || nRow> sl_issuecallslist.rowCount())\n\t\treturn;\n\t\t\n\t\/\/-- If the column number passed in is less than 0 or greater than the number of columns then quit\t\n\tif(nCol <0 || nCol> sl_issuecallslist.colCount)\n\t\treturn;\n\t\t\n\t\/\/-- Get the numeric callref from the text version e.g. get \"1\" from \"F0000001\"\t\n\t\/\/var nCallRef = FormatNumericCallref(sl_issuecallslist.GetItemText(nRow, 0)) ;\n\tvar nCallRef = 0;\n\tvar strCallRef = sl_issuecallslist.GetItemText(nRow, 0)\n\tvar strLeadChar = strCallRef.substr(0,1);\n\tif(strLeadChar.toUpperCase() == \"F\")\n\t{\n\t\tvar nCallRef = strCallRef.substr(1, strCallRef.length)\n\t\tnCallRef++;\n\t\tnCallRef--;\n\t}\n\t\n\t\n\t\/\/-- Open the Call Details form with the given call reference\n\tapp.global.OpenCallDetailsView(nCallRef);\n\n\n}"},{"name":"sl_issuecallslist_OnItemSelected","code":"sl_issuecallslist_OnItemSelected(nRow)\n{\n\t\/\/-- When a call is selected from the the list of issue calls then enable the \"Remove Call\" button\n\t_een(btnRemoveCall , true);\n\n\n}"},{"name":"sl_affectedcustomerslist_OnItemDoubleClicked","code":"sl_affectedcustomerslist_OnItemDoubleClicked(nRow, nCol)\n{\n\tvar strCust = sl_affectedcustomerslist.GetItemText(nRow,0);\n\tapp.OpenFormForEdit('TfCustomer',strCust);\n\n\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{}}]}}}