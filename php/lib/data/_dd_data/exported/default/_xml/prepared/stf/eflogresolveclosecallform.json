{"espForm":{"configuration":{"settings":{"name":"EfLogResolveCloseCallForm","title":"Resolve Close Call Form","options":{"allowResize":"true","showMenubar":"true","showToolbar":"false","showStatusBar":"false"}},"tables":{"table":[{"name":"updatedb","type":"Main Details Table","flags":"5"},{"name":"opencall","type":"Extended Details Table","mainDetailsColumn":"callref","flags":"0"}]},"javascript":{"methods":{"method":[{"name":"OnAdviseActionCompleted","code":"OnAdviseActionCompleted(nAction, stActionResultValues)\n{\n\tvar res = new String(stActionResultValues);\n\tvar ar = res.split(\"&\");\n\tif(nAction == LOG_CALL_ACTION)\n\t{\n\t\tvar i=0; \n\t\tfor( ; i< ar.length; i++)\n\t\t{\n\t\t\tvar pos = ar[i].indexOf(\"callref=\");\n\t\t\tif(pos != -1)\n\t\t\t{\n\t\t\t\tvar arCallref = ar[i].split(\"=\");\n\t\t\t\tvar strLogCallRef = arCallref[1];\n\t\t\t\tmainform.ResolveClose(strLogCallRef,function(boolSuccess)\n\t\t\t\t{\n\t\t\t\t\tif(boolSuccess) \n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/mainform.onformloaded();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\t\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (confirm(\"There was a problem resolving the call you just logged. Would you like to view the call details?\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tapp.global.OpenCallDetailsView(strLogCallRef);\n\t\t\t\t\t\t\treturn true;\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\t\n\t}\n}"},{"name":"(User Defined Functions)","code":"var boolLogMode = false; \/\/-- boolean - is the form being displayed in a logcall forn\nvar boolClosing = false; \/\/-- boolean - is the call action to close calls\/s (if false resolving)\nvar arrSurveyNameSurvIDs = new Array(); \/\/-- array - holds list of survey ids \nvar arrCallStatuss \t\t = new Array(); \/\/-- array - holds list of the all the calls status\nvar arrCallOpenTasks \t = new Array(); \/\/-- araray - holds list of all the calls tasks\nvar boolFormFieldChanged = false;\t\/\/-- boolean - set to true when formfield is changed. Used when closing form\nvar boolSourceEmail = false; \/\/-- from opened from email\nvar boolHaveSubject = false; \/\/-- Is there a subject\nvar boolHaveSurveys = false; \/\/-- are there surveys available\nvar nBackdatePeriod = 0;\n\nvar boolIsQuickLogCall = false;\nvar boolSetToMaxBackdatePeriod = false;\nvar intGetCurrentEpocTime = app.global.GetCurrentEpocTime();\n\n\/\/-- reset bound record so we dont get messages when leaving\nfunction resetData()\n{\n\t_swdoc.ResetModiedFlag(\"updatedb\");\n\t_swdoc.ResetModiedFlag(\"opencall\");\n}\n\n\/\/-- validate form data that user has set\nfunction ValidateForm()\n{\n\tif((_swdoc.updatedb.timespent < 1 || _swdoc.updatedb.timespent > 60000) && (mainform.tb_timespent.mandatory))\n\t{\n\t\tMessageBox(\"You must enter the amount of time you spent on this action\", MB_OK);\n\t\treturn false;\t\/\/ Make sure that the time spent is within range\n\t}\n\n\tif((_swdoc.updatedb.updatetxt == \"\") && (mainform.tb_updatetext.text==\"\"))\n\t{\n\t\tMessageBox(\"You must enter a description in the Action Description tab.\", MB_OK | MB_ICONINFORMATION );\n\t\treturn false;\t\/\/ Make sure we have some update text\n\t}\n\n\t\/\/-- check other required fields\n\tif (!_swdoc.check_mandatory_fields(\"updatedb\",mainform))return false;\t\t\n\tif (!_swdoc.check_mandatory_fields(\"opencall\",mainform))return false;\n\t\n\t\/\/-- check profile levels\n\tif(!mainform.check_profile_levels()) return false;\n\t\n\treturn TRUE;\n}\n\n\n\/\/-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table\n\/\/--\t\t\t\t\talert user if need be and return false\t\t\t\t\t\t\nfunction check_mandatory_fields(strTable,oForm)\n{\n    for (var x = 0; x<oForm.elements.length;x++)\n    {\n        var element = oForm.elements[x];\n        \n        if ((element.mandatory) && (element.text ==\"\"))\n        {\n            var colName = \"\";\n            var fieldName = \"(not specified)\";\n            if(element.dataRef!=\"\")\n            {\n            \tvar arrInfo = element.dataRef.split(\".\");\n            \tvar strTable = arrInfo[0];\n            \tvar colName = arrInfo[1];\n            \tvar fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;\n            }\n        \tMessageBox(\"The field '\" + fieldName + \"' is a mandatory field and must be completed.\");\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction setup_form_mode()\n{\n\t\/\/-- always make sure fixcode desc is disabled\n\tapp._een(mainform.tb_fixcodedescription,false);\n\t\t\t\n\tvar bResolveByDefault = app.session.IsDefaultOption(ANALYST_DEFAULT_RESOLVEBYDEFAULT);\t\t\t\n\t\/\/-- if user does not have the right to close calls then only allow resolve\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS))\n\t{\n\t\tapp._een(mainform.cb_callaction,false);\n\t\tbResolveByDefault = true;\n\t}\n\n\t\/\/-- do they have option to resolve\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS))\n\t{\n\t\tapp._een(mainform.cb_callaction,false);\n\t\tbResolveByDefault = false;\n\t}\n\t\n\t\/\/-- set the default selection for the call action pick list based on the DD entry \n\tif(bResolveByDefault)\n\t{\n\t\tif(_swdoc.boolIsQuickLogCall==false)\n\t\t{\n\t\t\tapp._ete(mainform.cb_callaction , \"Resolve Call\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tapp._ete(mainform.cb_callaction , \"Close Call\");\n\t\t\n\t\t\/\/-- sandra 30-07-2007 -- Bug 58558 set to close if ResolveByDefault is switched off. \n\t\t_swdoc.boolClosing = true;\n\t}\t\t\n\n\t\/\/-- we are in a quicklog\n\tif(_swdoc.boolIsQuickLogCall!=false)\n\t{\n\t\t\/\/-- quick log states close call\n\t\tif(mainform.cb_callaction.text == \"Close Call\")\n\t\t{\n\t\t\t_swdoc.boolClosing = true;\n\t\t}\n\t}\n\t\n\t\/\/--\n\t\/\/-- disable \/ enable form fields\n\tapp._een(mainform.dt_actiontime , (app.session.CanBackdateCallActions())); \/\/-- can backdate ?\n\tapp._een(mainform.btnGetProfileText , false);\t\t\t\n\tapp._een(mainform.btnBrowseProfile,true);\n\n\t\/\/-- setup various flags\t\n\t_swdoc.setup_charge_flag(true);\n\t_swdoc.setup_kbase_flag();\t\n\t_swdoc.setup_email_flag();\n\t_swdoc.setup_public_flag();\n\t_swdoc.setup_survey_options();\n\n\t\/\/-- if we have a fixcode - see if we need to enable text button\n\tapp._een(mainform.btnGetProfileText , false);\n\tif(_swdoc.opencall.fixcode!=\"\")\n\t{\n\t\t\/\/-- nwj if it has a dec text enable button to copy\n\t\tvar currentResProfileDesc = app.global.GetResolutionProfileDescription(_swdoc.opencall.fixcode);\t\n\t\tapp._een(mainform.btnGetProfileText,(currentResProfileDesc.strDescription!=\"\"));\n\t}\n}\n\n\n\/\/-- 08.02.2007 - NWJ - One function to handle which standard check boxes should be enabled\/disabled\n\/\/--\t\t\t\t\tchecked or unchecked, as old code fglas were set all over the place\nfunction setup_public_flag()\n{\n\tapp._een(mainform.flg_updatepublic,true);\n\tif(_swdoc.boolIsQuickLogCall==false)\n\t{\n\t\tapp._ete(mainform.flg_updatepublic , app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEPRIVATE) ? \"1\":\"0\");\n\t}\n}\n\nfunction setup_kbase_flag()\n{\n\t\/\/-- does the user have the right to add to the kbase or we are worknig with multiple calls so dont add\n\tif(!app.session.HaveRight(ANALYST_RIGHT_C_GROUP,ANALYST_RIGHT_C_CANADDTOKNOWLEDGEBASE))\n\t{\n\t\tapp._ete(mainform.flg_addKBase \t, \"0\");\n\t\tapp._een(mainform.flg_addKBase , false);\n\t}\n\telse\n\t{\n\t\tif(_swdoc.boolIsQuickLogCall==false)\n\t\t{\n        \tapp._ete(mainform.flg_addKBase , app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEKNOWLEDGEBASE) ? \"1\":\"0\");\n        }\n        app._een(mainform.flg_addKBase,true);\t\n\t}\n}\n\nfunction setup_charge_flag(boolOnload)\n{\n\tif (_swdoc.boolClosing)\n\t{\n\t\t\/\/-- if not a quicklog call then set default\n\t\tapp._een(mainform.flg_chargeable,true);\n\t\tif((_swdoc.boolIsQuickLogCall==false)||(boolOnload==false))\n\t\t{\n\t\t\tapp._ete(mainform.flg_chargeable , app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSECHARGABLE) ? \"1\":\"0\");\t\t\n\t\t}\n\t}\n\telse\n\t{\n\t\t\/\/-- resolving\n\t\tapp._een(mainform.flg_chargeable,false);\n\t\tapp._ete(mainform.flg_chargeable,0);\t\t\n\t}\n}\n\nfunction setup_email_flag()\n{\n\t\/\/--\n\t\/\/-- if we have a mailserver and can send mail set flg\n\tif(app.global.IsConnectedToMailServer() && app.global.CanSendMail())\n\t{\n\t\t\/\/-- if not a quicklog call then set default\n\t\tif(_swdoc.boolIsQuickLogCall==false)\n\t\t{\n\t\t\tapp._een(mainform.flg_emailcustomer , true);\n\t\t\tapp._ete(mainform.flg_emailcustomer , (app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSESENDEMAIL)) ? \"1\":\"0\");\n\t\t}\n\t}\n\telse\n\t{\n\t\tapp._een(mainform.flg_emailcustomer , false);\n\t\tapp._ete(mainform.flg_emailcustomer , \"0\");\n\t}\n}\n\n\/\/--\n\/\/-- initialise the surveys options\nfunction setup_survey_options()\n{\n\t\/\/-- if they do not have surveys hide options\n\tif(!app.global.IsSurveyModuleEnabled())\n\t{\n\t\tapp._ete(mainform.flg_customersurvey , \"0\");\t\n\t\tapp._evi(mainform.flg_customersurvey , false);\n\t\tapp._evi(mainform.cb_surveys , false);\n\t}\n\telse\n\t{\n\t\t\/\/-- get survey options\n\t\t_swdoc.load_survey_list();\t\n\n\t\t\/\/-- if we dont have surveys on the system then hide\n\t\tif(!_swdoc.boolHaveSurveys)\t\n\t\t{\n\t\t\tapp._ete(mainform.flg_customersurvey , \"0\");\t\n\t\t\tapp._een(mainform.flg_customersurvey , false);\t\t\t\t\n\t\t\tapp._evi(mainform.cb_surveys , false);\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\/\/-- have to set to true because if you set to hidden in code and then dev form it saves the state\n\t\tapp._evi(mainform.flg_customersurvey , true);\t\t\t\t\t\t\n\t\tapp._evi(mainform.cb_surveys , true);\t\n\t\t\t\n\t\t\/\/-- not allowed to change send survey options or there arent any surveys to send\n\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_DISABLESENDSURVEY)) \n\t\t{\n\t\t\t\/\/--code change DavidJH 09.06.05\n\t\t\tapp._een(mainform.flg_customersurvey , false);\n\t\t\tapp._ete(mainform.flg_customersurvey,\"0\");\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp._een(mainform.flg_customersurvey , true);\n\t\t}\n\t\t\n\t\t\/\/-- default ticked setting\n\t\t\/\/-- if not a quicklog call then set default\n\t\tif(_swdoc.boolIsQuickLogCall==false)\n\t\t{\n\t\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_SETSENDSURVEY))\n\t\t\t{\n\t\t\t\tapp._ete(mainform.flg_customersurvey , \"1\");\n\t\t\t\tapp._een(mainform.cb_surveys , true);\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tapp._ete(mainform.flg_customersurvey , \"0\");\n\t\t\t\tapp._een(mainform.cb_surveys , false);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction load_survey_list()\n{\n\t\/\/-- empty the picklist\n\tmainform.cb_surveys.pickList = \"\";\n\t\n\t\/\/-- select all of the system mailboxes and add all shared mailboxes to an array\n\tvar SqlRecordSetObj\t= new SqlQuery;\n\t\n\t\/\/-- select all of the surveys and the mailbox they are associated to\n\tSqlRecordSetObj.Reset();\n\tSqlRecordSetObj.Query(\"Select DISTINCT surveyname,surveyid,Mailbox from survey_config\", \"sw_systemdb\");\n\t\t\n\tvar str = \"\";\n\tvar selected = \"\";\n\tvar strTemps = new Array();\n\tbselecteddefaultsurvey = false;\n\t\n\t\/\/-- loop through the surveys and and match those associated to shared mailboxes\n\t\/\/-- for each survey add it into an array and to the pick list string and when the \n\t\/\/-- first survey is found identify it as the default option for the survey picklist\n\twhile(SqlRecordSetObj.Fetch())\n\t{\n\t\t\/\/-- get the recordset value for survey name and id\n\t\tvar surveyname = SqlRecordSetObj.GetValueAsString(\"surveyName\");\n\t\tvar surveyid = SqlRecordSetObj.GetValueAsString(\"surveyid\");\n\t\t\n\t\t\/\/-- add the survey name\/id pair into the array\n\t\t_swdoc.arrSurveyNameSurvIDs[surveyname] = surveyid;\n\t\t\n\t\t\/\/-- build the picklist\toptions string\t\n\t\tstr += surveyname + \"|\";\n\t\t\/\/MessageBox(surveyname)\n\t\t_swdoc.boolHaveSurveys=true;\n\t\t\/\/-- identify the default survey (currently the first one added)\n\t\tfor(ID in _swdoc.arrSurveyNameSurvIDs)\n\t\t{\n\t\t\tif(_swdoc.arrSurveyNameSurvIDs[ID])\n\t\t\t{\n\t\t\t\tif(!bselecteddefaultsurvey)\n\t\t\t\t{\n\t\t\t\t\tbselecteddefaultsurvey = true;\n\t\t\t\t\tselected = surveyname;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t}\n\t\/\/-- populate the surveys pick list\n\tmainform.cb_surveys.pickList = str;\n\t\n\t\/\/-- set the default selected survey\n\tapp._ete(mainform.cb_surveys , selected);\n}"},{"name":"OnExecuteAction","code":"OnExecuteAction(nAction)\n{\n\t\/\/-- trigger an action from a menu bar (shortcusts)\t\t\n\t\/\/-- attaching a call to the action.\n\tif(nAction == ATTACHFILETOCALL_ACTION)\n\t{\n\t\tmainform.btnAddFile_OnPressed();\n\t\treturn true;\n\t}\n\n\treturn true;\n}"},{"name":"OnValidate","code":"OnValidate()\n{\n\t\/\/-- validate the form\n\tif(!_swdoc.ValidateForm())return VALIDATE_FAIL;\n\t\t\n\treturn VALIDATE_DEFAULT;\n}"},{"name":"(Globals)","code":"\/\/-- ALL vars and funcs are in the userdefined js area"},{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t\/\/-- set the logmode and is quick call\n\tif(_swdoc._form[\"logmode\"])_swdoc.boolLogMode = true;\n\tif(_swdoc._form[\"preloadtype\"]==3)_swdoc.boolIsQuickLogCall = true;\n\n\t\n\t\t\t\t\t\t\t\t\n\n}"},{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\tif(!_swdoc.boolFormFieldChanged)_swdoc.resetData();\n\treturn true;\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"561","height":"408","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"tb_updatetext","type":"Field","group":"Tab1:0"},"appearance":{"index":"0","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"248","left":"14","right":"539","bottom":"388"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"data":{"binding":"updatedb.updatetxt"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"true","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","displayColumnValue":"this is resolution two","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"CaptionPanel2","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"1","caption":"Details","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"29","left":"4","right":"395","bottom":"183"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"dt_actiontime","type":"Field"},"appearance":{"index":"2","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"73","left":"9","right":"216","bottom":"91"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.updatetimex"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"1166205163","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_timespent","type":"Field"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"73","left":"225","right":"284","bottom":"91"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Minute Time Period","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"11","properties":{"defaultValue":"5","activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"cb_actionsource","type":"Field"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"110","left":"9","right":"216","bottom":"128"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"true"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"E-mail","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"Telephone","distinctTable":"updatedb","distinctColumn":"udsource","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_actiontype","type":"Field"},"appearance":{"index":"5","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"110","left":"225","right":"386","bottom":"128"},"scaling":{"top":"0","left":"25","right":"50","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"true"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"Called Customer","properties":{"defaultValue":"General Update","listItems":"General Update|Called Customer|E-mailed Customer|","activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"btnBrowseProfile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"6","caption":"...","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"156","left":"366","right":"392","bottom":"177"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1"}}},{"general":{"name":"tb_fixcodedescription","type":"Field"},"appearance":{"index":"7","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"158","left":"9","right":"368","bottom":"176"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"Resolution 1 -> Resoltuon 2","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"CaptionPanel3","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"8","caption":"Options","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"29","left":"402","right":"556","bottom":"183"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"flg_emailcustomer","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"9","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"76","left":"404","right":"520","bottom":"95"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"1","properties":{"activeTextColor":"#eeeeee","flagItems":"E-mail customer^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_updatepublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"57","left":"404","right":"533","bottom":"75"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"1","properties":{"activeTextColor":"#eeeeee","flagItems":"Update to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_chargeable","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"11","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"96","left":"404","right":"545","bottom":"114"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"1","properties":{"activeTextColor":"#eeeeee","flagItems":"Call to be chargeable^1|","disabledBackgroundColor":"#eeeeee","defaultValue":"0"}}},{"general":{"name":"flg_addKBase","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"12","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"116","left":"404","right":"546","bottom":"135"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"0","properties":{"activeTextColor":"#eeeeee","flagItems":"Add to KnowledgeBase^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_customersurvey","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"13","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"135","left":"404","right":"562","bottom":"156"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"0","properties":{"activeTextColor":"#eeeeee","flagItems":"Send customer survey:^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"cb_surveys","type":"Field"},"appearance":{"index":"14","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"158","left":"408","right":"538","bottom":"176"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"true","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"Rect1","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"15","backgroundColor":"#d4d0c8","foregroundColor":"#dddddd","font":{"@size":"0"},"borderStyle":"Rectangle","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"0","left":"0","right":"566","bottom":"25"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"cb_callaction","type":"Field"},"appearance":{"index":"16","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"4","left":"71","right":"218","bottom":"20"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"Close Call","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"Close Call|Resolve Call|Close Call|Resolve Call|"}}},{"general":{"name":"btnGetProfileText","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"17","caption":"Get Profile Text","backgroundColor":"#ffffff","foregroundColor":"#0000ff","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"189","left":"451","right":"543","bottom":"210"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"Tab1","type":"TabControl","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"18","caption":"Tab1","backgroundColor":"#ded7ce","foregroundColor":"#ffffff","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"217","left":"4","right":"550","bottom":"398"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"tabStyle":"Top","tabSize":"19","items":{"item":[{"name":"Description","properties":"56=#d1e0ee|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#d1e0ee"}}},{"name":"File Attachment","properties":"56=#ffcc66|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#ffcc66"}}}]},"selectedTextFont":{"@size":"8","#text":"Arial"},"selectedTextColor":"#000000","deselectedTextColor":"#000000","tabSlopeLeft":"2","tabSlopeRight":"2","deselectedTabHeightOffset":"1","tabSpacing":"0","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"tabStyle":"0"}}},{"general":{"name":"fl_attachments","type":"FileListTable","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"true","horizontalGridLines":"true","autoLoad":"true","allowMultiSelect":"true"},"group":"Tab1:1"},"appearance":{"index":"19","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"245","left":"12","right":"470","bottom":"389"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"File Name","width":"160","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Size","width":"80","image":"-1","dataColumn":"1"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Last Modified","width":"120","image":"-1","dataColumn":"2"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Full Local Path","width":"100","image":"-1","dataColumn":"3"}]},"sortColumn":"2","sortDescending":"false","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"content":"NAME=css-bug-raising.gif;PATH=C:\\Documents and Settings\\NeilWJ\\My Documents\\css\\css-bug-raising.gif;SIZE=18746;LASTMODIFIED=1091525370","borderColor":"#c0c0c0"}}},{"general":{"name":"btnAddFile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"20","caption":"Add","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"245","left":"479","right":"543","bottom":"269"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74"}}},{"general":{"name":"btnRemove","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"21","caption":"Remove","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"275","left":"479","right":"543","bottom":"299"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"22","caption":"Action Source","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"94","left":"7","right":"80","bottom":"106"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"LabelCode","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"23","caption":"Action Type","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"94","left":"223","right":"289","bottom":"106"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Text1","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"24","caption":"Date\/Time of Action","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"57","left":"6","right":"118","bottom":"71"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Label2","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"25","caption":"Time Spent","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"57","left":"223","right":"287","bottom":"71"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"ResolProfile","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"26","caption":"Resolution Profile","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"140","left":"6","right":"206","bottom":"154"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"btnAddFile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"27","caption":"Attach File","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"1","left":"442","right":"538","bottom":"24"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74","backgroundColor":"#ff9900"}}},{"general":{"name":"LabelAction","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"28","caption":"Call Action:","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"4","left":"6","right":"68","bottom":"21"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"tb_fixcode","type":"Field"},"appearance":{"index":"29","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"3-D Sunken"},"objectPlacement":{"position":{"top":"70","left":"338","right":"367","bottom":"87"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"opencall.fixcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"true","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"RSLT-RSLT","properties":{"content":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"cp_summary1","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"30","caption":"Other information","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"188","left":"4","right":"558","bottom":"404"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}}]},"javascript":{"methods":{"method":[{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\n\t\/\/-- set up the form mode\n\t_swdoc.setup_form_mode();\n\t\n\t\/\/-- set updatetime\t\n\t_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime();\t\t\t\n\t_swdoc.UpdateFormFromData();\n\t\t\n}"},{"name":"btnBrowseProfile_OnPressed","code":"btnBrowseProfile_OnPressed()\n{\n\t\/\/-- get resolution profile filter\n\t\n\t\/\/-- NWJ - 29.06.2006 - get close filter or resolve filter depending on call closure option (requested by Dan 47766)\n\tif (cb_callaction.text == \"Resolve Call\")\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/ResolveProfileFilter\");\n\t}\n\telse if (cb_callaction.text == \"Close Call\")\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/CloseProfileFilter\");\n\t}\n\telse\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/ProfileCodeFilter\");\n\t}\n\t\n\tvar pc = new ChooseProfileCodeDialog;\n\t\/\/-- default analyst permission to auto fill the resolution text on resolve\/close call is set\n\n    pc.useDescriptionText =  app.session.IsDefaultOption(ANALYST_DEFAULT_AUTOFILLRESOLUTIONTEXT); \n    \n    pc.Open(true, true, _swdoc.opencall.fixcode, Filter, function(objPC)\n\t{\n\t\tif (typeof objPC == \"object\")\n\t\t{\n\t\t \t\/\/-- Get the fix code and split it into an array\n\t\t\tvar strCodeDesc = objPC.codeDescription;\n\t\t\tvar strCode = objPC.code;\n\t\t\t\n\t\t\t\/\/-- If no codes are found then stop or same as current code\n\t\t\tif(strCode==_swdoc.opencall.fixcode) return;\n\t\t\t\n\t\t\t\/\/-- F0092364\n\t\t\tif(strCode==\"\")\n\t\t\t{\n\t\t\t\t_swdoc.opencall.fixcode = \"\";       \n\t\t\t\tapp._ete(tb_fixcodedescription , \"\");\n\t\t\t\t_swdoc.bUserSelectedFixCode = true;\n\t\t\t\tapp._een(btnGetProfileText ,false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t\/\/-- Set the text in the resolution profile text box\n\t\t\t\/\/-- 08.02.2007 - NWJ - set the opencall record value instead of the element name \n\t\t\t_swdoc.opencall.fixcode = strCode;       \n\t\t\tapp._ete(tb_fixcodedescription , strCodeDesc);\n\t\t\t_swdoc.bUserSelectedFixCode = true;\n\t\t\t\n\t\t\t\/\/-- Attempt to add the resolution profile description to the Action Description box if the\n\t\t\t\/\/-- default analyst permission to auto fill the resolution text on resolve\/close call is set\n\t\t\tif(objPC.useDescriptionText)\n\t\t\t{\n\t\t\t\t\/\/-- 08.02.2007 - NWJ - set the opencall record value instead of the element name \n\t\t\t\tvar strCurrentUpdateText = _swdoc.updatedb.updatetxt;\n\t\t\t\t\n\t\t\t\tif(objPC.description.length)\n\t\t\t\t{\n\t\t\t\t\t\/\/if(tb_updatetext.text.length)\n\t\t\t\t\tif(strCurrentUpdateText.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar Message = \"You have chosen to transfer the default profile text into the description field of the close call form. However, you have already entered some text into this field. Do you want to append the text you have typed?\\n\\nTo append the default text to the text you have already typed, click Yes\\nTo transfer the default text and overwrite what you have already typed, click No\\nTo ignore the default text and leave the text you have typed alone, click Cancel\";\n\t\t\t\t\t\tswitch(MessageBox(Message, MB_ICONQUESTION | MB_YESNOCANCEL))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase IDYES:\n\t\t\t\t\t\t\t\tif(_swdoc.updatedb.updatetxt.length)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\/\/-- add a line feed\n\t\t\t\t\t\t\t\t\t\t\t\tstrCurrentUpdateText += \"\\r\\n\";\n\t\t\t\t\t\t\t\t\t\t\t\t\/\/tempText = _swdoc.updatedb.updatetxt + \"\\r\\n\"; \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstrCurrentUpdateText += objPC.description;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase IDNO:\n\t\t\t\t\t\t\t\tstrCurrentUpdateText = objPC.description;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase IDCANCEL:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstrCurrentUpdateText = objPC.description;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\/\/-- add back to update record\n\t\t\t\t_swdoc.updatedb.updatetxt = strCurrentUpdateText;\n\t\t\t\t_swdoc.UpdateFormFromData();        \n\t\t\t}\n\t\n\t\t\t\/\/-- if we are working with webclient\n\t\t\tif(app.bWebClient)\n\t\t\t{\n\t\t\t\t\t\t\tapp._een(btnGetProfileText , false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\/\/-- enable \/ disable button if it has text\n\t\t\t\tapp._een(btnGetProfileText ,(objPC.description!=\"\"));\n\t\n\t\t\t\t\/\/btnGetProfileText.enable = (_swdoc.updatedb.updatetxt? true:false);\n\t\t\t}\n\t\t}\n\t});\n}"},{"name":"btnAddFile_OnPressed","code":"btnAddFile_OnPressed()\n{\n\t\/\/-- add files\n\t\/\/fl_attachments.newFile = InvokeCallAttachmentFileDialog();\n\tfl_attachments.AddFiles();\n\n}"},{"name":"btnRemove_OnPressed","code":"btnRemove_OnPressed()\n{\n\t\/\/ -- remove selected files\n\tfor(i=fl_attachments.rowCount()-1; i>=0;i--)\n    {\n    \tif(fl_attachments.IsRowSelected(i))\n    \t{\n    \t\t\/\/-- remove\n    \t\tfl_attachments.RemoveRow(i);\n    \t}\n    }\n\n}"},{"name":"btnGetProfileText_OnPressed","code":"btnGetProfileText_OnPressed()\n{\n\tvar funcProcessing = function()\n\t{\t\t\t\n\t\t\/\/-- get resolution profile description\t\n\t\tvar currentResProfileDesc = app.global.GetResolutionProfileDescription(_swdoc.opencall.fixcode);\n\t\t_swdoc.updatedb.updatetxt = currentResProfileDesc.strDescription;\n\t\t_swdoc.UpdateFormFromData();\n\t}\n\t\n\tif(_swdoc.updatedb.updatetxt.length)\n\t{\n\t\tMessageBox(\"If you retrieve the default text description from the profile database you will overwrite the current Action Description text.\\n\\nDo you wish to continue?\", MB_ICONQUESTION | MB_YESNO,function(intDecision)\n\t\t{\t\t\n\t\t\tif(intDecision != IDYES)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfuncProcessing();\n\t\t});\t\n\t}\n\telse\n\t{\n\t\tfuncProcessing();\n\t}\n\t\n}"},{"name":"checkCustomerSurvey_OnValueChanged","code":"checkCustomerSurvey_OnValueChanged(strValue)\n{\n\tvar bChecked = checkCustomerSurvey.text == \"1\";\n\tapp._een(Surveys , bChecked);\n}"},{"name":"(User Defined Functions)","code":"\n\/\/-- function to check that user has selected correct number of profile codes\nfunction check_profile_levels()\n{\n\t\/\/-- get the number of profile levels the analyst HAS to choose\n\tvar nLevelNeeded = app.session.GetCloseProfileLevelRequired();\n\n\t\/\/-- determine the number of Profile levels the user has selected\n\t\/\/-- NWJ - can we turn this into a app.global.i.e. app.global.returnProfileLevelCount(strProfileCode);\n\tvar strTempProfileCodes = new String(_swdoc.opencall.fixcode);\n\tvar nLevels = 0;\n\twhile(strTempProfileCodes.indexOf('-') != -1)\n\t{\n\t\tnLevels++;\n\t\tstrTempProfileCodes = strTempProfileCodes.substr((strTempProfileCodes.indexOf('-')+1),strTempProfileCodes.length);\n\t}\n\t\n\tif(strTempProfileCodes.length)nLevels++;\n\t\n\t\/\/-- If insufficient profile levels are specified then alert the user\n\tif(nLevels < nLevelNeeded)\n\t{\n\t\tMessageBox(\"You must profile this call resolution. Your access control rights require you to choose at least \" + nLevelNeeded + \" profile level(s)\", MB_ICONSTOP);\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\n\/\/-- add call to kbase\nfunction add_call_to_knowledgebase(nFirstCallref)\n{\n\tvar strProbText = \"\";\n\tvar strProbCode = \"\";\n\t\/\/-- get the problem text and problem code from updatedb\/opencall\n\t\n\tvar aRSInfo = new SqlQuery;\n\taRSInfo.Query(\"SELECT updatetxt, probcode FROM updatedb,opencall WHERE udindex = 0 AND updatedb.callref = opencall.callref and opencall.callref = \" + nFirstCallref, \"sw_systemdb\");\n\tif(aRSInfo.Fetch())\n\t{\n\t\tstrProbText = aRSInfo.GetValueAsString(0);\n\t\tstrProbCode = aRSInfo.GetValueAsString(1);\t\t\n\t}\n\taRSInfo.Reset();\t\n\t\n\t\/\/-- call api\n\t\/\/MessageBox(\"Add KB \" + _swdoc.updatedb.updatetxt)\n   \tapp.global.AddResolutionToKnowledgeBase(strProbText, strProbCode, _swdoc.updatedb.updatetxt, _swdoc.opencall.fixcode, nFirstCallref);\n}\n\n\/\/--\n\/\/-- resolve or close the call\nfunction ResolveClose(intLoggedCallref, funcCallback)\n{\t\n\t\/\/ -- Validate the form\n\tif(!_swdoc.ValidateForm())\n\t{\n\t\tfuncCallback(false);\n\t\treturn;\n\t}\n\t\/\/ -- Check profile levels\n\tif(!mainform.check_profile_levels())\n\t{\n\t\tfuncCallback(false);\n\t\treturn;\n\t}\t\n\t\/\/ -- Determine status\n\tvar nStatus = CS_CLOSED;\n\tif(!_swdoc.boolClosing)\n\t{\n\t\tnStatus = CS_RESOLVED;\n\t}\n\telse\n\t{\n\t\tif(flg_chargeable.text == \"1\")\tnStatus = CS_CLOSEDCHARGABLE;\n\t}\n\t\t\n\t\/\/ -- Handle the Web Client\n\tif((app.bWebClient && app.global==undefined)&&(_swdoc.boolClosing))\n\t{\n\t \tnStatus = CS_CLOSED;\n\t \tflg_chargeable.text == \"0\"\n\t}\t\n\n\t\/\/ -- Check if we should send a Survey\t\n\tvar bSendSurveyToCustomer = false;\n\tvar SurveyID = 0;\n\tvar SurveyName = \"\";\n\tif(app.global.IsSurveyModuleEnabled() && flg_customersurvey.text == \"1\" && cb_surveys.text.length)\n\t{\n\t\t\/\/ -- Get surveyId from the SurveyNameSurvIdMap\n\t\tSurveyName = cb_surveys.text;\t\t\n\t\tSurveyID = _swdoc.arrSurveyNameSurvIDs[SurveyName]; \n\t\tif(SurveyID!=undefined)\n\t\t\tbSendSurveyToCustomer = true;\n\t\n\t\t\/\/ -- Determined that a Survey should be sent to the customer\n\t\tif (bSendSurveyToCustomer)\n\t\t{\n\t\t\t\/\/ -- Send a Survey using survey::sendCustomerCallSurvey API\n\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\txmlmc.SetValue(\"surveyId\", SurveyID);\n\t\t\txmlmc.SetValue(\"callref\", intLoggedCallref);\n\t\t\t\/\/ -- Invoke XMLMC API\n\t\t\tif(!xmlmc.Invoke(\"survey\",\"sendCustomerCallSurvey\"))\n\t\t\t{\n\t\t\t\t\/\/ -- Failed to Invoke XMLMC API\n\t\t\t\t\/\/ -- Display the error message\n\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\t\/\/ -- Find modified values in OPENCALL table\n\tvar boolUpdatedValues = true;\n\tvar arrUpdateCallValues = new Array();\n\tvar strUpdateCallValues = \"\";\n\tif(rec = _swdoc.GetRecord(\"opencall\"))\n\t{\n\t\tvar nColCount = rec.GetCount();\n\t\tfor(x = 0; x < nColCount; x++)\n\t\t{\n\t\t\tif(!rec.IsModified(x))\n\t\t\t\tcontinue;\n\t\t\tarrUpdateCallValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t}\n\t}\n\tfor (fieldName in arrUpdateCallValues)\n\t{\n\t\tstrUpdateCallValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrUpdateCallValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t}\n\t\/\/ -- Update call values using XMLMC API if we found modified values in OPENCALL table \n\tif(strUpdateCallValues!=\"\")\n\t{\n\t\tstrUpdateCallValues = \"<opencall>\"+strUpdateCallValues+\"<\/opencall>\";\n\t\t\/\/ -- Update call values using helpdesk::updateCallValues API \n\t\tvar xmlmc = new XmlMethodCall;\n\t\tvar strMethod = \"updateCallValues\";\n\t\txmlmc.SetValue(\"callref\", intLoggedCallref);\n\t\txmlmc.SetParamAsComplexType(\"additionalCallValues\", strUpdateCallValues);\t\n\t\tif(xmlmc.Invoke(\"helpdesk\", strMethod))\n\t\t{\n\t    \tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\t\tvar objRes = app.XMCResult(strXML);\n\t\t\tif(!objRes.success)\n\t\t\t{\n\t\t\t\tboolUpdatedValues = false;\n\t\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\t\tfuncCallback(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tboolUpdatedValues = false;\n\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\tfuncCallback(false);\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\t\/\/ -- Resolve\/Close the call using XMLMC API\n\tvar xmlmc = new XmlMethodCall;\n\t\/\/ -- API method\n\tvar strMethod = \"closeCalls\";\n\tif(nStatus == CS_RESOLVED)\n\t\tstrMethod = \"resolveCalls\";\n\t\/\/ -- Find modified values in UPDATEDB table\n\tvar arrExtraUpdateDbValues = new Array();\n\tvar strUpdateDbValues = \"\";\n\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t{\n\t\tvar nColCount = rec.GetCount();\n\t\tfor(x = 0; x < nColCount; x++)\n\t\t{\n\t\t\tif(!rec.IsModified(x))\n\t\t\t\tcontinue;\n\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t}\n\t}\n\tfor (fieldName in arrExtraUpdateDbValues)\n\t{\n\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t}\n\t\n\t\/\/ -- Workout \"timeOfAction\" value\n\tvar strBackDate = app.g.convert_epoch_isodate(_swdoc.nBackdatePeriod);\n\t\n\t\/\/ ** API params ** \/\/\n\txmlmc.SetValue(\"callref\", intLoggedCallref);\n\txmlmc.SetValue(\"timeSpent\", mainform.tb_timespent.value);\n\txmlmc.SetValue(\"description\", rec.updatetxt);\n\txmlmc.SetValue(\"timeOfAction\", strBackDate);\n\tvar boolPublicUpdate = (flg_updatepublic.text == \"1\" )? true : false;\n\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\tif(rec.udsource!=\"\")\n\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\tif(rec.udcode!=\"\")\n\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\n\t\n\tapp.itsm.addAttachmentsToCallXmlmc(mainform.fl_attachments,xmlmc);\n\t\n\tif(strUpdateDbValues!=\"\")\n\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\t\n\t\/\/ ** EO API params ** \/\/\n\t\n\t\/\/-- funciton required for modeless email template dialog\n\tvar funcCloseForm = function(funcCloseCallback)\n\t{\n\t\t\/\/ -- Close Form\n\t\t_swdoc.boolFormFieldChanged = false;\t\t\n\t\t_swdoc.resetData();    \t\t\t\n    \t_swdoc.CloseForm();\n    \tfuncCloseCallback(true);\n\t\treturn;\n\t}\n\t\n\t\n\t\/\/ -- Invoke XMLMC API\n\tif(xmlmc.Invoke(\"helpdesk\",strMethod))\n\t{\n\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\tvar objRes = app.XMCResult(strXML);\n\t\tif(!objRes.success)\n\t\t{\n\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\tfuncCallback(false);\n\t\t\treturn;\n\t    }\n\t\telse\n\t\t{\n\t\t\tvar myXmlFile = new XmlFile(); \n\t\t\tbRet = myXmlFile.loadFromString(strXML); \n\t\t\tvar arrChildCallInfo = null;\n\t\t\tvar arrCallInfo = new Array();\n\t\t\tvar strDocs = \"\";\n\t\t\tfor (count = 0; count < myXmlFile.methodCallResult.params.length; count ++) \n\t\t\t{\n\t\t\t\tif(myXmlFile.methodCallResult.params[count].nodeName==\"callActionStatus\")\n\t\t\t\t{  \n\t\t\t\t\tvar boolSuccess = myXmlFile.methodCallResult.params[count]['success'].nodeValue;\n\t\t\t\t\tif(boolSuccess==\"false\")\n\t\t\t\t\t{\n\t\t\t\t\t\tvar strMessage =  myXmlFile.methodCallResult.params[count]['message'].nodeValue;\n\t\t\t\t\t\tMessageBox(strMessage);\n\t\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar strCallref = myXmlFile.methodCallResult.params[count]['callref'].nodeValue;\n\t\t\t\t\tvar strIndex = myXmlFile.methodCallResult.params[count]['udIndex'].nodeValue;\n\t\t\t\t\t\n\t\t\t\t\tarrCallInfo[strCallref] = strIndex;\n\t\t\t\t}\n\t\t\t\telse if(myXmlFile.methodCallResult.params[count].nodeName==\"callFileAttachment\")\n\t\t\t\t{\n\t\t\t\t\tvar intCount = app.array_count(arrCallInfo);\n\t\t\t\t\tif(intCount==1)\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar updateId = myXmlFile.methodCallResult.params[count]['updateId'].nodeValue;\n\t\t\t\t\t\t\tif(updateId==arrCallInfo[strCallref])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pathName = myXmlFile.methodCallResult.params[count]['pathName'].nodeValue;\n\t\t\t\t\t\t\t\tvar fileName = myXmlFile.methodCallResult.params[count]['fileName'].nodeValue;\n\t\t\t\t\t\t\t\tvar fileSize = myXmlFile.methodCallResult.params[count]['fileSize'].nodeValue;\n\t\t\t\t\t\t\t\tif(strDocs!=\"\") strDocs +=\"\\r\\n\";\n\t\t\t\t\t\t\t\tstrDocs +='displayname=\"'+fileName+'\"; path=\"'+pathName+'\"; size=\"'+fileSize+'\";';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/ --\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\/\/-- add knowledge base\tbut only if we have one call\n    \t\tif(flg_addKBase.text == \"1\")\n    \t\t{\n    \t\t\tadd_call_to_knowledgebase(intLoggedCallref);\n    \t\t}\n    \t\t\t\n\t\t\t\/\/ If we have been invoked to update a call from an e-mail message, this update will \n\t\t\t\/\/ only relate to a single call. We can only handle e-mail audit trail if we are working\n\t\t\t\/\/ on a single-call update. \n\t\t\tif(_swdoc._form[\"messagesource\"] && \t\/\/ Are we working from an e-mail message?\n\t\t\t\tdd.GetGlobalParamAsNumber(\"Email Audit Trail\/StoreEmailAuditTrail\")) \/\/ Are we configured?\n\t\t\t{\n\t\t\t\tapp.g.attach_message_to_call(_swdoc._form,intLoggedCallref,arrCallInfo[intLoggedCallref]);\n\t\t\t}\n\t\n    \t\t\/\/ if we want to send an email to the customer AND there are file attachments, obtain the \n    \t\t\/\/ attachments to attach to the email as well\n    \t\tvar flSessionFilesInfo = \"\";\n    \t\tif(mainform.flg_emailcustomer.value && app.global.IsConnectedToMailServer())\n    \t\t{\n\t\t\t\t\/\/ Now, compose an email to the customer\t\t\t\t\n\t\t\t\tapp.global.ComposeCallUpdateEmail(arrCallInfo, \t\t\t\t\t\/\/ Array: Call reference-UdIndex\n\t\t\t\t\t\t\t\t\t\t_swdoc.updatedb.updatetxt, \t\/\/ Message text\n\t\t\t\t\t\t\t\t\t\tstrDocs, \t\t\/\/ File attachments\n\t\t\t\t\t\t\t\t\t\t_swdoc.updatedb.timespent,\n\t\t\t\t\t\t\t\t\t\t\"CloseCallMailTemplate\", \t\t\/\/ Template name\n\t\t\t\t\t\t\t\t\t\tTEMPLATE_CLOSECALL,\t\t\t\t\/\/ Template type\n\t\t\t\t\t\t\t\t\t\tfunction()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tfuncCloseForm(function()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tfuncCallback(true);\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncCloseForm(function()\n\t\t\t\t{\n\t\t\t\t\tfuncCallback(true);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\tfuncCallback(false);\n\t\treturn;\n\t}\n}\n\nfunction getReadableDatefromEpoch(dt_epochdate)\n{\n\tvar strFormattedDate = \"\";\n\tvar theDate = new Date(dt_epochdate);\n\tdateString = theDate.toString();\n\tarrDateStr = dateString.split(\" \");\n\tstrFormattedDate = arrDateStr[2] + \"\/\" + getNumericMonth(arrDateStr[1]) + \"\/\" + arrDateStr[3] + \" \" + arrDateStr[4].substr(0,2) + \":\";\n\tstrFormattedDate += arrDateStr[4].substr(3,2) + \":\" + arrDateStr[4].substr(6,2);\n\treturn strFormattedDate;\n}\n\nfunction getNumericMonth(strMonth)\n{\n\tvar arrMonth = new Array(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\");\n\tfor(i=0; i<arrMonth.length; i++)\n\t{\n\t\tif(strMonth == arrMonth[i])\n\t\t\treturn i+1;\n\t}\n}\n\nfunction replaceIllegalFileCharacters(strText)\n{\n\t\/\/-- This function is used to replace characters in the passed in string that \n\t\/\/-- are not suitable for use in filenames and return the modified string \n\t\n\tstrOutput = strText;\n\tstrReplacement = \"-\";\n\tvar i = 0;\n\t\n\twhile(i < strOutput.length)\n\t{\n\t\tstrOutput = strOutput.replace('\/', strReplacement);\n\t\tstrOutput = strOutput.replace(':', strReplacement);\n\t\tstrOutput = strOutput.replace('*', strReplacement);\n\t\tstrOutput = strOutput.replace('?', strReplacement);\n\t\tstrOutput = strOutput.replace('\"', strReplacement);\n\t\tstrOutput = strOutput.replace('\\'', strReplacement);\n\t\tstrOutput = strOutput.replace('<', strReplacement);\n\t\tstrOutput = strOutput.replace('>', strReplacement);\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn strOutput;\n}"},{"name":"cb_callaction_OnValueChanged","code":"cb_callaction_OnValueChanged(strValue)\n{\n\t\/\/-- set mode and then setup defaults for that mode\n\t_swdoc.boolClosing = (strValue!=\"Resolve Call\");\n\t_swdoc.setup_charge_flag(false);\n\n}"},{"name":"flg_customersurvey_OnValueChanged","code":"flg_customersurvey_OnValueChanged(strValue)\n{\n\t\/\/-- enable disable\n\tvar bChecked = flg_customersurvey.text == \"1\";\n\tapp._een(cb_surveys , bChecked);\n\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- This value is set when a field value has been changed.\n\t\/\/-- We check this variable on from closing to see if there are any data changes that need to be saved.\n\t_swdoc.boolFormFieldChanged = true;\n\n\n}"},{"name":"dt_actiontime_OnValueChanged","code":"dt_actiontime_OnValueChanged(strValue)\n{\n\t\/\/ -- Var used in this to calculate backDatePeriod\n\tvar nBackdatePeriod = 0;\n\t\n\t\/\/ -- Calculate the backDatePeriod for processing\n\tvar updateDateTime = mainform.dt_actiontime.text;\n\tvar updateDateTimeValue = mainform.dt_actiontime.value;\n\tnBackdatePeriod = _swdoc.intGetCurrentEpocTime - updateDateTimeValue;\n\t\n\t\/\/ -- Processing to set \"updatedb.updatetimex\" and set _swdoc level nBackdatePeriod variable for use in Resolve\/Close action\n\tvar funcProcessBackdate = function()\n\t{\n\t\tif(nBackdatePeriod==0)\n\t\t{\n\t\t\t_swdoc.updatedb.updatetimex = _swdoc.intGetCurrentEpocTime;\n\t\t}\n\t\tif(_swdoc.boolSetToMaxBackdatePeriod)\n\t\t{\n\t\t\t_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t}\n\t\t_swdoc.nBackdatePeriod = nBackdatePeriod;\t\n\t\t_swdoc.UpdateFormFromData();\n\t}\n\t\n\t\/\/ -- Deny if the user has attempted to forward the Date\/Time\n\tif(nBackdatePeriod < 0)\n\t{\n\t\tMessageBox(\"You have attempted to forward date this call update which is not allowed.\");\n\t\t_swdoc.boolSetToMaxBackdatePeriod = false;\n\t\tnBackdatePeriod=0;\n\t\tfuncProcessBackdate();\n\t}\n\telse\n\t{\t\n\t\t\/\/ -- Check that the selected Date\/Time value does not exceed the maximum allowed backDatePeriod and prompt with an option to set to allowed Date\/Time value\n\t\tif(nBackdatePeriod > app.session.GetMaxBackdatePeriodAllowed())\n\t\t{\n\t\t\tvar dTime = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t\tvar strMsg = \"You have attempted to backdate this call update further than you have sufficient privileges to do so.\\n\\nDo you want to use the oldest date\/time that you are allowed: \" + app.global.ConvertDateTimeInText(app.global.GetAsISO8601TimeString(dTime));\n\t\t\tMessageBox(strMsg, MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t\t{\t\n\t\t\t\tif(intDecision != IDYES)\n\t\t\t\t{\n\t\t\t\t\tnBackdatePeriod = 0;\n\t\t\t\t\t_swdoc.boolSetToMaxBackdatePeriod = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\/\/ -- Maximum backdate period allowed should only be calculated when invoking the API otherwise the value will be inacurrate\n\t\t\t\t\tnBackdatePeriod = 0;\n                    _swdoc.boolSetToMaxBackdatePeriod = true;\n\t\t\t\t}\n\t\t\t\tfuncProcessBackdate();\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/ -- timeOfAction param in resolveCalls API expects .value property of Date\/Time control field\n\t\t\tnBackdatePeriod = updateDateTimeValue;\n\t\t\t_swdoc.boolSetToMaxBackdatePeriod = false;\n\t\t\tfuncProcessBackdate();\n\t\t}\n\t}\t\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{}}]}}}