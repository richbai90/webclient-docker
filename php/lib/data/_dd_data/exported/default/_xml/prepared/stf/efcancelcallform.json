{"espForm":{"configuration":{"settings":{"name":"EfCancelCallForm","title":"Cancel Call Form","options":{"allowResize":"true","showMenubar":"true","showToolbar":"false","showStatusBar":"false"}},"tables":{"table":[{"name":"updatedb","type":"Main Details Table","flags":"205"},{"name":"opencall","type":"Extended Details Table","mainDetailsColumn":"callref","flags":"0"}]},"javascript":{"methods":{"method":[{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t\/\/-- If the analyst does not have permissions to modify the status of call\n\t\/\/--  then they should not be able to cancel a call\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t{\n    MessageBox(\"I am sorry, you do not have sufficient privileges to perform that action.  Please contact your system administrator\");\n    return false;\n\t}\n\t\n\tif(!_swdoc.check_callclass_cancel(_swdoc._form[\"callrefs\"]))return false;\n\t\n\t\/\/-- Get list of comma separated callrefs from the form\n\t_swdoc.CallrefsCommaString = _swdoc._form[\"callrefs\"];\n\t\n\t\/\/-- Check if the call can be locked, if it cannot be locked then it is in use and \n\t\/\/-- therefore we should not be able to cancel the call so we stop the form loading\n\tif(!app.global.LockCalls(_swdoc.CallrefsCommaString, \"CANCEL\"))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\n\t\/\/-- Create an array containing the list of callrefs\n\t_swdoc.Callrefs = _swdoc.CallrefsCommaString.split(\",\");\n\n\t\/\/-- Start creating the form title and make it \"Cancel Call\" or \"Cancel Calls\" if there \n\t\/\/-- are more than one callref in the array\n\tvar FormTitle = (_swdoc.Callrefs.length > 1) ? \"Cancel Calls \" : \"Cancel Call \";\n\t\n\t\/\/-- loop through the callrefs\n\tfor(i=0;i<_swdoc.Callrefs.length; i++)\n\t{\n\t\tif( i > 0)\n\t\t\tFormTitle += \", \";\n\t\t\t\n\t\t\/\/-- Convert the call ref to \"F000000x\" format and add it to the title string\n\t\tFormTitle += app.g.pad_callref(_swdoc.Callrefs[i]);\n\t}\n\t\n\t\/\/-- Set the _swdoc title\n\t_swdoc.SetTitle(FormTitle);\n\t\n\t\/\/-- Q? Function Not documented\n\t_swdoc.ResetModiedFlag(\"updatedb\");\n\t\t\n\treturn true;\n}"},{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\tif (_swdoc.boolForceClose)\n\t{\n\t\treturn true;\n\t}\t\n\n\tvar funcUnlockReset = function()\n\t{\n\t\t\/\/-- Unlock the call(s) we have been cancelling\n\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\t\n\t\t\/\/-- This is not documented\n\t\t_swdoc.ResetData();\n\n\t\treturn true;\n\t}\n\t\n\t\/\/Check for Changes to any of the data fields\n\tif(_swdoc.bFormFieldChanged)\n\t{\n\t\tMessageBox(\"You have unsaved data on this form. Do you still want to close this form?\", MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t{\n\t\t\tif (intDecision == IDNO)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncUnlockReset();\n\t\t\t\t_swdoc.boolForceClose = true;\n\t\t\t\t_swdoc.CloseForm();\n\t\t\t}              \n\t\t});\n\t}\n\telse\n\t{\n\t\treturn funcUnlockReset();\n\t}\t\n}"},{"name":"(Globals)","code":"var bFormFieldChanged = false;\t\/\/This var is used to check for changes to data fields and is set to true when any \n\t\t\t\t\t\t\t\t\/\/field data is changed\n\nvar boolForceClose = false;\t\t\t\t\t\n\t\t\t\t\t\t\t\t\nfunction check_callclass_cancel(strCheckCallrefs)\n{\n    var aRScallstate = new SqlQuery;\n\tvar strSelect = \"SELECT  callclass FROM opencall WHERE callref IN(\" + strCheckCallrefs + \")\";\n\t\n    if(aRScallstate.Query(strSelect, \"sw_systemdb\"))\n    {\n\t\t\/\/--\n\t\t\/\/-- loop through our returned rows and get state and classes\n\t\tvar strCurrentCallClass = \"\";\n\t\tvar strLastCallClass = \"\";\t\t\t\t\t\n\t\t\n\t\tvar nPendingStatus = 0;\n\t\tvar nResolvedStatus = 0;\n\t\tvar nOtherStatus = 0;\t\n\t\t\n\t\twhile(aRScallstate.Fetch())\n\t\t{\t\t\t\n\t\t\t\/\/-- get status and callref and add info an array\n\t\t\tvar strCallClass =  aRScallstate.GetValueAsString(\"callclass\");\n\t\t\tif(!app.itsm.can_cancel(strCallClass,true))return false;\n\t\t}\n\t}\n\treturn true;\n}"},{"name":"OnSaveData","code":"OnSaveData()\n{\n\tMessageBox(\"Please use the [Cancel] button to process the cancel action\");\n\treturn false;\n\n\n\t\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"554","height":"361","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"Rect1","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"0","backgroundColor":"#d4d0c8","foregroundColor":"#dddddd","font":{"@size":"0"},"borderStyle":"Rectangle","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"-1","left":"0","right":"560","bottom":"24"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"CaptionPanel2","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"1","caption":"Details","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"28","left":"2","right":"393","bottom":"171"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"cb_reason","type":"Field"},"appearance":{"index":"2","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"145","left":"17","right":"284","bottom":"163"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","listItems":"Customer has corrected problem|This is a duplicate of the call whose reference is|Other reason (state below)|","defaultValue":"Customer has corrected problem","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_duplicateref","type":"Field"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"145","left":"290","right":"385","bottom":"163"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"true","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_reasontext","type":"Field"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"208","left":"7","right":"546","bottom":"352"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"data":{"binding":"updatedb.updatetxt"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"true","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"CaptionPanel3","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"5","caption":"Options","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"28","left":"401","right":"550","bottom":"171"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"flg_updatepublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"6","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"56","left":"406","right":"535","bottom":"74"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Update to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"btnOk","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"7","caption":"Cancel","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"-1","left":"8","right":"78","bottom":"22"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Helpdesk Tools;IconIndex=7","backgroundColor":"#ff9900"}}},{"general":{"type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"8","caption":"You should enter the reason for cancelling the call below. You should only cancel a call if the call is to be totally disregarded. You can reactivate the call at a later date if you wish.","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"62","left":"14","right":"383","bottom":"113"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"true"}}},{"general":{"name":"Text1","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"9","caption":"Reason for Cancelling Call","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"126","left":"13","right":"158","bottom":"140"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_callref","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","caption":"Call Reference","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"126","left":"286","right":"363","bottom":"140"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"CaptionPanel1","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"11","caption":"Other Information","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"178","left":"2","right":"550","bottom":"359"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}}]},"javascript":{"methods":{"method":[{"name":"btnOk_OnPressed","code":"btnOk_OnPressed()\n{\n\t\/\/ -- Check that the reason for cancelling the call IS entered\n\tif(tb_reasontext.text.length<2)\n\t{\n\t\tMessageBox(\"Enter your reason for cancelling this call.\", MB_OK);\n\t\treturn false;\n\t}\n\t\n\t\/\/ -- Get formatted Callref\n\tvar strSQL = \"SELECT H_FORMATTEDCALLREF FROM OPENCALL WHERE CALLREF IN(\" + _swdoc.CallrefsCommaString + \")\";\n\tvar oRS = app.g.get_recordset(strSQL,\"sw_systemdb\");\n\tvar strFmtCallRefList = \"\";\n\twhile(oRS.Fetch())\n\t{\n\t\tif(strFmtCallRefList!=\"\") strFmtCallRefList+= \",\";\n\t\tstrFmtCallRefList += app.g.get_field(oRS,\"h_formattedcallref\");\n\t}\n\t\n\t\/\/ -- Check that a Callref is entered, when the reason for cancellation is duplicate reference\n\tif((cb_reason.text == \"This is a duplicate of the call whose reference is\")  && ((tb_duplicateref.text < 1) || (tb_duplicateref.text == \"F0000000\")))\n\t{\n\t\tMessageBox(\"Enter the Call reference of the duplicate call.\", MB_OK);\n\t\treturn false;\n\t}\n\t\n\t\/\/ -- Confirm that the analyst wishes to cancel the call showing a list of the calls to be closed\t\t\t\n\tvar strMsg = \"\";\n\tstrMsg = \"Are you sure you want to cancel the selected calls?\\n\\n\";\n\tif(strFmtCallRefList!=\"\")\n\t\tstrMsg+= strFmtCallRefList;\n\t\t\n\t\/\/ -- If the analyst does not select Yes then quit otherwise cancel the call\n\tMessageBox(strMsg, MB_ICONQUESTION | MB_YESNO, function(oMsg)\n\t{\n\t\tif(oMsg!=IDYES)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/ -- Cancel a call using XMLMC API\n\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\t\/\/ -- API method\n\t\t\tvar strMethod = \"cancelCalls\";\t\n\t\t\t\/\/ -- Find modified values in UPDATEDB table\n\t\t\tvar arrExtraUpdateDbValues = new Array();\n\t\t\tvar strUpdateDbValues = \"\";\n\t\t\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t\t\t{\n\t\t\t\tvar nColCount = rec.GetCount();\n\t\t\t\tfor(x = 0; x < nColCount; x++)\n\t\t\t\t{\n\t\t\t\t\tif(!rec.IsModified(x))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (fieldName in arrExtraUpdateDbValues)\n\t\t\t{\n\t\t\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ ** API params ** \/\/\n\t\t\tvar arrCallrefs = _swdoc._form[\"callrefs\"].split(\",\");\n\t\t\tfor(x in arrCallrefs)\n\t\t\t\txmlmc.SetValue(\"callRef\", arrCallrefs[x]);\n\t\t\txmlmc.SetValue(\"description\",rec.updatetxt);\n\t\t\txmlmc.SetValue(\"publicUpdate\",flg_updatepublic.value);\n\t\t\tif(strUpdateDbValues!=\"\")\n\t\t\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\n\t\t\t\/\/ ** EO API params ** \/\/\n\t\t\t\n\t\t\t\/\/ -- Invoke XMLMC API\n\t\t\tif(xmlmc.Invoke(\"helpdesk\",strMethod))\n\t\t\t{\n\t\t\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\t\t\tvar objRes = app.XMCResult(strXML);\n\t\t\t\tif(!objRes.success)\n\t\t\t\t{\n\t\t\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t_swdoc.bFormFieldChanged = false;\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t}\n\t\t\t\n\t\t\t\/\/ -- Close Form\t\t\t\n\t\t\t_swdoc.CloseForm();\n\t\t}\t\n\t});\n}"},{"name":"checkDupicateRef_OnLeftClick","code":"checkDupicateRef_OnLeftClick()\n{\n\t\/\/ TODO: Add your event handler code here\n\tapp._een(ReasonText , false);\n\tapp._ete(checkCustomer , \"0\");\n\tapp._ete(checkOtherReason , \"0\");\n\t\n\tapp._een(DuplicateRef , true);\n\tvar dupCallRef;\n\t\n\tif(DuplicateRef.text.length)\n\t{\n\t\tvar ch = DuplicateRef.text[0];\n\t\tif(ch.toUpperCase() == 'F')\n\t\t{\n\t\t\tvar temp = DuplicateRef.text;\n\t\t\tvar dupCallRef = temp.substring(1,temp.length-1);\n\t\t\t \n\t\t\tif(dupCallRef < 1 || dupCallRef > 9999999) \n\t\t\t{\n\t\t\t\tMessageBox(\"Invalid Call Reference\", MB_OK | MB_ICONINFORMATION);\n\t\t\t\tapp._ete(DuplicateRef , \"\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tapp._ete(DuplicateRef , dupCallRef);\n\t\t}\n\t}\n\t\n\t\n\tReasonText = \"This call has been cancelled because it was a duplicate log of \" + DuplicateRef.text;\n\n\tif(DuplicateRef.text.length)\n\t\tapp._ete(dupCallRef , FFormatCallref(dupCallRef));\n\n\treturn true;\n}"},{"name":"checkDupicateRef_OnValueChanged","code":"checkDupicateRef_OnValueChanged(strValue)\n{\n\t\/\/ TODO: Add your event handler code here\n\tReasonText = \"This call has been cancelled because it was a duplicate log of \" + DuplicateRef.text;\n\n}"},{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\t\/\/-- Set the cancellation reason text\n\tapp._ete(cb_reason , \"Customer has corrected problem\");\n\t\n\t\/\/-- Set the cancellation description text\n\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because the user has resolved the problem and called to cancel the request.\";\n\t_swdoc.UpdateFormFromData();\n\t\n}"},{"name":"Reason_OnValueChanged","code":"Reason_OnValueChanged(strValue)\n{\n\t\/\/-- Depending on the option selected in the drop down box the relevant fields will be hidden, shown or set \n\t\/\/-- as required for the chosen option, by default \"Customer has corrected the problem\" is the selected option\n\t\t\n\tif(strValue == \"Customer has corrected the problem\")\n\t{\n\t\t\/\/-- If \"Customer has corrected the problem\" option is selected from the list hide the duplicate \n\t\t\/\/call label and field and enable the reason text to be edited\n\t\tapp._evi(LabelCalref , false);\n\t\tapp._ete(DuplicateRef , \"\");\n\t\tapp._evi(DuplicateRef , false);\n\t\tapp._een(ReasonText , false);\n    \t_swdoc.updatedb.updatetxt = \"This call has been cancelled because the user has resolved the problem and called to cancel the request.\";\n\t}\n\telse if(strValue == \"This is a duplicate of the call whose reference is\")\n\t{\n\t\t\/\/-- If the option is selected to cancel a call as it is a duplicate then enable the duplicate label and field,\n\t\t\/\/-- fill in the text description and disable the field to prevent changes\n\t\tapp._evi(LabelCalref , true);\n\t\tapp._evi(DuplicateRef , true);\n\t\t\/\/DuplicateRef.enable = true;\n\t\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because it was a duplicate log of \" + dd.tables.opencall.columns.callref.FormatValue(DuplicateRef.text);\n\t\tapp._een(ReasonText , false);\n\t}\n\telse if(strValue == \"Other reason (state below)\")\n\t{\n\t\t\/\/-- If \"Other Reason\" option is selected from the list hide the duplicate call label and field\n\t\t\/\/-- and enable the reason text to be edited\n\t\tapp._evi(LabelCalref , false);\n\t\tapp._ete(DuplicateRef , \"\");\n\t\tapp._evi(DuplicateRef , false);\n\t\tapp._een(ReasonText , true);\n\t\t_swdoc.updatedb.updatetxt = \"<Type your reason for cancelling the call>\";\n\t}\n\t\n\t\/\/-- Update the data bound to the form to ensure the update text is correct\n\t_swdoc.UpdateFormFromData();\n\n}"},{"name":"DuplicateRef_OnValueChanged","code":"DuplicateRef_OnValueChanged(strValue)\n{\n\t\n\t\/\/-- If a duplicate reference has been entered then we remove any leading F character\n\t\/\/-- and send the resulting numeric callref to be formatted to the form \"Fxxxxxxx\"\n\tif(DuplicateRef.text.length)\n\t{\n\t\tvar strCallRef = strValue;\n\t\tvar strLeadChar = DuplicateRef.text[0];\n\t\tif(strLeadChar.toUpperCase() == \"F\")\n\t\t{\n\t\t\tstrCallRef = strCallRef.substr(1, strCallRef.length);\n\t\t}\n\t\t\n\t\t\/\/-- Check that the numeric part of the callref is within the range 1-999999999,\n\t\t\/\/-- if it is out of range then inform the analyst and clear the field\n\t\tif(strCallRef < 1 || strCallRef > 999999999) \n\t\t{\n\t\t\tMessageBox(\"Invalid Call Reference\", MB_OK | MB_ICONINFORMATION);\n\t\t\tapp._ete(DuplicateRef , \"\");\n\t\t\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because it was a duplicate log of \" + dd.tables.opencall.columns.callref.FormatValue(DuplicateRef.text);\n\t\t\t_swdoc.UpdateFormFromData();\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t\tapp._ete(DuplicateRef , dd.tables.opencall.columns.callref.FormatValue(strCallRef));\n\t}\n\t\n\t\/\/-- Set the text in the reason for cancellation field\t\t\n\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because it was a duplicate log of \" + DuplicateRef.text; \/\/FFormatCallref(DuplicateRef.text);\n\t_swdoc.UpdateFormFromData();\n}"},{"name":"tb_duplicateref_OnValueChanged","code":"tb_duplicateref_OnValueChanged(strValue)\n{\n\t\/\/-- If a duplicate reference has been entered then we remove any leading F character\n\t\/\/-- and send the resulting numeric callref to be formatted to the form \"Fxxxxxxx\"\n\tif(tb_duplicateref.text.length)\n\t{\n\t\tvar strCallRef = strValue.replace(\/\\D\/g,'');\n\t\tvar strSQL = \"SELECT H_FORMATTEDCALLREF FROM OPENCALL WHERE CALLREF IN(\" + strCallRef + \")\";\n\t\tvar oRS = app.g.get_recordset(strSQL,\"sw_systemdb\");\n\t\tvar strFmtCallRefList = \"\";\n\t\twhile(oRS.Fetch())\n\t\t{\n\t\t\tif(strFmtCallRefList!=\"\") strFmtCallRefList+= \",\";\n\t\t\tstrFmtCallRefList += app.g.get_field(oRS,\"h_formattedcallref\");\n\t\t}\n\t\tif(strFmtCallRefList==\"\")\n\t\t\tMessageBox(\"This Call Reference does not exist.\", MB_OK | MB_ICONINFORMATION);\n\t\t\n\t\t\/\/-- Check that the numeric part of the callref is within the range 1-999999999,\n\t\t\/\/-- if it is out of range then inform the analyst and clear the field\n\t\tif(strCallRef < 1 || strCallRef > 999999999) \n\t\t{\n\t\t\tMessageBox(\"This Call Reference is invalid.\", MB_OK | MB_ICONINFORMATION);\n\t\t\tapp._ete(tb_duplicateref , \"\");\n\t\t\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because it was a duplicate log of \" + strFmtCallRefList;\n\t\t\t_swdoc.UpdateFormFromData();\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t\tapp._ete(tb_duplicateref , strFmtCallRefList);\n\t}\n\n\t\/\/-- Set the text in the reason for cancellation field\t\t\n\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because it was a duplicate log of \" + tb_duplicateref.text; \n\t_swdoc.UpdateFormFromData();\n\n\n}"},{"name":"cb_reason_OnValueChanged","code":"cb_reason_OnValueChanged(strValue)\n{\n\t\/\/-- Depending on the option selected in the drop down box the relevant fields will be hidden, shown or set \n\t\/\/-- as required for the chosen option, by default \"Customer has corrected the problem\" is the selected option\n\n\t\t\t\n\tif(strValue == \"Customer has corrected problem\")\n\t{\n\t\t\/\/-- If \"Customer has corrected the problem\" option is selected from the list hide the duplicate \n\t\t\/\/call label and field and enable the reason text to be edited\n\t\tapp._evi(lbl_callref , false);\n\t\tapp._ete(tb_duplicateref , \"\");\n\t\tapp._evi(tb_duplicateref , false);\n\t\tapp._een(tb_reasontext , false);\n    \t_swdoc.updatedb.updatetxt = \"This call has been cancelled because the user has resolved the problem and called to cancel the request.\";\n\t}\n\telse if(strValue == \"This is a duplicate of the call whose reference is\")\n\t{\n\t\t\/\/-- If the option is selected to cancel a call as it is a duplicate then enable the duplicate label and field,\n\t\t\/\/-- fill in the text description and disable the field to prevent changes\n\t\tapp._evi(lbl_callref , true);\n\t\tapp._evi(tb_duplicateref , true);\n\t\t\/\/DuplicateRef.enable = true;\n\t\t_swdoc.updatedb.updatetxt = \"This call has been cancelled because it was a duplicate log of \" + tb_duplicateref.text;\n\t\tapp._een(tb_reasontext , false);\n\t}\n\telse if(strValue == \"Other reason (state below)\")\n\t{\n\t\t\/\/-- If \"Other Reason\" option is selected from the list hide the duplicate call label and field\n\t\t\/\/-- and enable the reason text to be edited\n\t\tapp._evi(lbl_callref , false);\n\t\tapp._ete(tb_duplicateref , \"\");\n\t\tapp._evi(tb_duplicateref , false);\n\t\tapp._een(tb_reasontext , true);\n\t\t_swdoc.updatedb.updatetxt = \"<Type your reason for cancelling the call>\";\n\t}\n\t\n\t\/\/-- Update the data bound to the form to ensure the update text is correct\n\t_swdoc.UpdateFormFromData();\n\n\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- This value is set when a field value has been changed.\n\t\/\/-- We check this variable on from closing to see if there are any data changes that need to be saved.\n\t_swdoc.bFormFieldChanged = true;\n\n\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{}}]}}}