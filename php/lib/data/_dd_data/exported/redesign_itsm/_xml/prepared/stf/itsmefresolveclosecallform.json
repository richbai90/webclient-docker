{"espForm":{"configuration":{"settings":{"name":"itsmEfResolveCloseCallForm","title":"Resolve Close Call Form","options":{"allowResize":"true","showMenubar":"true","showToolbar":"false","showStatusBar":"false"}},"tables":{"table":[{"name":"updatedb","type":"Main Details Table","flags":"5"},{"name":"opencall","type":"Extended Details Table","mainDetailsColumn":"callref","flags":"0"}]},"javascript":{"methods":{"method":[{"name":"OnFormLoading","code":"OnFormLoading(strFormName, strClass)\n{\n\t_swdoc.intGetCurrentEpocTime = app.global.GetCurrentEpocTime();\n\t\n\t\/\/-- If the analyst does not have permissions to modify the status of call\n\t\/\/-- then they should not be able to resolve\/close a call\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANMODIFYCALLS))\n\t{\n    \tMessageBox(\"You do not have sufficient privileges to modify calls.  Please contact your system administrator\",MB_ICONSTOP);\n    \treturn false;\n\t}\n\t\n\t\/\/-- make sure user is allowed to resolve or close calls\n\tif( (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS)) && (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS)) )\n\t{\n\t\tMessageBox(\"You do not have sufficient privileges to resolve or close calls.  Please contact your system administrator\",MB_ICONSTOP);\t\n\t\treturn false;\n\t}\n\n\tvar boolOLAs = true;\n\tvar strParams = \"crfs=\"+app.pfu(_swdoc._form[\"callrefs\"]);\n\tvar oRS = app.g.get_sqrecordset(\"form\/resolvecloseform\/get_classes_for_calls\",strParams);\n\twhile(oRS.Fetch())\n\t{\n\t\tvar strClass = app.g.get_field(oRS, \"callclass\");\n\t\tif(strClass!=\"OLA Task\")\n\t\t\tboolOLAs = false;\n\t}\n\tif(boolOLAs)\n\t{\n\t\tvar strArgs = \"in_callrefs=\" + _swdoc._form[\"callrefs\"];\n\t\tapp.OpenForm(\"itsmEfResolveCloseCallForm_OLT\", strArgs, true);\n\t\treturn false;\t\t\n\t}\n\n\t\/\/-- returns true or false - true keeps form open \/ false will close form\t\n\t_swdoc.setup_document_variables(function(boolRetVal)\n\t{\n\t\t_swdoc.resetData();\n\t\n\t\treturn boolRetVal;\n\t});\n\t\n\t\n\t\n\t\n}"},{"name":"OnFormClosing","code":"OnFormClosing()\n{\n\tif (_swdoc.boolForceClose)\n\t{\n\t\treturn true;\n\t}\n\t\n\tvar funcFinalProcessing = function()\n\t{\n\t\tif(!_swdoc.CallrefsCommaString.length)\n\t\t{\t\n\t\t\t_swdoc.ResetData();\n\t\t\treturn true;\n\t\t}\t\t\n\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\t_swdoc.resetData();\t\n\t\treturn true;\n\t}\n\t\n\t\/\/-- Check for Changes to any of the data fields\n\tif(_swdoc.boolFormFieldChanged)\n\t{\t\t\n\t\tMessageBox(\"You have unsaved data on this form. Do you still want to close this form?\", MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t{\n\t\t\tif(intDecision == IDNO)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncFinalProcessing();\n\t\t\t\t_swdoc.boolForceClose = true;\n\t\t\t\t_swdoc.CloseForm();\t\t\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\treturn funcFinalProcessing();\n\t}\t\n}"},{"name":"(User Defined Functions)","code":"\t\/*\n\t\tCreated by Hornbill Systems\n\t\t\n\t\tUpdates\n\t\t\n\t\t\n\t\tBug\t\tDate\t\tAuthor\t\t\t\t\tDescription\n\t\t----------------------------------------------------------------------------\n\t\t56943\t14\/05\/07\tIvan Nicholas Dorosh\tAbility to set default value for survey.\n\t\n\t\n\t*\/\n\nvar boolLogMode = false; \/\/-- boolean - is the form being displayed in a logcall forn\nvar boolClosing = false; \/\/-- boolean - is the call action to close calls\/s (if false resolving)\nvar boolCloseOnly = false;\nvar boolResolveOnly = false; \/\/-- boolean - is the call for resolving only (not allowed to close)\n\nvar arrCallrefs = new Array(); \/\/-- array - holds the callrefs we want to close or resolve\nvar CallrefsCommaString = \"\";  \/\/-- string - comma delimted callrefs\nvar strIssueref = \"\";\t\t   \/\/-- string - has issue refs in it if we are closing an issue\n\t\nvar arrSurveyNameSurvIDs = new Array(); \/\/-- array - holds list of survey ids \nvar arrContractNameIDs\t = new Array(); \/\/-- array - holds contract ids\nvar arrCallStatuss \t\t = new Array(); \/\/-- array - holds list of the all the calls status\nvar arrCallOpenTasks \t = new Array(); \/\/-- araray - holds list of all the calls tasks\n\nvar boolFormFieldChanged = false;\t\/\/-- boolean - set to true when formfield is changed. Used when closing form\n\nvar boolForceClose = false;\n\nvar boolSourceEmail = false; \/\/-- from opened from email\nvar boolHaveSubject = false; \/\/-- Is there a subject\nvar boolHaveSurveys = false; \/\/-- are there surveys available\n\nvar intFTFAchieved = 0;\nvar boolMixedFTF = false;\nvar boolMixedCallClasses = false; \/\/-- boolean are we working with mixed call classes\nvar boolHavePendingCalls = false; \/\/-- we have calls that are pending\nvar boolHaveResolvedCalls = false; \/\/-- we have calls that are resolved\nvar boolMultipleCalls = false; \/\/-- we are working with multiple calls\n\nvar boolClosingIssue = false; \/\/-- boolean are we closing calls as part of an issue\nvar boolMixedCallStatus  = false  \/\/-- boolean are we working with a mixtuer of call states\n\nvar intGetCurrentEpocTime = app.global.GetCurrentEpocTime();\nvar boolSetToMaxBackdatePeriod = false;\nvar nBackdatePeriod = 0;\n\nvar boolHaveQLogDetails = false; \/\/set to true when the call is being resolved or closed from a Quick Log Template \nvar intQLogChargeable = 0;\nvar intQLogKBase = 0;\nvar intQLogPublic = 0;\nvar intQLogEmail = 0;\nvar strQLogFixCode = \"\";\nvar strQLogContractId = \"\";\nvar intQLogSUnitsDec = 0;\n\n\/\/-- reset bound record so we dont get messages when leaving\nfunction resetData()\n{\n\t_swdoc.ResetModiedFlag(\"updatedb\");\n\t_swdoc.ResetModiedFlag(\"opencall\");\n}\n\n\/\/-- validate form data that user has set\nfunction ValidateForm(funcCallback)\n{\n\tif((_swdoc.updatedb.timespent < 1 || _swdoc.updatedb.timespent > 60000) && (mainform.tb_timespent.mandatory))\n\t{\n\t\tMessageBox(\"You must enter the amount of time you spent on this action\", MB_OK);\n\t\treturn funcCallback(false);\t\/\/ Make sure that the time spent is within range\n\t}\n\n\tif(_swdoc.updatedb.updatetxt == \"\")\n\t{\n\t\tMessageBox(\"You must enter a description in the Action Description tab.\", MB_OK | MB_ICONINFORMATION );\n\t\treturn funcCallback(false);\t\/\/ Make sure we have some update text\n\t}\n\n\t\/\/-- check other required fields\n\tif (!_swdoc.check_mandatory_fields(\"updatedb\",mainform))return funcCallback(false);\t\n\tif (!_swdoc.check_mandatory_fields(\"opencall\",mainform))return funcCallback(false);\n\t\n\t\/\/-- Check for available support units\n\tvar boolShow =dd.GetGlobalParamAsString(\"Application Settings\/SupportExternalCompanies\")==1;\n\tif(boolShow)\n\t{\n\t\tif(mainform.tb_avail_units.value!=\"Unlimited\")\n\t\t{\n\t\t\tif((mainform.tb_units_assigned.value*1) > (mainform.tb_avail_units.value*1))\n\t\t\t{\n\t\t\t\tMessageBox(\"The number of support units entered exceeds those available for the selected contract.  Are you sure you want to continue?\", MB_OKCANCEL | MB_ICONINFORMATION, function(intDecision)\n\t\t\t\t{\n\t\t\t\t\tif(intDecision == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn funcCallback(false);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn funcCallback(true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn funcCallback(true);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn funcCallback(true);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn funcCallback(true);\n\t}\n}\n\n\n\/\/-- 08.02.2007 - NWJ - Check mandatory fields on the form for a given table\n\/\/--\t\t\t\t\talert user if need be and return false\t\n\/\/-- F0095143 - incorrectly checking numeric picklists\t\t\t\t\t\nfunction check_mandatory_fields(strTable,oForm)\n{\n    for (var x = 0; x<oForm.elements.length;x++)\n    {\n        var element = oForm.elements[x];\n        if ((element.mandatory) && (element.text ==\"\"))\n        {\n            var colName = \"\";\n            var fieldName = \"(not specified)\";\n            if(element.dataRef!=\"\")\n            {\n            \tvar arrInfo = element.dataRef.split(\".\");\n            \tvar strTable = arrInfo[0];\n            \tvar colName = arrInfo[1];\n            \tvar fieldName = dd.tables[strTable].columns[colName.toLowerCase()].DisplayName;\n            }\n            MessageBox(\"The field '\" + fieldName + \"' is a mandatory field and must be completed.\");\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction setup_call_action()\n{\n\t\/\/-- should list box be selectatable\n\t\/\/-- closing\n\t\n\tif ((_swdoc.boolCloseOnly) || (_swdoc.boolClosing))\n\t{\n\t\tif(_swdoc.boolCloseOnly)_swdoc.boolClosing = true;\n\t\t\/\/ind01 Ivan Nicholas Dorosh 02\/04\/07 - Set the text regardless of what the form is set to\n\t\tapp._ete(mainform.cb_callaction,\"Close Call\");\n\t\t\n\t\t\/\/-- closing\n\t\t\/\/-- If closing call do not allow user to select fix code profile\n\t\t\/\/-- due to core product server restrictions\n\t\t\/\/ind02 mainform.btnBrowseProfile.enable=_swdoc.boolMixedCallStatus;\n\t\t\/\/ind02 mainform.btnGetProfileText.enable = false;\t\t\n\t\t\/\/ind02 This code just didn't make sense.  Checked with AndreiT, and confirmed\n\t\t\/\/ That this should not be enabled for Mixed Call Statuses only.\n\t\tapp._een(mainform.btnBrowseProfile,(_swdoc.boolMixedCallStatus==false));\n\t\tapp._een(mainform.btnGetProfileText,(_swdoc.boolMixedCallStatus==false));\n\t\t\t\t\n\t\tvar boolEnableFTF = dd.GetGlobalParamAsNumber(\"Application Settings\/EnableFirstTimeFixWhenClosing\", 0);\n\t\tapp._ete(mainform.flg_ftf,_swdoc.intFTFAchieved + \"\");\n\t\t_swdoc.opencall.flg_firsttimefix = _swdoc.intFTFAchieved + \"\";\n\t\tapp._een(mainform.flg_ftf,((boolEnableFTF)&&(_swdoc.intFTFAchieved==0)));\n\t}\n\telse\n\t{\n\t\n\t\t\/\/ind01 Ivan Nicholas Dorosh 02\/04\/07 - Set the text regardless of what the form is set to\n\t\tapp._ete(mainform.cb_callaction,\"Resolve Call\");\n\t\t\n\t\t\/\/ind02 \/\/-- resolving or could be closing\n\t\t\/\/ind02 mainform.btnBrowseProfile.enable=true;\n\t\t\n\t\t\/\/ind02 This code just didn't make sense.  Checked with AndreiT, and confirmed\n\t\t\/\/ That this should not be enabled for Mixed Call Statuses only.\n\t\tapp._een(mainform.btnBrowseProfile,(_swdoc.boolMixedCallStatus==false));\n\t\t\/\/_een(mainform.btnGetProfileText,(_swdoc.boolMixedCallStatus==false));\n\t\tapp._een(mainform.btnGetProfileText, _swdoc.boolClosing);\n\t\t\n\t\t\/\/-- NWJ - 23.11.2007 - always enable first time fix\n\t\tapp._een(mainform.flg_ftf,true);\n\t\tapp._ete(mainform.flg_ftf,\"0\");\n\t\t_swdoc.opencall.flg_firsttimefix = \"0\";\t\n\t}\n\t\n\t\/\/-- set menu shortcut\n\tstrAppends = (_swdoc.boolMultipleCalls)?\"s\":\"\";\n\tapp._emt(mainform.btnResolveClose,(\"&\" + mainform.cb_callaction.text + strAppends));\n\tapp._ete(mainform.btnResolveClose,(mainform.cb_callaction.text + strAppends));\n\t\n\t\/\/-- setup other flags based on call action\t\n\t_swdoc.setup_charge_flag();\n\t_swdoc.setup_kbase_flag()\t\n}\n\nfunction setup_form_mode()\n{\n\t\/\/-- always make sure fixcode desc is disabled\n\tapp._een(mainform.tb_fixcodedescription,false);\n\tapp._evi(mainform.btnResolveClose,true);\n\t\t\t\n\tvar bResolveByDefault = app.session.IsDefaultOption(ANALYST_DEFAULT_RESOLVEBYDEFAULT);\t\t\t\n\t\/\/-- if user does not have the right to close calls then only allow resolve\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS))\n\t{\n\t\tapp._een(mainform.cb_callaction,false);\n\t\tbResolveByDefault = true;\n\t}\n\n\t\/\/-- do they have option to resolve\n\tif(!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS))\n\t{\n\t\tapp._een(mainform.cb_callaction,false);\n\t\tbResolveByDefault = false;\n\t}\n\t\n\t_swdoc.boolClosing = !bResolveByDefault;\n\t\n\t\/\/-- set the default selection for the call action pick list based on the DD entry \n\tif((bResolveByDefault) && (!_swdoc.boolHaveResolvedCalls))\n\t{\n\t\tapp._ete(mainform.cb_callaction,\"Resolve Call\");\n\t}\n\telse\n\t{\n\t\tapp._ete(mainform.cb_callaction,\"Close Call\");\n\t}\t\t\n\t\n\t\/\/--\n\t\/\/-- disable \/ enable form fields\n\tapp._een(mainform.cb_callaction,(!_swdoc.boolHaveResolvedCalls));\n\tapp._een(mainform.dt_actiontime,(app.session.CanBackdateCallActions())); \/\/-- can backdate ?\n\t\n\t\/\/-- link passed in file attachments and set user perm to add\n\t_swdoc.setup_file_attachments();\n}\n\nfunction setup_file_attachments()\n{\n\t\/\/--read the passed in attachemnets\n\tvar x=0;\n\twhile(_swdoc._form[\"attach\"+x])\n\t{\n\t\tmainform.fl_attachments.AddAttachment(_swdoc._form[\"Attach\" + x]);\n\t\tx++;\n\t}\n\tif (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANATTACHFILESTOCALLS,false))\n\t{\n\t\tif(_swdoc._form[\"Attach1\"])\n\t\t{\n\t\t\tapp._evi(mainform.btnAddFile,false);\n\t\t\tapp._evi(mainform.btnRemoveFile,false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmainform.Tab1.ShowTabItem(1,false);\n\t\t}\n\t}\n}\n\n\/\/-- 08.02.2007 - NWJ - One function to handle which standard check boxes should be enabled\/disabled\n\/\/--\t\t\t\t\tchecked or unchecked, as old code fglas were set all over the place\nfunction setup_public_flag()\n{\n\tapp._een(mainform.flg_updatepublic,true);\n\t\n\tif (_swdoc.boolHaveQLogDetails)\n\t\tapp._ete(mainform.flg_updatepublic, _swdoc.intQLogPublic);\n\telse\n\t\tapp._ete(mainform.flg_updatepublic,(app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEPRIVATE) ? \"1\":\"0\"));\n}\n\nfunction setup_kbase_flag()\n{\n\t\/\/- -does the user have the right to add to the kbase or we are worknig with multiple calls so dont add\n\tif((!app.session.HaveRight(ANALYST_RIGHT_C_GROUP,ANALYST_RIGHT_C_CANADDTOKNOWLEDGEBASE)) || (_swdoc.boolMultipleCalls))\n\t{\n\t\tapp._ete(mainform.flg_addKBase,\"0\");\n\t\tapp._een(mainform.flg_addKBase,false);\n\t\treturn;\n\t}\n\n\t\/\/-- We need to check whether this call has been added to the knowledge\n\t\/\/-- base when it was resolved.\t\n     if(app.global.IsCallInKnowledgeBase(_swdoc.arrCallrefs[0]))\n     {\n     \tapp._ete(mainform.flg_addKBase,\"0\");\n\t\tapp._een(mainform.flg_addKBase,false);\n     }\n     else\n     {\n\t\tif (_swdoc.boolHaveQLogDetails)\n\t\tapp._ete(mainform.flg_addKBase,_swdoc.intQLogKBase);\n\t\telse\n     \t\tapp._ete(mainform.flg_addKBase,(app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSEKNOWLEDGEBASE) ? \"1\":\"0\"));\n        app._een(mainform.flg_addKBase,true);\n     }\n}\n\nfunction setup_charge_flag()\n{\n\tif (_swdoc.boolClosing)\n\t{\n\t\t\/\/-- closing\n\t\tapp._een(mainform.flg_chargeable,true);\n\t\tif (_swdoc.boolHaveQLogDetails)\n\t\t\tapp._ete(mainform.flg_chargeable, _swdoc.intQLogChargeable);\n\t\telse\n\t\t\tapp._ete(mainform.flg_chargeable,(app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSECHARGABLE) ? \"1\":\"0\"));\n\t}\n\telse\n\t{\n\t\t\/\/-- resolving\n\t\tapp._een(mainform.flg_chargeable,false);\n\t\tapp._ete(mainform.flg_chargeable,\"0\");\n\t}\n}\n\nfunction setup_email_flag()\n{\n\t\/\/--\n\t\/\/-- if we have a mailserver and can send mail set flg\n\tif(app.global.IsConnectedToMailServer() && app.global.CanSendMail())\n\t{\n\t\tapp._een(mainform.flg_emailcustomer,true);\n\t\tif (_swdoc.boolHaveQLogDetails)\n\t\t\tapp._ete(mainform.flg_emailcustomer, _swdoc.intQLogEmail);\n\t\telse\t\n\t\t\tapp._ete(mainform.flg_emailcustomer,((app.session.IsDefaultOption(ANALYST_DEFAULT_CLOSESENDEMAIL)) ? \"1\":\"0\"));\n\t}\n\telse\n\t{\n\t\tapp._een(mainform.flg_emailcustomer,false);\n\t\tapp._ete(mainform.flg_emailcustomer,\"0\");\n\t}\n}\n\n\/\/--\n\/\/-- initialise the surveys options\nfunction setup_survey_options()\n{\n\t\/\/-- if they do not have surveys hide options\n\tif(!app.global.IsSurveyModuleEnabled())\n\t{\n\t\tapp._ete(mainform.flg_customersurvey,\"0\");\n\t\tapp._evi(mainform.flg_customersurvey,false);\n\t\tapp._evi(mainform.cb_surveys,false);\n\t}\n\telse\n\t{\n\t\t\/\/-- get survey options\n\t\t_swdoc.load_survey_list();\t\n\n\t\t\/\/-- if we dont have surveys on the system then hide\n\t\tif(!_swdoc.boolHaveSurveys)\t\n\t\t{\n\t\t\tapp._ete(mainform.flg_customersurvey,\"0\");\n\t\t\tapp._een(mainform.flg_customersurvey,false);\n\t\t\tapp._evi(mainform.cb_surveys,false);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t\/\/-- have to set to true because if you set to hidden in code and then dev form it saves the state\n\t\tapp._evi(mainform.flg_customersurvey,true);\n\t\tapp._evi(mainform.cb_surveys,true);\n\t\t\t\n\t\t\/\/-- not allowed to change send survey options or there arent any surveys to send\n\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_DISABLESENDSURVEY)) \n\t\t{\n\t\t\t\/\/--code change DavidJH 09.06.05\n\t\t\tapp._een(mainform.flg_customersurvey,false);\n\t\t\tapp._ete(mainform.flg_customersurvey,\"0\");\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp._een(mainform.flg_customersurvey,true);\n\t\t}\n\t\t\n\t\t\/\/-- default ticked setting\n\t\tif(app.session.IsDefaultOption(ANALYST_DEFAULT_SETSENDSURVEY))\n\t\t{\n\t\t\tapp._ete(mainform.flg_customersurvey,\"1\");\n\t\t\tapp._een(mainform.cb_surveys,true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tapp._ete(mainform.flg_customersurvey,\"0\");\n\t\t\tapp._een(mainform.cb_surveys,false);\n\t\t}\n\t}\n}\n\nfunction load_survey_list()\n{\n\t\/\/-- empty the picklist\n\tmainform.cb_surveys.pickList = \"\";\n\t\n\t\/\/-- select all of the system mailboxes and add all shared mailboxes to an array\n\tvar SqlRecordSetObj\t= new SqlQuery;\n\t\n\t\/\/-- select all of the surveys and the mailbox they are associated to\n\tSqlRecordSetObj.Reset();\n\tSqlRecordSetObj.InvokeStoredQuery(\"form\/resolvecloseform\/getsurveys\",\"\");\n\t\t\n\tvar str = \"\";\n\tvar selected = \"\";\n\tvar strTemps = new Array();\n\tbselecteddefaultsurvey = false;\n\t\n\t\/\/-- loop through the surveys and and match those associated to shared mailboxes\n\t\/\/-- for each survey add it into an array and to the pick list string and when the \n\t\/\/-- first survey is found identify it as the default option for the survey picklist\n\twhile(SqlRecordSetObj.Fetch())\n\t{\n\t\t\/\/-- get the recordset value for survey name and id\n\t\tvar surveyname = SqlRecordSetObj.GetValueAsString(\"surveyName\");\n\t\tvar surveyid = SqlRecordSetObj.GetValueAsString(\"surveyid\");\n\t\t\n\t\t\/\/-- add the survey name\/id pair into the array\n\t\t_swdoc.arrSurveyNameSurvIDs[surveyname] = surveyid;\n\t\t\n\t\t\/\/-- build the picklist\toptions string\t\n\t\tstr += surveyname + \"|\";\n\t\t\/\/MessageBox(surveyname)\n\t\t_swdoc.boolHaveSurveys=true;\t\t\t\n\t}\n\t\n\t\/\/-- populate the surveys pick list\n\tmainform.cb_surveys.pickList = str;\n}\n\n\nfunction setup_profile_selection()\n{\n\n}\n\nfunction setup_resolution_profile()\n{\n\t\/\/-- disable profile text button\n\tapp._een(mainform.btnGetProfileText,false);\n\t\n\t\/\/-- if we have pending calls, either set the default from  a quick log template or leave the Resolution field blank\n\tif (_swdoc.boolHavePendingCalls) \n\t{\n\t\tif (_swdoc.boolHaveQLogDetails)\n\t\t{\n\t\t\tvar objFix = app.global.GetResolutionProfileDescription(_swdoc.strQLogFixCode);\n\t\t\tstrFixText = objFix.strCodeDesc;\t\n\t\t\t\/\/-- nwj if it has a dec text enable button to copy\n\t\t\tapp._een(mainform.btnGetProfileText,(objFix.strDescription!=\"\"));\n\t\t\t\/\/-- set text desc of code and then set actual code against opencall record\n\t\t\tapp._ete(mainform.tb_fixcodedescription,strFixText);\n\t\t\t_swdoc.opencall.fixcode = _swdoc.strQLogFixCode;\t\t\n\t\t}\n\t\treturn;\n\t}\n\tif (!_swdoc.boolHaveResolvedCalls) return;\n\n\t\/\/-- DJH\n\t\/\/-- 24.01.2006 \n\t\/\/-- if the call is resolved, pull the resolution text and prepopulate the boxes with this text.\n\tvar aRSfixcodes\t= new SqlQuery;\n\t\n\t\/\/-- NWJ -  24.01.2006\n\t\/\/--\t\tGet distinct profile codes for passed in calls\n\tvar strParams = \"crfs=\"+app.pfu(_swdoc.CallrefsCommaString);\n\tif (!aRSfixcodes.InvokeStoredQuery(\"form\/resolvecloseform\/get_fixcodes\",strParams))\n    {\n\t\tMessageBox(\"Unable to query call fixcode values. Please contact your Supportworks Administrator.\", MB_ICONSTOP);\n\t}\n\telse\n\t{\n\t\t\/\/-- NWJ - 24.01.2006\n\t\t\/\/-- \t   See if we have more than 1 fixcode\n\t\tvar strFixCode \t= \"\"\n\t\tvar strFixText\t= \"\";\n\t\tvar intFixCodeCount = 0;\n\t\twhile(aRSfixcodes.Fetch())\n\t\t{\n\t\t\tintFixCodeCount++;\t\t\t\n\t\t\t\/\/-- we have multiple fixcodes\n\t\t\tif (intFixCodeCount > 1) \n\t\t\t{\n\t\t\t\tstrFixCode = \"\";\n\t\t\t\tstrFixText = \"<multiple profiles>\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstrFixCode = aRSfixcodes.GetValueAsString(\"fixcode\");\n\t\t}\n\t\t\n\t\t\/\/-- if we have one fix code we should load this profile\n\t\tif (intFixCodeCount == 1)\n\t\t{\n\t\t\tvar objFix = app.global.GetResolutionProfileDescription(strFixCode);\n\t\t\tstrFixText = objFix.strCodeDesc;\t\n\t\t\t\/\/-- nwj if it has a dec text enable button to copy\n\t\t\tapp._een(mainform.btnGetProfileText,(objFix.strDescription!=\"\"));\n\t\t}\n\n\t\t\/\/-- set text desc of code and then set actual code against opencall record\n\t\tapp._ete(mainform.tb_fixcodedescription,strFixText);\n\t\t_swdoc.opencall.fixcode = strFixCode;\t\t\n\t\t\t\n\t}\/\/end else query was successful\n\n}\n\n\/\/-- 09.02.2007 - NWJ - initialise the _swdoc variables and state\nfunction setup_document_variables(funcCallback)\n{\n\t\/\/-- store callrefs string and create array\n\t_swdoc.CallrefsCommaString = _swdoc._form[\"callrefs\"];\n\t_swdoc.arrCallrefs = _swdoc.CallrefsCommaString.split(\",\");\n\t_swdoc.boolMultipleCalls = (_swdoc.arrCallrefs.length>1);\n\t\n\t\/\/-- arrays to hold call info\n\t_swdoc.arrSurveyNameSurvIDs \t= new Array();\n\t_swdoc.arrCallStatuss \t\t= new Array();\n\t_swdoc.arrCallOpenTasks \t\t= new Array();\n\t\t\t\t\n\t\/\/-- if the call does not have active tasks then its ok to lock them - otherwise close form\n\tvar strTaskMsg = _swdoc.check_call_has_active_tasks(_swdoc.CallrefsCommaString);\n\tif(strTaskMsg!=\"\")\n\t{\n\t\tMessageBox(strTaskMsg,MB_ICONSTOP);\n\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\tfuncCallback(false);\n\t}\n\telse\n\t{\n\t\t\/\/-- lock selected calls for close activity\t\n\t\tif(!app.global.LockCalls(_swdoc.CallrefsCommaString, \"CLOSE\"))\n\t\t{\n\t\t\t\/\/-- Failed to lock close the form\n\t\t\tfuncCallback(false);\n\t\t}\n\n\t\t_swdoc.check_call_states_and_classes(_swdoc.CallrefsCommaString, function(boolCheck)\n\t\t{\n\t\t\tif(!boolCheck)\n\t\t\t{\n\t\t\t\tapp.global.UnlockCalls(_swdoc.CallrefsCommaString);\n\t\t\t\tfuncCallback(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\n\t\t\t\t\/\/-- create form title\n\t\t\t\t_swdoc.create_form_title();\n\t\t\t\t\t\n\t\t\t\t\/\/-- are we resolving only\n\t\t\t\t_swdoc.boolResolveOnly = (_swdoc._form[\"resolve\"] == \"1\");\n\t\t\t\t\t\n\t\t\t\t\/\/-- did we come from an email\n\t\t\t\t_swdoc.boolSourceEmail = (_swdoc._form[\"_source_email\"] == \"true\");\n\t\t\t\n\t\t\t\t\/\/-- do we have a subject\t\t\n\t\t\t\t_swdoc.boolHaveSubject = (_swdoc._form[\"subject\"] == \"true\");\n\t\t\t\t\t\n\t\t\t\t\/\/--- set update text\n\t\t\t\t_swdoc.strUpdateText = _swdoc._form[\"updatetext\"];\n\t\t\t\t\n\t\t\t\tfuncCallback(true);\n\t\t\t}\t\t\n\t\t});\n\t}\n}\n\n\/\/-- 09.02.2007 - NWJ - Check if call\/s have any active tasks - if so return message.\nfunction check_call_has_active_tasks(strCheckCallrefs)\n{\n\t\n\tvar returnMessage = \"\";\n\tvar aRS\t= new SqlQuery;\n\n\t\/\/-- perform a sql check to see if we have any open calltasks\n\tvar strParams = \"crfs=\"+app.pfu(strCheckCallrefs);\n\tif(!aRS.InvokeStoredQuery(\"form\/resolvecloseform\/cnt_calltasks_by_callref\", strParams))\n    {\n\t\tif(_swdoc.strIssueref.length == 0)\n     \t{\n     \t\treturnMessage = \"Unable to query call task status values. Please contact your Supportworks Administrator.\";\n     \t}\n    }\n\telse\n\t{\n\t\t_swdoc.arrCallOpenTasks.length = 0;\n\t\t\t\n\t\twhile(aRS.Fetch())\n\t\t{\n\t\t\t\tvar nCount =  aRS.GetValueAsString(\"ct\");\n\t\t\t\tvar calref =  aRS.GetValueAsString(\"callref\");\n\t\t\t\t_swdoc.arrCallOpenTasks[calref] = nCount;\n\t\t}\n\t\t\n\t\tvar nLength = _swdoc.arrCallOpenTasks.length;\n\t\tif(nLength)\n\t\t{\n\t\t\tvar Ref = \"\";\n\t\t\tvar Message = \"\";\n\t\t\tif(nLength > 1)\n\t\t\t{\n\t\t\t\tfor(ID in _swdoc.arrCallOpenTasks)\n\t\t\t\t{\n\t\t\t\t\t\/\/-- 30.01.2006 - DJH code to add comma between call refs when dealing with multiple calls\n\t\t\t\t\tvar Value = dd.tables[\"opencall\"].columns[\"callref\"].FormatValue(ID);\n\t\t\t\t\tif(Ref != \"\")Ref += \",\";\n\t\t\t\t\tRef += Value;\n\t\t\t\t}\n\t\t\t\treturnMessage = \"The following calls still have outstanding work items assigned to them and can not be closed:-\\n\\n\" + Ref; \/\/Removed  + \"1\" from end\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(ID in _swdoc.CallOpenTaskMap)\n\t\t\t\t{\n\t\t\t\t\t\treturnMessage = \"The call \" + ID + \" still has \" + _swdoc.arrCallOpenTasks[ID] + \" outstanding work item(s) and can not be closed.\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\/\/--if(nLength > 1)\t\t\n\t\t}\/\/-- if(nLength)\n\t}\/\/-- if(!aRS.Invoke\n\t\n \treturn returnMessage;\n}\n\n\/\/-- 09.02.2007 - NWJ - Construct form title based on state etc\nvar strResolveCloseCallrefs = \"\";\nfunction create_form_title()\n{\n\t\/\/-- start to contruct form title (call local function to format callrefs and finish title)\n\tvar strFormTitle = (_swdoc.arrCallrefs.length > 1) ? \"Resolve\/Close Calls \" : \"Resolve\/Close Call \";\n\n\t\/\/-- loop through array and format callrefs\t\n\tfor(var i=0;i<_swdoc.arrCallrefs.length; i++)\n\t{\n\t\tif( i > 0) _swdoc.strResolveCloseCallrefs += \", \";\n\t\t_swdoc.strResolveCloseCallrefs += app.g.pad_callref(_swdoc.arrCallrefs[i]);\n\t}\n\tstrFormTitle += _swdoc.strResolveCloseCallrefs;\n\t\n\t\/\/-- if we are closing an issue and to title\n\tif(_swdoc.strIssueref.length) strFormTitle += \" Closing issue \" + _swdoc.strIssueref\n\t\t\t\n\t\/\/-- set the title\n\t_swdoc.SetTitle(strFormTitle);\n}\n\n\/\/-- 09.02.2007 - NWJ - check the state and callclass for the action calls - true \/ false (false = close down)\nfunction check_call_states_and_classes(strCheckCallrefs, funcCallback)\n{\n\t\/\/-- get the status and class for our callref\/s\n    var aRScallstate = new SqlQuery;\n    var strParams = \"crfs=\"+app.pfu(strCheckCallrefs);\n    if(!aRScallstate.InvokeStoredQuery(\"form\/resolvecloseform\/get_calls_for_status_check\", strParams))\n    {\n     \t\/\/-- failed - check if we have an issue\n     \tif(_swdoc.strIssueref.length == 0)\n     \t{\n     \t\tMessageBox(\"Unable to query call status values. Please contact your Supportworks Administrator..\", MB_ICONSTOP);\n     \t\tfuncCallback(false);\n     \t}\n    }\n    else\n    {\n\t\t\/\/--\n\t\t\/\/-- loop through our returned rows and get state and classes\n\t\t\n\t\tvar strCurrentCallClass = \"\";\n\t\tvar strLastCallClass = \"\";\t\t\t\t\t\n\t\tvar strCurrFTF = -1;\n\t\tvar strLastFTF = -1;\n\t\t\n\t\t\n\t\tvar nPendingStatus = 0;\n\t\tvar nResolvedStatus = 0;\n\t\tvar nOtherStatus = 0;\n\t\t\n\t\twhile(aRScallstate.Fetch())\n\t\t{\t\t\t\n\t\t\t\/\/-- get status and callref and add info an array\n\t\t\tvar iStatus =  aRScallstate.GetValueAsNumber(\"status\");\n\t\t\tvar iCalref =  aRScallstate.GetValueAsNumber(\"callref\");\n\t\t\t_swdoc.arrCallStatuss[iCalref] = iStatus;\n\t\t\t\t\t\t\n\t\t\t\/\/-- get call class and check if it same as others\n\t\t\t\/\/-- simply want to check if we have selected to resolve or close perate call classes\n\t\t\tstrCurrentCallClass = aRScallstate.GetValueAsString(\"callclass\");\n\t\t\t\n\t\t\t\/\/-- stop attempt to resolve or close a problem record\n\t\t\t\/\/-- 29.04.2008 - 2.2.0 \n\t\t\t\/*if(strCurrentCallClass.toLowerCase() == \"problem\")\n\t\t\t{\n\t\t\t\tMessageBox(\"One or more selected records are Problem records and cannot be resolved or closed.\", MB_ICONSTOP);\n\t\t\t\treturn false;\n\t\t\t}*\/\n\t\t\t\t\t\t\n\t\t\tif(!app.itsm.can_resolve(strCurrentCallClass, true))\n\t\t\t{\n\t\t\t\tfuncCallback(false);\n\t\t\t}\n\t\t\t\n\t\t\tif ((strLastCallClass != \"\") && (!_swdoc.boolMixedCallClasses))\n\t\t\t{\n\t\t\t\t_swdoc.boolMixedCallClasses = (strLastCallClass != strCurrentCallClass);\n\t\t\t}\n\t\t\tstrLastCallClass = strCurrentCallClass;\n\t\t\t\n\t\t\t\/\/-- NWJ - 23.11.2007 - check first time fix\n\t\t\tstrCurrFTF = aRScallstate.GetValueAsNumber(\"flg_firsttimefix\");\t\t\t\n\t\t\tif((strLastFTF!=-1)&&(strLastFTF!=strCurrFTF))\n\t\t\t{\n\t\t\t\t_swdoc.intFTFAchieved = 0;\n\t\t\t\t_swdoc.boolMixedFTF=true;\n\t\t\t}\n\t\t\t_swdoc.intFTFAchieved = strCurrFTF; \/\/- -store _swdoc level if achieved\n\t\t\tstrLastFTF = strCurrFTF;\n\t\t\t\n\t\t\tswitch(iStatus)\n\t\t\t{\n\t\t\t\tcase CS_PENDING:\n\t\t\t\t\tnPendingStatus++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CS_RESOLVED:\n\t\t\t\t\tnResolvedStatus++;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tnOtherStatus++;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\taRScallstate.Reset();\/\/-- reset recordset object\n\t\n\t\n\t\t\/\/-- function required for modeless message box\n\t\tvar funcNotPendingResolved = function()\n\t\t{\n\t\t\t\/\/--- if not pending or resolved && not dealing with issue\n\t\t\tif((nOtherStatus) &&(_swdoc.strIssueref.length == 0))\n\t\t\t{\t\t\t\n\t\t\t\tMessageBox(\"One or more selected calls can not be closed because they have a status other than Pending or Resolved.\", MB_ICONSTOP);\n\t\t\t\tfuncCallback(false);\n\t\t\t}\n\t\t\n\t\t\t_swdoc.boolHavePendingCalls = (nPendingStatus);\n\t\t\t_swdoc.boolHaveResolvedCalls = (nResolvedStatus);\n\t\t\t_swdoc.boolCloseOnly = (nResolvedStatus);\t\t\n\t\t\t\/\/-- we have pending and resolved callss\t\n\t\t\tif(nPendingStatus && nResolvedStatus)\n\t\t\t{\n\t\t\t\t_swdoc.boolMixedCallStatus = true;\n\t\t\t\tif(_swdoc.strIssueref.length == 0)\n\t\t\t\t{\n\t\t\t\t\tvar Message = \"The calls you have selected have a mixture of 'Pending' and 'Resolved' statuses. As resolved calls have already been attributed a resolution profile, the resolution profile selected for closing these calls will only be applied to the calls that currently have a status of 'Pending'. The 'Resolved' calls will be completed leaving the previously applied resolution profile. \\n\\nDo you want to continue?\";\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tMessageBox(Message, MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (intDecision != IDYES)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfuncCallback(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfuncCallback(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncCallback(true);\n\t\t\t}\n\t\t}\n\t\n\t\t\/\/-- we have different call classes and not working with an issue prompt use as to what to do\n\t\tif((_swdoc.boolMixedCallClasses) && (_swdoc.strIssueref.length == 0))\n\t\t{\n\t\t\tvar Message = \"The calls you have selected to resolve or close have different call classes, so any resolution profile you may specify will not be applied if you continue. Do you want to continue?\\n\\n(If you want resolution profiles to apply, you should click No and resolve\/close each call separately)\";\t\n\t\t\t\n\t\t\tMessageBox(Message, MB_ICONSTOP | MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t\t{\n\t\t\t\tif (intDecision != IDYES)\n\t\t\t\t{\n\t\t\t\t\tfuncCallback(false);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar boolNotPendingResolved = funcNotPendingResolved();\n\t\t\t\t\t\n\t\t\t\t\tfuncCallback(boolNotPendingResolved);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar boolNotPendingResolved = funcNotPendingResolved();\n\t\t\t\t\t\n\t\t\tfuncCallback(boolNotPendingResolved);\n\t\t}\n\t}\n}\n\nfunction setup_support_unit_assignment()\n{\n\t\t\/\/-- empty the picklist\n\t\tmainform.lb_supp_contract.pickList = \"\";\n\t\t\n\t\tvar SqlRecordSetObj\t= new SqlQuery;\n\t\tvar opencallSqlRecordSetObj\t= new SqlQuery;\n\t\t\n\t\tvar strParams = \"crfs=\"+app.pfu(_swdoc.CallrefsCommaString);\n\t\topencallSqlRecordSetObj.InvokeStoredQuery(\"form\/resolvecloseform\/get_calls_support_units\", strParams);\n\t\topencallSqlRecordSetObj.Fetch();\n\t\t\t\t\n\t\tSqlRecordSetObj.Reset();\n\t\tvar strParams = \"contract=\"+app.pfu(opencallSqlRecordSetObj.GetValueAsString(\"fk_contract_id\"))+\"&company=\"+app.pfu(opencallSqlRecordSetObj.GetValueAsString(\"fk_company_id\"));\n\t\tSqlRecordSetObj.InvokeStoredQuery(\"form\/resolvecloseform\/get_contract_support_units\", strParams);\n\t\t\t\n\t\tvar str = \"\";\n\t\tvar selected = \"\";\n\t\tvar strTemps = new Array();\n\t\tvar arrContractNames = new Array(); \/\/ array of names based on contract IDs - used for Quick Log Call info \n\t\tvar arrContractCMDBIDs = new Array();  \/\/ array of CMDB IDs on contract IDs - used for Quick Log Call info \n\t\t\n\t\twhile(SqlRecordSetObj.Fetch())\n\t\t{\n\t\t\t\/\/-- get the recordset value for contract id and title\n\t\t\tvar contractname = SqlRecordSetObj.GetValueAsString(\"title\");\n\t\t\tvar contractid = SqlRecordSetObj.GetValueAsString(\"pk_contract_id\");\n\t\t\tvar contractCMDBId = SqlRecordSetObj.GetValueAsString(\"fk_cmdb_id\");\n\t\t\t\/\/-- add the name\/id pair into the array\n\t\t\t_swdoc.arrContractNameIDs[contractname] = contractid;\n\t\t\tarrContractCMDBIDs[contractid] = contractCMDBId;\n\t\t\t\/\/-- build the picklist\toptions string\t\n\t\t\tstr += contractname + \"|\";\n\t\t\t\n\t\t\t\/\/-- identify the default contract (one selected against the call if set)\n\t\t\tif(!_swdoc.boolMultipleCalls)\n\t\t\t{\t\t\n\t\t\t\tfor(ID in _swdoc.arrContractNameIDs)\n\t\t\t\t{\n\t\t\t\t\tif(opencallSqlRecordSetObj.GetValueAsString(\"fk_contract_id\")!=\"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tif(contractid==opencallSqlRecordSetObj.GetValueAsString(\"fk_contract_id\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tselected = contractname;\n\t\t\t\t\t\t\tvar selectedNum = contractCMDBId;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/ if there is no contract assigned to the call AND there is a Quick Log Template AND there is a contract in the Quick Log Template\n\t\tif ((selected == \"\") && (_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != \"\"))\n\t\t{\n\t\t\t\/\/ NOTE, the value of ID is actually the Title of the contract not the pk_contract ID. The Quick Log definition contains the pk_contract_id\n\t\t\tfor(ID in _swdoc.arrContractNameIDs)\n\t\t\t{\n\t\t\t\tif(_swdoc.arrContractNameIDs[ID]==_swdoc.strQLogContractId)\n\t\t\t\t{\n\t\t\t\t\tselected = ID;\n\t\t\t\t\tvar selectedNum = arrContractCMDBIDs[_swdoc.arrContractNameIDs[ID]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/-- populate the surveys pick list\n\t\tmainform.lb_supp_contract.pickList = str;\n\t\t\n\t\t\/\/-- set the default selected survey\n\t\tapp._ete(mainform.lb_supp_contract,selected);\n\t\t\/\/-- Lookup units available for selected contract\n\t\t_swdoc.get_support_units_available(_swdoc.arrContractNameIDs[selected], mainform.tb_avail_units);\n\t\t_swdoc.get_support_unit_decrement(selectedNum, mainform.tb_units_assigned, _swdoc.arrContractNameIDs[selected]);\n}\n\nfunction get_support_units_available(strContractID, oEle)\n{\n\tif((strContractID!=\"\")&&(strContractID!=undefined))\n\t{\n\t\tvar recContract = new SqlRecord;\n\t\tif(recContract.GetRecord(\"contract\", strContractID))\n\t\t{\n\t\t\tif(recContract.flg_support_unlimited==1)\n\t\t\t{\n\t\t\t\tapp._eva(oEle,\"Unlimited\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tapp._eva(oEle,recContract.support_units_avail);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction get_support_unit_decrement(strContractID, oEle, strContractTxtID)\n{\n\tapp._evi(mainform.lbl_no_con_ser_assoc, false);\n\tapp._evi(mainform.lbl_con_ser_assoc, false);\n\t\/\/###20120731\n\tapp._evi(mainform.lbl_multi_services, false);\n\t\n\tif((typeof strContractID !== \"undefined\")&&(strContractID!=\"\"))\n\t{\n\t\tvar recContract = new SqlRecord;\n\t\tif(recContract.GetRecord(\"contract\", strContractTxtID))\n\t\t{\n\t\t\tif(recContract.flg_support_unlimited==1)\n\t\t\t{\n\t\t\t\tapp._eva(oEle, \"0\");\n\t\t\t\t\/\/ Override the default if we hae a quick log template with a selected contract\n\t\t\t\tif ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != \"\"))\n\t\t\t\t{\n\t\t\t\t\t\/\/MessageBox(\"unlimited\");\n\t\t\t\t\t_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;\n\t\t\t\t\tapp._eva(oEle, _swdoc.intQLogSUnitsDec);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\/\/ --- Get value for units to decrement by, by using Support Unit Decrement Method field set on\n\t\t\t\t\/\/ --- contract form\n\t\t\t\tvar dec_method = recContract.support_unit_dec_method;\n\t\t\t\t\/\/Nothing Selected\n\t\t\t\tif (dec_method == \"0\")\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\t\/\/Do nothing, units should default to 0 and not mandatory!\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Override the default if we hae a quick log template with a selected contract\n\t\t\t\t\tif ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/MessageBox(\"Have Quick Log details, intQLogSUnitsDec = \" + _swdoc.intQLogSUnitsDec);\n\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;\n\t\t\t\t\t\tapp._eva(oEle, _swdoc.intQLogSUnitsDec);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/Use Default Support Unit Decrement Value selected\n\t\t\t\telse if (dec_method == \"1\")\n\t\t\t\t{\n\t\t\t\t\t_swdoc.opencall.support_unit_cost = Math.round(recContract.support_unit_dec_amount);\n\t\t\t\t\tapp._eva(oEle, recContract.support_unit_dec_amount);\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Override the default if we hae a quick log template with a selected contract\n\t\t\t\t\tif ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;\n\t\t\t\t\t\tapp._eva(oEle, _swdoc.intQLogSUnitsDec);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/Prompt Analyst on Ticket Resolution\/Closure selected\n\t\t\t\telse if (dec_method == \"2\")\n\t\t\t\t{\n\t\t\t\t\t\/\/Clear Units Used field value, and make mandatory.\n\t\t\t\t\t_swdoc.opencall.support_unit_cost = \"\";\n\t\t\t\t\tapp._eva(oEle, \"\");\n\t\t\t\t\tapp._ema(mainform.tb_units_assigned, true);\n\t\t\t\t\t\n\t\t\t\t\t\/\/ Override the default if we hae a quick log template with a selected contract\n\t\t\t\t\tif ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;\n\t\t\t\t\t\tapp._eva(oEle, _swdoc.intQLogSUnitsDec);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/Take from Contract\/Service Association selected\n\t\t\t\telse if (dec_method == \"3\")\n\t\t\t\t{\n\t\t\t\t\t\/\/ Override the default if we hae a quick log template with a selected contract\n\t\t\t\t\tif ((_swdoc.boolHaveQLogDetails) && (_swdoc.strQLogContractId != \"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/MessageBox(\"dec method = 3 and qlog\");\n\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = _swdoc.intQLogSUnitsDec;\n\t\t\t\t\t\tapp._eva(oEle, _swdoc.intQLogSUnitsDec);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar strParams = \"contract=\"+app.pfu(strContractID)+\"&crfs=\"+app.pfu(_swdoc.CallrefsCommaString);\n\t\t\t\t\t\tvar iCountOfServices = app.g.sqs_rowcount(\"form\/resolvecloseform\/cnt_contracts_for_calls\", strParams);\n\t\t\t\t\t\tif (0 == iCountOfServices)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/ If no relationship is found, use the default Contract unit numbers, \n\t\t\t\t\t\t\t\/\/ and make an error message visible on the form\n\t\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = Math.round(recContract.support_unit_dec_amount);\n\t\t\t\t\t\t\tapp._eva(oEle, recContract.support_unit_dec_amount);\t\t\t\t\t\t\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_con_ser_assoc, false);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_no_con_ser_assoc, true);\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse if (iCountOfServices > 5)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strParams = \"contract=\"+app.pfu(strContractID)+\"&crfs=\"+app.pfu(_swdoc.CallrefsCommaString);\n\t\t\t\t\t\t\t\/\/### there are more than 5 services with this contract on this call\n\t\t\t\t\t\t\tvar queContServ = app.g.get_sqrecordset(\"form\/resolvecloseform\/get_minsunits_for_contracts\",strParams);\n\t\t\t\t\t\t\tvar iMinSU = 0;\n\t\t\t\t\t\t\tvar iMaxSU = 0;\n\t\t\t\t\t\t\tif(queContServ.Fetch())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tiMinSU = Math.round(app.g.get_field(queContServ,0));\n\t\t\t\t\t\t\t\tiMaxSU = Math.round(app.g.get_field(queContServ,1));\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvar oUnits = app.g.get_sqrecordset(\"form\/resolvecloseform\/get_sunits_for_contracts\",strParams);\n\t\t\t\t\t\t\toUnits.Fetch();\n\t\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = Math.round(oUnits.GetValueAsNumber(0));\n\t\t\t\t\t\t\tapp._eva(oEle, oUnits.GetValueAsNumber(0));\n\t\t\t\t\t\t\tapp._eva(mainform.fk_con_ser_assoc, oUnits.GetValueAsNumber(1));\n\t\n\t\t\t\t\t\t\tapp._ete(mainform.lbl_multi_services, \"There are multiple (\" + iCountOfServices + \") Services with this contract against the Request.\\nThe Support Unit values range from \" + iMinSU + \" to \" + iMaxSU);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_con_ser_assoc, true);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_no_con_ser_assoc, false);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_multi_services, (iMinSU !== iMaxSU));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar queContServ = app.g.get_sqrecordset(\"form\/resolvecloseform\/get_sunits_for_contracts\",strParams);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar strMultiServiceLabelText = \"Default Support Units for the Services which are associated to this the call (max. 5):-\\n\\n\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar intSupportUnitCost = 0;\n\t\t\t\t\t\t\tvar intContractID = 0;\n\t\t\t\t\t\t\twhile(queContServ.Fetch())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tintSupportUnitCost = Math.round(queContServ.GetValueAsNumber(0));\n\t\t\t\t\t\t\t\tintContractID = queContServ.GetValueAsNumber(1);\n\t\t\t\t\t\t\t\tstrMultiServiceLabelText += intSupportUnitCost + \"\\t\" + queContServ.GetValueAsString(2) + \"\\n\";\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t_swdoc.opencall.support_unit_cost = intSupportUnitCost;\n\t\t\t\t\t\t\tapp._eva(oEle, intSupportUnitCost);\n\t\t\t\t\t\t\tapp._eva(mainform.fk_con_ser_assoc, intContractID);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tapp._ete(mainform.lbl_multi_services, strMultiServiceLabelText);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_con_ser_assoc, true);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_no_con_ser_assoc, false);\n\t\t\t\t\t\t\tapp._evi(mainform.lbl_multi_services, 1 != iCountOfServices);\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/Something else. Should never get here...\n\t\t\t\telse{\n\t\t\t\t\tMessageBox(\"Defaulted! \" + recContract.support_unit_dec_method);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"},{"name":"OnExecuteAction","code":"OnExecuteAction(nAction)\n{\n\t\/\/-- required for modeless message box\n\tvar funcAttachCall = function()\n\t{\n\t\t\/\/-- attaching a call to the action.\n\t\tif(nAction == ATTACHFILETOCALL_ACTION)\n\t\t{\n\t\t\tmainform.btnAddFile_OnPressed();\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\/\/-- trigger an action from a menu bar (shortcusts)\n\t\n\t\/\/-- closing call\n\tMessageBox(nAction);\n\tif(nAction == CLOSE_CALL_ACTION)\n\t{\t\n\t\tmainform.ResolveClose(function()\n\t\t{\n\t\t\tfuncAttachCall();\n\t\t});\n\t}\n\telse\n\t{\n\t\tfuncAttachCall();\n\t}\n}"},{"name":"OnValidate","code":"OnValidate()\n{\n\t\/\/-- validate the form\n\t_swdoc.ValidateForm(function(boolValidate)\n\t{\n\t\tif (!boolValidate)\n\t\t{\n\t\t\treturn VALIDATE_FAIL\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn VALIDATE_DEFAULT;\n\t\t}\n\t});\n}"},{"name":"(Globals)","code":"\/\/-- ALL vars and funcs are in the userdefined js area"},{"name":"OnSaveData","code":"OnSaveData()\n{\n\t\/\/ This should never get called, but if for some reason it does, we only want this form\n\t\/\/ to close if it is cancelled or if the analyst clicks one of the update buttons.\n\tMessageBox(\"Please use the [\" + mainform.btnResolveClose.text + \"] button to process the action.\");\n\treturn false;\n}"}]}}},"layouts":{"layout":[{"appearance":{"width":"562","height":"432","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"controls":{"control":[{"general":{"name":"tb_updatetext","type":"Field","group":"Tab1:0"},"appearance":{"index":"0","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"272","left":"17","right":"542","bottom":"412"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"data":{"binding":"updatedb.updatetxt"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"true","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"true","url":"false"},"textLineCount":"4","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"CaptionPanel2","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"1","caption":"Details","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"29","left":"3","right":"394","bottom":"205"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"dt_actiontime","type":"Field"},"appearance":{"index":"2","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"73","left":"11","right":"218","bottom":"91"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.updatetimex"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Date\/Time Control","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","colorDateIndicator":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","dateFormatMode":"0","borderColor":"#c0c0c0"}}},{"general":{"name":"tb_timespent","type":"Field"},"appearance":{"index":"3","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"73","left":"227","right":"286","bottom":"91"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Minute Time Period","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"defaultValue":"5","activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0"}}},{"general":{"name":"cb_actionsource","type":"Field"},"appearance":{"index":"4","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"110","left":"11","right":"218","bottom":"128"},"scaling":{"top":"0","left":"0","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"Telephone","properties":{"disabledBackgroundColor":"#eeeeee","defaultValue":"Telephone","distinctTable":"swlists","distinctColumn":"value","borderColor":"#c0c0c0","sqlSource":"swdata","displayColumn":"display_name","listFilter":"lid=CALL-ACTION-SOURCE,CALL-ACTION-SOURCE-RESOLVE','CALL-ACTION-SOURCE-CLOSE","storedQuery":"common.getSwLists"}}},{"general":{"name":"tb_actiontype","type":"Field"},"appearance":{"index":"5","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"110","left":"227","right":"388","bottom":"128"},"scaling":{"top":"0","left":"25","right":"50","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Distinct Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","pickListOrderDesc":"false"},"textLineCount":"0","textInputFormat":"Text","displayColumnValue":"General Update","properties":{"defaultValue":"General Update","listItems":"General Update|Called Customer|E-mailed Customer|","activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","borderColor":"#c0c0c0","sqlSource":"swdata","distinctTable":"swlists","distinctColumn":"value","displayColumn":"display_name","listFilter":"lid=CALL-ACTION-TYPE,CALL-ACTION-TYPE-RESOLVE','CALL-ACTION-TYPE-CLOSE","storedQuery":"common.getSwLists"}}},{"general":{"name":"btnBrowseProfile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"6","caption":"...","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"156","left":"362","right":"388","bottom":"177"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"-1"}}},{"general":{"name":"tb_fixcodedescription","type":"Field"},"appearance":{"index":"7","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"158","left":"11","right":"364","bottom":"176"},"scaling":{"top":"0","left":"0","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#ffffff","borderColor":"#c0c0c0"}}},{"general":{"name":"flg_emailcustomer","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"8","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"76","left":"409","right":"525","bottom":"95"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"E-mail customer^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_updatepublic","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"9","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"57","left":"409","right":"538","bottom":"75"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Update to be public^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_chargeable","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"10","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"96","left":"409","right":"550","bottom":"114"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Call to be chargeable^1|","disabledBackgroundColor":"#eeeeee","defaultValue":"0"}}},{"general":{"name":"flg_addKBase","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"11","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"116","left":"409","right":"551","bottom":"135"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Add to KnowledgeBase^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_customersurvey","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"12","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"158","left":"409","right":"567","bottom":"179"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"Send customer survey:^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"cb_surveys","type":"Field"},"appearance":{"index":"13","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"181","left":"413","right":"543","bottom":"199"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"Customer Satisfaction Survey|Feedback on the HITS show|DEMO:Service Desk Quality Survey|Customer Survey|","defaultValue":"Customer Survey","borderColor":"#c0c0c0"}}},{"general":{"name":"cb_callaction","type":"Field"},"appearance":{"index":"14","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"4","left":"226","right":"387","bottom":"22"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"true","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","disabledBackgroundColor":"#eeeeee","listItems":"Close Call|Resolve Call|Close Call|Resolve Call|","borderColor":"#c0c0c0"}}},{"general":{"name":"btnGetProfileText","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"15","caption":"Add Profile Text","backgroundColor":"#ffffff","foregroundColor":"#0000ff","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"213","left":"458","right":"550","bottom":"234"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"true","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"Tab1","type":"TabControl","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"16","caption":"Tab1","backgroundColor":"#ded7ce","foregroundColor":"#ffffff","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"241","left":"7","right":"553","bottom":"422"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"tabStyle":"Top","tabSize":"19","items":{"item":[{"name":"Description","properties":"56=#d1e0ee|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#d1e0ee"}}},{"name":"File Attachment","properties":"56=#ffcc66|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#ffcc66"}}},{"name":"Support Units","properties":"56=#bdcd9f|_flags=0","textBorder":"None","textBackgroundColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","properties":{"tabColor":"#bdcd9f"}}}]},"selectedTextFont":{"@size":"8","#text":"Arial"},"selectedTextColor":"#000000","deselectedTextColor":"#000000","tabSlopeLeft":"2","tabSlopeRight":"2","deselectedTabHeightOffset":"1","tabSpacing":"0","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"tabStyle":"0"}}},{"general":{"name":"fl_attachments","type":"FileListTable","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false","showHeader":"true","verticalGridLines":"true","horizontalGridLines":"true","autoLoad":"true","allowMultiSelect":"true"},"group":"Tab1:1"},"appearance":{"index":"17","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"269","left":"15","right":"473","bottom":"413"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"columns":{"controlInfo":[{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"File Name","width":"160","image":"-1","dataColumn":"0"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Size","width":"80","image":"-1","dataColumn":"1"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Last Modified","width":"120","image":"-1","dataColumn":"2"},{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false","hidden":"false","allowResize":"true","allowSort":"true"},"textLineCount":"0","textInputFormat":"Text","name":"Full Local Path","width":"100","image":"-1","dataColumn":"3"}]},"sortColumn":"-1","sortDescending":"false","headerHeight":"16","rowHeight":"16","selectedColor":"#00008b","selectedTextColor":"#ffffff","controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"content":"NAME=css-bug-raising.gif;PATH=C:\\Documents and Settings\\NeilWJ\\My Documents\\css\\css-bug-raising.gif;SIZE=18746;LASTMODIFIED=1091525370","borderColor":"#c0c0c0"}}},{"general":{"name":"btnAddFile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"18","caption":"Add","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"266","left":"481","right":"545","bottom":"290"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74"}}},{"general":{"name":"btnRemove","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:1"},"appearance":{"index":"19","caption":"Remove","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"296","left":"481","right":"545","bottom":"320"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"btnResolveClose","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"20","caption":"Resolve Call","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"}},"objectPlacement":{"position":{"top":"1","left":"7","right":"103","bottom":"24"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"eventButtonIcon":"ImageList=Helpdesk Tools;IconIndex=6","eventButtonIconAlign":"0","backgroundColor":"#ff9900"}}},{"general":{"type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"21","caption":"Action Source","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"94","left":"9","right":"82","bottom":"106"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"updatedb.udsource"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"LabelCode","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"22","caption":"Action Type","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"94","left":"225","right":"291","bottom":"106"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.udcode"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Text1","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"23","caption":"Date\/Time of Action","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"57","left":"8","right":"120","bottom":"71"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Label2","type":"FieldName","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"24","caption":"Time Spent","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"57","left":"225","right":"289","bottom":"71"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"data":{"binding":"updatedb.timespent"},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"ResolProfile","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"25","caption":"Resolution Category","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"140","left":"8","right":"208","bottom":"154"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"btnAddFile","type":"EventButton","flags":{"transparent":"false","xpStyle":"true","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"26","caption":"Attach File","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"}},"objectPlacement":{"position":{"top":"1","left":"457","right":"538","bottom":"24"},"scaling":{"top":"0","left":"100","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"},"properties":{"commands":"74","eventButtonIcon":"74","backgroundColor":"#ff9900"}}},{"general":{"name":"Rect1","type":"Rectange","flags":{"transparent":"false","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"true","cache":"true","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"27","backgroundColor":"#d4d0c8","foregroundColor":"#dddddd","font":{"@size":"0"},"borderStyle":"Rectangle","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"0","left":"-1","right":"565","bottom":"25"},"scaling":{"top":"0","left":"0","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"LabelAction","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"28","caption":"Call Action:","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"2","left":"161","right":"223","bottom":"25"},"scaling":{"top":"0","left":"25","right":"25","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","multiLine":"false"}}},{"general":{"name":"cp_summary","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"29","caption":"Other Information","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"212","left":"3","right":"557","bottom":"428"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"CaptionPanel3","type":"CaptionBar","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"true","hasCheckbox":"false"}},"appearance":{"index":"30","caption":"Options","backgroundColor":"#f1f1f1","foregroundColor":"#003366","font":{"@size":"10","@bold":"1","#text":"Trebuchet (MS)"},"alignment":"Left","fillStyle":"Vertical Gradient"},"objectPlacement":{"position":{"top":"29","left":"403","right":"557","bottom":"205"},"scaling":{"top":"0","left":"50","right":"100","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","properties":{"backgroundColor2":"#d8d8d8","imageHSpace":"10","slope":"12","borderColor":"#d3c9b6","headerHeight":"23","hasBorder":"1","panelBorderColor":"#d3c9b6","fillStyle":"0","panelBackgroundColor":"#f2eedd","panelBackgroundColor2":"#000000"}}},{"general":{"name":"flg_resolvelinked_calls","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"31","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"183","left":"6","right":"392","bottom":"200"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","textLineCount":"0","textInputFormat":"Text","properties":{"content":"#eeeeee","flagItems":"Apply this action to related requests (incident \/ known errors etc)^1|","defaultValue":"1","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"flg_ftf","type":"Field","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"}},"appearance":{"index":"32","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Trebuchet MS"},"borderStyle":"None"},"objectPlacement":{"position":{"top":"137","left":"409","right":"551","bottom":"156"},"scaling":{"top":"0","left":"50","right":"50","bottom":"0"}},"data":{"binding":"opencall.flg_firsttimefix"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Form Flags","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"true","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"activeTextColor":"#eeeeee","flagItems":"First time fix achieved^1|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"tb_avail_units","type":"Field","group":"Tab1:2"},"appearance":{"index":"33","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"298","left":"185","right":"347","bottom":"318"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"borderColor":"#c0c0c0","image":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"Text2","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:2"},"appearance":{"index":"34","caption":"Available Support Units","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"298","left":"62","right":"179","bottom":"320"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"Text3","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:2"},"appearance":{"index":"35","caption":"Associated Support Contract","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"273","left":"28","right":"179","bottom":"296"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lb_supp_contract","type":"Field","group":"Tab1:2"},"appearance":{"index":"36","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"273","left":"185","right":"347","bottom":"293"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Pick List","flags":{"invisible":"false","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","readOnlyInit":"false","comboAutoUpdate":"false","comboNewValues":"true","useDDPickList":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"borderColor":"#c0c0c0","image":"#eeeeee","sqlSource":"syscache","listItems":"Wireless Contract|Dell Hardware Contract|Ares Contract One|Ares Contract 2|","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"tb_units_assigned","type":"Field","group":"Tab1:2"},"appearance":{"index":"37","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"323","left":"185","right":"347","bottom":"343"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"data":{"binding":"opencall.support_unit_cost"},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","textLineCount":"0","textInputFormat":"Numeric","properties":{"borderColor":"#c0c0c0","image":"#eeeeee","disabledBackgroundColor":"#eeeeee","precision":"15","scale":"10","inputMask":"#########"}}},{"general":{"name":"Text4","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:2"},"appearance":{"index":"38","caption":"Units Spent On This Call","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Right","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"321","left":"40","right":"179","bottom":"345"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default"}},{"general":{"name":"lbl_no_con_ser_assoc","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:2"},"appearance":{"index":"39","caption":"No Contract\/Service association has been found! The default number of units for the above contract will be used instead.","backgroundColor":"#ffffff","foregroundColor":"#ff0000","font":{"@size":"8","#text":"Arial"},"alignment":"Center","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"352","left":"78","right":"339","bottom":"395"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"true"}}},{"general":{"name":"lbl_con_ser_assoc","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:2"},"appearance":{"index":"40","caption":"A valid Contract\/Service association has been found. The value of \"Units Spent On This Call\" has been populated from the association record.","backgroundColor":"#ffffff","foregroundColor":"#24c000","font":{"@size":"8","#text":"Arial"},"alignment":"Center","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"352","left":"73","right":"344","bottom":"395"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"true"}}},{"general":{"name":"fk_con_ser_assoc","type":"Field"},"appearance":{"index":"41","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"borderStyle":"Rectangle"},"objectPlacement":{"position":{"top":"490","left":"100","right":"199","bottom":"509"},"scaling":{"top":"0","left":"0","right":"0","bottom":"0"}},"controlInfo":{"mouseOverCursor":"Window Default","type":"Text Edit","flags":{"invisible":"true","readOnly":"false","mandatory":"false","mandatoryLabelBackground":"false","mandatoryLabelText":"false","allowNullValue":"false","skipTabStop":"false","disabled":"true","protected":"false","noMacroExpand":"false","readOnlyInit":"false","autoCompleteField":"false","editUnlimitedText":"false","url":"false"},"textLineCount":"0","textInputFormat":"Text","properties":{"borderColor":"#d3c9b6","image":"#eeeeee","disabledBackgroundColor":"#eeeeee"}}},{"general":{"name":"lbl_multi_services","type":"Text","flags":{"transparent":"true","xpStyle":"false","hasShadow":"false","toolbarButtonStyle":"false","cache":"false","hasBorder":"false","hasCheckbox":"false"},"group":"Tab1:2"},"appearance":{"index":"42","caption":"Multiple Services","backgroundColor":"#ffffff","foregroundColor":"#000000","font":{"@size":"8","#text":"Arial"},"alignment":"Left","borderStyle":"None","fillStyle":"Solid"},"objectPlacement":{"position":{"top":"269","left":"357","right":"543","bottom":"392"},"scaling":{"top":"0","left":"0","right":"100","bottom":"100"}},"controlInfo":{"mouseOverCursor":"Window Default","flags":{"invisible":"true","skipTabStop":"false","disabled":"false","protected":"false","noMacroExpand":"false","multiLine":"true"}}}]},"javascript":{"methods":{"method":[{"name":"OnFormLoaded","code":"OnFormLoaded()\n{\n\n\t\/\/ we only get the quick log template if there is only one call to resolve. The gloabl JS checks _swdoc.boolMultipleCalls\n\tvar objQLC = app.g.get_qlog_resclose_details(_swdoc.arrCallrefs[0],_swdoc.boolMultipleCalls);\n\tif (objQLC)\n\t{\n\t\t_swdoc.boolHaveQLogDetails = true; \/\/ use in other functions to determine if values from the Quick Log definition should be used \n\t\t\/\/-- quick log call details\n\t\t_swdoc.updatedb.udsource = objQLC.qLogUdSource;\n\t\t_swdoc.updatedb.udcode = objQLC.qLogUdCode;\n\t\t_swdoc.updatedb.timespent = objQLC.qLogTimeSpent;\n\t\t_swdoc.updatedb.updatetxt = objQLC.qLogUpdateTxt;\n\t\t\n\t\t\/\/ The following data may be altered based on other settings\n\t\t_swdoc.intQLogChargeable = objQLC.qLogFlgChargeable;\t\n\t\t_swdoc.intQLogKBase = \tobjQLC.qLogFlgAddToKb;\n\t\t_swdoc.intQLogPublic = objQLC.qLogFlgPublic;\n\t\t_swdoc.intQLogEmail = objQLC.qLogFlgEmail;\n\t\t_swdoc.strQLogFixCode = objQLC.qLogFixCode;\n\t\t_swdoc.strQLogContractId = objQLC.qLogContract;\n\t\t_swdoc.intQLogSUnitsDec = objQLC.qLogSuppUnit;\n\t\n\t\tif (objQLC.qLogFiles)\n\t\t{\n\t\t\tvar obj =  mainform.fl_attachments;\n            \t\n        \tfor (i=0 ; i<objQLC.qLogFiles.length;i++)\n        \t{\t\t\t\t\n\t\t\t\tvar objectStep = objQLC.qLogFiles[i];\n\t\t\t\tvar url = \"attach;\"+\"displayname=\"+objectStep.filename +\"; path=\"+objectStep.filepath+\"; size=\"+objectStep.filesize+\"; lastmodified=\"+objectStep.last_modified;\n\t\t\t\t\n\t\t\t\tmainform.fl_attachments.AddAttachment(url);\n\t\t\t\tmainform.fl_attachments.Refresh();\n\t\t\t} \n\t\t}\n\t}\n\t\n\t\/\/-- NWJ - setup mainform properties and elements\n\tapp._ete(tb_fixcodedescription, \"\");\n\t\n\t_swdoc.setup_form_mode();\t\t\n\t_swdoc.setup_call_action();\n\t_swdoc.setup_email_flag();\n\t_swdoc.setup_public_flag();\n\t_swdoc.setup_survey_options();\n\t\n\t\/\/-- reset call actions list\n\t\/\/-- then populate with options based on analyst permissions\n\t\t\n\t\/\/-- set updatetime\t\n\t_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime();\n\t\t\t\n\t\/\/-- if we have update text (from an email i guess) apply it\n\tif(_swdoc.strUpdateText.length) _swdoc.updatedb.updatetxt = _swdoc.strUpdateText;\n\t\n\t\/\/-- if came from E-mail set source as email\n\tif(_swdoc.boolSourceEmail)\n\t{\n\t\t_swdoc.updatedb.udsource = 'E-mail'; \n\t}\n\t\n\t_swdoc.setup_resolution_profile();\n\t\t\n\t\/\/-- Show Support Unit Assignment Tab If supporting External Companies\n\tvar boolShow =dd.GetGlobalParamAsString(\"Application Settings\/SupportExternalCompanies\")==1;\n\n\t\/\/###20120802 addition to cope with Release Request\n\tvar strParams = \"crfs=\"+app.pfu(_swdoc.CallrefsCommaString);\n\tvar iCountOfReleases = app.g.sqs_rowcount(\"form\/resolvecloseform\/cnt_releases_in_calls\", strParams);\n\tboolShow = boolShow && (0 == iCountOfReleases);\n\t\n\tmainform.Tab1.ShowTabItem(2,boolShow);\n\tif(boolShow)\n\t{\n\t\t_swdoc.setup_support_unit_assignment();\n\t}\n\n\t\/\/--F0091429\t\n\tapp._etab(mainform.Tab1,0);\t\t\n\n\tif(mainform.lb_supp_contract.value == \"\")\n\t{\n\t\tapp._een(mainform.tb_units_assigned,false);\n\t\tapp._eva(mainform.tb_avail_units,0);\n\t\tapp._eva(mainform.tb_units_assigned,0);\n\t\t_swdoc.opencall.support_unit_cost = 0;\n\t}\n\n\t_swdoc.UpdateFormFromData();\n\t\n}"},{"name":"btnBrowseProfile_OnPressed","code":"btnBrowseProfile_OnPressed()\n{\n\t\/\/-- get resolution profile filter\n\t\n\t\/\/-- NWJ - 29.06.2006 - get close filter or resolve filter depending on call closure option (requested by Dan 47766)\n\tif (cb_callaction.text == \"Resolve Call\")\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/ResolveProfileFilter\");\n\t}\n\telse if (cb_callaction.text == \"Close Call\")\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/CloseProfileFilter\");\n\t}\n\telse\n\t{\n\t\tvar Filter = dd.GetGlobalParamAsString(\"Close Call Form\/ProfileCodeFilter\");\n\t}\n\t\n\tvar pc = new ChooseProfileCodeDialog;\n\t\/\/-- default analyst permission to auto fill the resolution text on resolve\/close call is set\n\n    pc.useDescriptionText =  app.session.IsDefaultOption(ANALYST_DEFAULT_AUTOFILLRESOLUTIONTEXT); \n    \n    pc.Open(true, true, _swdoc.opencall.fixcode, Filter, function(pc)\n    {\n   \t   \t\/\/-- Get the fix code and split it into an array\n        var strCodeDesc = pc.codeDescription;\n        var strCode = pc.code;\n\n    \t\/\/ Pressing Cancel on the Select Res Code dialog sets the returned values to undefined\n        \/\/ This causes an XMLMC error when the Resolve action is performed\n        if (strCodeDesc == undefined)\n        \tstrCodeDesc = \"\";\n        if (strCode == undefined)\n        \tstrCode = \"\";        \n        \n       \t\/\/-- If no codes are found then stop or same as current code\n        if(strCode==_swdoc.opencall.fixcode) return;\n        \n        \/\/-- F0092364\n        if(strCode==\"\")\n        {\n \t\t\t_swdoc.opencall.fixcode = \"\";       \n        \tapp._ete(tb_fixcodedescription,\"\");\n        \t_swdoc.bUserSelectedFixCode = true;\n        \tapp._een(btnGetProfileText,false);\n        \treturn;\n        }                \n        \n        \/\/-- required for modeless message box\n        var funcUpdate = function()\n        {\n        \t\/\/-- add back to update record\n        \t_swdoc.updatedb.updatetxt = strCurrentUpdateText;\n        \t_swdoc.UpdateFormFromData();\n        }\n        \n        \/\/-- required for modeless message box\n        var funcFinalProcessing = function()\n\t\t{\n\t\t\t\/\/-- if we are working with webclient\n\t\t\tif(app.bWebClient)\n\t\t\t{\n\t\t\t\tapp._een(btnGetProfileText,false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\t\/\/-- enable \/ disable button if it has text\n\t    \t\tapp._een(btnGetProfileText,(pc.description!=\"\"));\n\t\t\t}\n\t\t}\n        \n        \n        \/\/-- Set the text in the resolution profile text box\n        \/\/-- 08.02.2007 - NWJ - set the opencall record value instead of the element name \n\t\t_swdoc.opencall.fixcode = strCode;      \n\t\tapp._ete(tb_fixcodedescription,strCodeDesc); \n                \n        \/\/-- Attempt to add the resolution profile description to the Action Description box if the\n        \/\/-- default analyst permission to auto fill the resolution text on resolve\/close call is set\n        if(pc.useDescriptionText)\n        {\n        \t\/\/-- 08.02.2007 - NWJ - set the opencall record value instead of the element name \n        \tvar strCurrentUpdateText = _swdoc.updatedb.updatetxt;\n           \t\n        \tif(pc.description.length)\n        \t{\n        \t\t\/\/if(tb_updatetext.text.length)\n        \t\tif(strCurrentUpdateText.length)\n\t\t\t\t{\n\t\t\t\t\tvar Message = \"You have chosen to transfer the default profile text into the description field of the close call form. However, you have already entered some text into this field. Do you want to append the text you have typed?\\n\\nTo append the default text to the text you have already typed, click Yes\\nTo transfer the default text and overwrite what you have already typed, click No\\nTo ignore the default text and leave the text you have typed alone, click Cancel\";\n\t\t\t\t\t\n\t\t\t\t\tMessageBox(Message, MB_ICONQUESTION | MB_YESNOCANCEL, function(intDecision)\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch(intDecision)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase IDYES:\n\t\t\t\t\t\t\t\tif(_swdoc.updatedb.updatetxt.length)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\/\/-- add a line feed\n\t\t\t\t\t\t\t\t\tstrCurrentUpdateText += \"\\r\\n\";\n\t\t\t\t\t\t\t\t\t\/\/tempText = _swdoc.updatedb.updatetxt + \"\\r\\n\"; \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstrCurrentUpdateText += pc.description;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase IDNO:\n\t\t\t\t\t\t\t\tstrCurrentUpdateText = pc.description;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase IDCANCEL:\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfuncUpdate();\n\t\t\t\t\t\tfuncFinalProcessing();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstrCurrentUpdateText = pc.description;\n\t\t\t\t\tfuncUpdate();\n\t\t\t\t\tfuncFinalProcessing();\n\t\t\t\t}\n        \t}\n        \telse\n        \t{\n        \t\tfuncUpdate();\n        \t\tfuncFinalProcessing();\n        \t}\n        }\n        else\n        {\n        \tfuncFinalProcessing();\n        }\n    });\n}"},{"name":"btnAddFile_OnPressed","code":"btnAddFile_OnPressed()\n{\n\t\/\/-- add files\n\t\/\/fl_attachments.newFile = InvokeCallAttachmentFileDialog();\n\tfl_attachments.AddFiles();\n\n}"},{"name":"btnRemove_OnPressed","code":"btnRemove_OnPressed()\n{\n\t\/\/ -- remove selected files\n\tfor(i=fl_attachments.rowCount()-1; i>=0;i--)\n    {\n    \tif(fl_attachments.IsRowSelected(i))\n    \t{\n    \t\t\/\/-- remove\n    \t\tfl_attachments.RemoveRow(i);\n    \t}\n    }\n\n}"},{"name":"btnGetProfileText_OnPressed","code":"btnGetProfileText_OnPressed()\n{\n\tvar funcUpdateResText = function()\n\t{\n\t\t\/\/-- get resolution profile description\t\n\t\tvar currentResProfileDesc = app.global.GetResolutionProfileDescription(_swdoc.opencall.fixcode);\n\t\t_swdoc.updatedb.updatetxt = currentResProfileDesc.strDescription;\n\t\t_swdoc.UpdateFormFromData();\n\t}\n\t\n\tif(_swdoc.updatedb.updatetxt.length)\n\t{\n\t\tMessageBox(\"If you retrieve the default text description from the profile database you will overwrite the current Action Description text.\\n\\nDo you wish to continue?\", MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t{\n\t\t\tif (intDecision != IDYES)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncUpdateResText();\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\tfuncUpdateResText();\n\t}\n\t\n}"},{"name":"(User Defined Functions)","code":"\n\/\/-- function to check that user has selected correct number of profile codes\nfunction check_profile_levels()\n{\n\t\/\/-- get the number of profile levels the analyst HAS to choose\n\tvar nLevelNeeded = app.session.GetCloseProfileLevelRequired();\n\n\t\/\/-- determine the number of Profile levels the user has selected\n\t\/\/-- NWJ - can we turn this into a app.global.i.e. app.global.returnProfileLevelCount(strProfileCode);\n\tvar strTempProfileCodes = new String(_swdoc.opencall.fixcode);\n\tvar nLevels = 0;\n\twhile(strTempProfileCodes.indexOf('-') != -1)\n\t{\n\t\tnLevels++;\n\t\tstrTempProfileCodes = strTempProfileCodes.substr((strTempProfileCodes.indexOf('-')+1),strTempProfileCodes.length);\n\t}\n\t\n\tif(strTempProfileCodes.length)nLevels++;\n\t\n\t\/\/-- If insufficient profile levels are specified then alert the user\n\tif(nLevels < nLevelNeeded)\n\t{\n\t\tMessageBox(\"You must profile this call resolution. Your access control rights require you to choose at least \" + nLevelNeeded + \" profile level(s)\", MB_ICONSTOP);\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\n\/\/-- prompt user to confirm resolution or closure\nfunction confirm_resolve_close(funcCallback)\n{\n\t\/\/-- resolving\t\t\n\tif(!_swdoc.boolClosing)\n\t{\n\t\tMessageBox(_swdoc.arrCallrefs.length >1 ? \"Are you sure you want to resolve these calls?\" : \"Are you sure you want to resolve this call?\" , MB_YESNO | MB_ICONINFORMATION , function(intDecision)\n\t\t{\n\t\t\tif (intDecision != IDYES)\n\t\t\t{\n\t\t\t\tfuncCallback(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncCallback(true);\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\t\/\/-- closing\n\t\tvar MsgTmp = \"\";\n\t\tif(_swdoc.strIssueref.length)\n\t\t{\n\t\t\tif(_swdoc.arrCallrefs.length > 1)\n\t\t\t\tMsgTmp = \"Are you sure you want to close these calls, and the issue they belong to?\";\n\t\t\telse\n\t\t\t\tMsgTmp = \"Are you sure you want to close this call, and the issue it belongs to?\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(_swdoc.arrCallrefs.length > 1)\n\t\t\t\tMsgTmp = \"Are you sure you want to close these calls?\";\n\t\t\telse\n\t\t\t\tMsgTmp = \"Are you sure you want to close this call?\";\n\t\t}\n\n\t\tMessageBox(MsgTmp, MB_YESNO | MB_ICONINFORMATION , function(intDecision)\n\t\t{\n\t\t\tif (intDecision != IDYES)\n\t\t\t{\n\t\t\t\tfuncCallback(false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfuncCallback(true);\n\t\t\t}\n\t\t});\t\n\t}\n}\n\n\/\/-- add call to kbase\nfunction add_call_to_knowledgebase()\n{\n\tvar strProbText = \"\";\n\tvar strProbCode = \"\";\n\tvar nFirstCallref = _swdoc.arrCallrefs[0];\n\t\/\/-- get the problem text and problem code from updatedb\/opencall\n\t\t\t\n\tvar strParams = \"crf=\"+app.pfu(nFirstCallref);\n\tvar aRSInfo = app.g.get_sqrecordset(\"form\/resolvecloseform\/get_details_for_kb\",strParams);\n\tif(aRSInfo.Fetch())\n\t{\n\t\tstrProbText = aRSInfo.GetValueAsString(0);\n\t\tstrProbCode = aRSInfo.GetValueAsString(1);\t\t\n\t}\n\taRSInfo.Reset();\t\n\t\t\t\n\tif(!app.g.use_sw_knowledgebase())\n\t{\n\t\tif(app.strKnowledgebaseDefaultTool.toLowerCase()==\"rightanswers\")\n\t\t{\n\t\t\tapp.g.open_third_party_kb_add_form(strProbText, strProbCode,_swdoc.updatedb.updatetxt, _swdoc.opencall.fixcode, nFirstCallref)\n\t\t}\n\t}\n\telse\n\t{\n\t\t\/\/-- call api\n\t\t\/\/MessageBox(\"Add KB \" + _swdoc.updatedb.updatetxt)\n   \t\tapp.global.AddResolutionToKnowledgeBase(strProbText, strProbCode, _swdoc.updatedb.updatetxt, _swdoc.opencall.fixcode, nFirstCallref);\n\t}\n}\n\n\/\/--\n\/\/-- resolve or close the call\nfunction ResolveClose(funcCallback)\n{\t\n\t\/\/-- function required for modeless email template dialog\n\tvar funcCloseForm = function()\n\t{\n\t\t\/\/ -- Close Form\n\t\t_swdoc.boolFormFieldChanged = false;\t\t\n\t\t_swdoc.resetData();    \t\t\n\t\t_swdoc.CloseForm();\n\t\tfuncCallback(true);\n\t\treturn;\n\t}\n\t\t\t\n\t\/\/-- function required for modeless message box\n\tvar funcRestOfFunction = function()\n\t{\n\t\t\/\/-- determine status\n\t\tvar nStatus = CS_CLOSED;\n\t\tif(!_swdoc.boolClosing)\n\t\t{\n\t\t\tnStatus = CS_RESOLVED;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(flg_chargeable.text == \"1\")\tnStatus = CS_CLOSEDCHARGABLE;\n\t\t}\n\t\t\n\t\t\/\/sandra 21\/08\/2007 Bug 60018 \n\t\t\/\/-- make sure user is allowed to resolve \n\t\tif ((nStatus == CS_RESOLVED) && (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANRESOLVECALLS)))\n\t\t{\n\t\t\tMessageBox(\"You do not have sufficient privileges to resolve calls.  Please contact your system administrator\",MB_ICONSTOP);\t\n\t\t\tfuncCallback(false);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\/\/-- make sure user is allowed to close calls\n\t\tif (((nStatus == CS_CLOSED) ||( nStatus == CS_CLOSEDCHARGABLE)) && (!app.session.HaveRight(ANALYST_RIGHT_A_GROUP,ANALYST_RIGHT_A_CANCLOSECALLS)))\n\t\t{\n\t\t\tMessageBox(\"You do not have sufficient privileges to close calls.  Please contact your system administrator\",MB_ICONSTOP);\t\n\t\t\tfuncCallback(false);\n\t\t\treturn;\n\t\t}\t\n\t\t\/\/-- end sandra\t\n\t\t\n\t\t\/\/-- F0093506\t\n\t\t\/\/-- handle web client - any reason for this ??\n\t\t\/*if((app.bWebClient && app.global==undefined)&&(_swdoc.boolClosing))\n\t\t{\n\t \t\tnStatus = CS_CLOSED;\n\t \t\tflg_chargeable.text == \"0\"\n\t\t}*\/\n\t\tif((app.bWebClient && app.global==undefined)&&(_swdoc.boolClosing))\n\t\t{\n\t\t\tnStatus = CS_CLOSED;\n\t\t\tflg_chargeable.text == \"0\"\n\t\t}\t\t\n\t\t\/\/-- EOF F0093506\n\t\t\n\t\t\/\/ -- Check if we should send a Survey\t\n\t\tvar bSendSurveyToCustomer = false;\n\t\tvar SurveyID = 0;\n\t\tvar SurveyName = \"\";\n\t\tif(app.global.IsSurveyModuleEnabled() && flg_customersurvey.text == \"1\" && cb_surveys.text.length)\n\t\t{\n\t\t\t\/\/ -- Get surveyId from the SurveyNameSurvIdMap\n\t\t\tSurveyName = cb_surveys.text;\t\t\n\t\t\tSurveyID = _swdoc.arrSurveyNameSurvIDs[SurveyName]; \n\t\t\tif(SurveyID!=undefined)\n\t\t\t\tbSendSurveyToCustomer = true;\n\t\t\n\t\t\t\/\/ -- Determined that a Survey should be sent to the customer\n\t\t\tif (bSendSurveyToCustomer)\n\t\t\t{\n\t\t\t\t\/\/ -- Send a Survey using survey::sendCustomerCallSurvey API\n\t\t\t\tvar xmlmccs = new XmlMethodCall;\n\t\t\t\txmlmccs.SetValue(\"surveyId\", SurveyID);\n\t\t\t\tvar arrCallrefs = _swdoc.CallrefsCommaString.split();\n\t\t\t\tfor(x in _swdoc.arrCallrefs)\n\t\t\t\t\txmlmccs.SetValue(\"callref\", _swdoc.arrCallrefs[x]);\n\t\t\t\t\/\/ -- Invoke XMLMC API\n\t\t\t\tif(!xmlmccs.Invoke(\"survey\",\"sendCustomerCallSurvey\"))\n\t\t\t\t{\n\t\t\t\t\t\/\/ -- Failed to Invoke XMLMC API\n\t\t\t\t\t\/\/ -- Display the error message\n\t\t\t\t\t(app.bWebClient)? MessageBox(xmlmccs._lastresult):MessageBox(xmlmccs.GetReturnXml());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/ -- Find modified values in OPENCALL table\n\t\tvar boolUpdatedValues = true;\n\t\tvar arrUpdateCallValues = new Array();\n\t\tvar strUpdateCallValues = \"\";\n\t\tif(rec = _swdoc.GetRecord(\"opencall\"))\n\t\t{\n\t\t\tvar nColCount = rec.GetCount();\n\t\t\tfor(x = 0; x < nColCount; x++)\n\t\t\t{\n\t\t\t\tif(!rec.IsModified(x))\n\t\t\t\t\tcontinue;\n\t\t\t\tarrUpdateCallValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t\t}\n\t\t}\n\t\tfor (fieldName in arrUpdateCallValues)\n\t\t{\n\t\t\tstrUpdateCallValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrUpdateCallValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t\t}\n\t\t\n\t\t\/\/ -- Update call values using XMLMC API if we found modified values in OPENCALL table \n\t\tif(strUpdateCallValues!=\"\")\n\t\t{\n\t\t\tstrUpdateCallValues = \"<opencall>\"+strUpdateCallValues+\"<\/opencall>\";\n\t\t\tvar arrCallrefs = _swdoc.CallrefsCommaString.split(\",\");\n\t\t\t\/\/ -- Update call values using helpdesk::updateCallValues API \n\t\t\tvar strMethod = \"updateCallValues\";\n\t\t\tfor(var refCount = 0; refCount < _swdoc.arrCallrefs.length; refCount++)\n\t\t\t{\n\t\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\t\txmlmc.SetValue(\"callref\", _swdoc.arrCallrefs[refCount]);\n\t\t\t\txmlmc.SetParamAsComplexType(\"additionalCallValues\", strUpdateCallValues);\t\n\t\t\t\tif(xmlmc.Invoke(\"helpdesk\", strMethod))\n\t\t\t\t{\n\t    \t\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\t\t\t\tvar objRes = app.XMCResult(strXML);\n\t\t\t\t\tif(!objRes.success)\n\t\t\t\t\t{\n\t\t\t\t\t\tboolUpdatedValues = false;\n\t\t\t\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboolUpdatedValues = false;\n\t\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/ -- Resolve\/Close the call using XMLMC API\n\t\tvar xmlmc = new XmlMethodCall;\n\t\t\/\/ -- API method\n\t\tvar strMethod = \"closeCalls\";\n\t\tif(nStatus == CS_RESOLVED)\n\t\t\tstrMethod = \"resolveCalls\";\n\t\t\/\/ -- Find modified values in UPDATEDB table\n\t\tvar arrExtraUpdateDbValues = new Array();\n\t\tvar strUpdateDbValues = \"\";\n\t\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t\t{\n\t\t\tvar nColCount = rec.GetCount();\n\t\t\tfor(x = 0; x < nColCount; x++)\n\t\t\t{\n\t\t\t\tif(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')\n\t\t\t\t\tcontinue;\n\t\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t\t}\n\t\t}\n\t\tfor (fieldName in arrExtraUpdateDbValues)\n\t\t{\n\t\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t\t}\n\t\t\n\t\t\/\/ -- Workout \"timeOfAction\" param\n\t\tvar strBackDate = _swdoc.nBackdatePeriod;\n\t\tif(strBackDate==0 && _swdoc.boolSetToMaxBackdatePeriod)\n\t\t{\n\t\t\tstrBackDate = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t}\n\t\t\n\t\t\/\/ ** API params ** \/\/\n\t\tvar arrCallrefs = _swdoc.CallrefsCommaString.split(\",\");\n \t\tfor(x in _swdoc.arrCallrefs)\n\t\t\txmlmc.SetValue(\"callref\", _swdoc.arrCallrefs[x]);\n\t\txmlmc.SetValue(\"timeSpent\", mainform.tb_timespent.value);\n\t\txmlmc.SetValue(\"description\", rec.updatetxt);\n\t\tif(_swdoc.opencall.fixcode!=\"\") xmlmc.SetValue(\"fixCode\", _swdoc.opencall.fixcode);\n\t\tif(strBackDate!=0) xmlmc.SetValue(\"timeOfAction\", app.global.GetAsISO8601TimeString(strBackDate));\n\t\tvar boolPublicUpdate = (flg_updatepublic.text == \"1\" )? true : false;\n\t\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\t\tif(rec.udsource!=\"\")\n\t\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\t\tif(rec.udcode!=\"\")\n\t\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\n\t\t\/\/ -- fileAttachment param\n\t\tfor(i=0; i<mainform.fl_attachments.rowCount();i++)\n\t\t{\n \t\t\t\/\/ -- Check for Server file (These need to use serverFileAttachment)\n\t\t\tvar fileName = mainform.fl_attachments.GetItemText(i,3);\n\t\t\tvar serverFile = fileName.indexOf(\"MFA:\");\n\t\t\tif(serverFile >= 0)\n\t\t\t{\n\t\t\t\t\/\/-- File was attached to email use serverFileAttachment param\n\t\t\t\tvar strFileName = mainform.fl_attachments.GetItemText(i,0);\n\t\t\t\tvar strData = mainform.fl_attachments.GetItemText(i,3);\n\t\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\t\tif(!app.bWebClient)\n\t\t\t\t\tstrXML += \"<fileSource>\"+strData+\"<\/fileSource>\";\n\t\t\t\txmlmc.SetParamAsComplexType(\"serverFileAttachment\",strXML);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\/\/-- File was uploaded to email use fileAttachement param\n\t\t\t\tvar strFileName = mainform.fl_attachments.GetItemText(i,0);\n\t\t\t\tvar strData = app.global.LoadFileInBase64(mainform.fl_attachments.GetItemText(i,3));\n\t\t\t\tvar strXML = \"<fileName>\"+strFileName+ \"<\/fileName>\";\n\t\t\t\tif(!app.bWebClient)\n\t\t\t\t\tstrXML += \"<fileData>\"+strData+\"<\/fileData>\";\n\t\t\t\txmlmc.SetParamAsComplexType(\"fileAttachment\",strXML);\n\t\t\t}\n    \t}\n\t\tif(strUpdateDbValues!=\"\")\n\t\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\t\n\t\t\/\/ ** EO API params ** \/\/\n\t\t\n\t\t\/\/ -- Invoke XMLMC API\n\t\tif(xmlmc.Invoke(\"helpdesk\",strMethod))\n\t\t{\n\t\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\t\tvar objRes = app.XMCResult(strXML);\n\t\t\tif(!objRes.success)\n\t\t\t{\n\t\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\t\tfuncCallback(false);\n\t\t\t\treturn;\n\t    \t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar myXmlFile = new XmlFile(); \n\t\t\t\tbRet = myXmlFile.loadFromString(strXML); \n\t\t\t\tvar arrChildCallInfo = null;\n\t\t\t\tvar arrCallInfo = new Array();\n\t\t\t\tvar strDocs = \"\";\n\t\t\t\tvar strFirstCall  = \"\";\n\t\t\t\tfor (count = 0; count < myXmlFile.methodCallResult.params.length; count ++) \n\t\t\t\t{\n\t\t\t\t\tif(myXmlFile.methodCallResult.params[count].nodeName==\"callActionStatus\")\n\t\t\t\t\t{  \n\t\t\t\t\t\tvar boolSuccess = myXmlFile.methodCallResult.params[count]['success'].nodeValue;\n\t\t\t\t\t\tif(boolSuccess==\"false\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strMessage =  myXmlFile.methodCallResult.params[count]['message'].nodeValue;\n\t\t\t\t\t\t\tMessageBox(strMessage);\n\t\t\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar strCallref = myXmlFile.methodCallResult.params[count]['callref'].nodeValue;\n\t\t\t\t\t\tvar strIndex = myXmlFile.methodCallResult.params[count]['udIndex'].nodeValue;\n\t\t\t\t\t\t\n\t\t\t\t\t\tarrCallInfo[strCallref] = strIndex;\n\t\t\t\t\t}\n\t\t\t\t\telse if(myXmlFile.methodCallResult.params[count].nodeName==\"callFileAttachment\")\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/ only want to take the attachment details from the first resolved call\t\t\t\t\n\t\t\t\t\t\tif (strFirstCall == \"\")\n\t\t\t\t\t\t\tstrFirstCall = strCallref;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (strCallref == strFirstCall)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar updateId = myXmlFile.methodCallResult.params[count]['updateId'].nodeValue;\n\t\t\t\t\t\t\t\tif(updateId==arrCallInfo[strCallref]) \/\/ only want to take the attachments from the diary update which has just been created\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar pathName = myXmlFile.methodCallResult.params[count]['pathName'].nodeValue;\n\t\t\t\t\t\t\t\t\tvar fileName = myXmlFile.methodCallResult.params[count]['fileName'].nodeValue;\n\t\t\t\t\t\t\t\t\tvar fileSize = myXmlFile.methodCallResult.params[count]['fileSize'].nodeValue;\n\t\t\t\t\t\t\t\t\tif(strDocs!=\"\") strDocs +=\"\\r\\n\";\n\t\t\t\t\t\t\t\t\tstrDocs +='displayname=\"'+fileName+'\"; path=\"'+pathName+'\"; size=\"'+fileSize+'\";';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch(e)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\/\/ --\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/-- add knowledge base\tbut only if we have one call\n    \t\t\tif((flg_addKBase.text == \"1\") && (_swdoc.arrCallrefs.length == 1))\n    \t\t\t{\n    \t\t\t\tadd_call_to_knowledgebase();\n    \t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/ If we have been invoked to update a call from an e-mail message, this update will \n\t\t\t\t\/\/ only relate to a single call. We can only handle e-mail audit trail if we are working\n\t\t\t\t\/\/ on a single-call update. \n\t\t\t\tif(_swdoc.arrCallrefs.length == 1 && \t\t\t\/\/ Are we only dealing with a single call reference?\n\t\t\t\t\t_swdoc._form[\"messagesource\"] && \t\/\/ Are we working from an e-mail message?\n\t\t\t\t\tdd.GetGlobalParamAsNumber(\"Email Audit Trail\/StoreEmailAuditTrail\")) \/\/ Are we configured?\n\t\t\t\t{\n\t\t\t\t\tapp.g.attach_message_to_call(_swdoc._form,_swdoc.arrCallrefs[0],arrCallInfo[_swdoc.arrCallrefs[0]],\"CloseCallMailFolder\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/-- NWJ - ITSM - resolve related calls\n\t\t\t\tif(flg_resolvelinked_calls.text==\"1\")\n\t\t\t\t{\n\t\t\t\t\t\/\/-- F0086107\n\t\t\t\t\tfor(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar strRelatedBPMParents = \"\";\n\t\t\t\t\t\tvar strParams = \"crfs=\"+app.pfu(_swdoc.arrCallrefs[refcount]);\n\t\t\t\t\t\tvar db = app.g.get_sqrecordset(\"form\/resolvecloseform\/get_tasks_for_calls\",strParams);\n\t\t\t\t\t\tif(db.Fetch())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar nParentCallref = db.GetValueAsNumber(0);\n\t\t\t\t\t\t\tstrRelatedBPMParents +=nParentCallref;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\tvar strCallrefFormatText = app.g.callref_pad(_swdoc.arrCallrefs[refcount]);\n\t\n\t\t\t\t\t\tif(strRelatedBPMParents!=\"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\/\/--- update relaTED CALLS\t\t\t\t\t\n\t\t\t\t\t\t\tvar strAction = \"closure\";\n\t\t\t\t\t\t\tif(!_swdoc.boolClosing)\n\t\t\t\t\t\t\t\tstrAction = \"resolution\";\n\t\t\t\t\t\t\t_swdoc.updatedb.updatetxt = \"This request was updated as part of the \"+strAction+\" of task request (\" + strCallrefFormatText + \")\\n\" + _swdoc.updatedb.updatetxt;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\/\/ -- Resolve\/Close the call using XMLMC API\n\t\t\t\t\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\t\t\t\t\t\/\/ -- API method\n\t\t\t\t\t\t\tvar strMethod = \"updateCalls\";\n\t\t\t\t\t\t\t\/\/ -- Find modified values in UPDATEDB table\n\t\t\t\t\t\t\tvar arrExtraUpdateDbValues = new Array();\n\t\t\t\t\t\t\tvar strUpdateDbValues = \"\";\n\t\t\t\t\t\t\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar nColCount = rec.GetCount();\n\t\t\t\t\t\t\t\tfor(x = 0; x < nColCount; x++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode')\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (fieldName in arrExtraUpdateDbValues)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\/\/ -- Workout \"timeOfAction\" param\n\t\t\t\t\t\t\tvar strBackDate = _swdoc.nBackdatePeriod;\n\t\t\t\t\t\t\tif(strBackDate==0 && _swdoc.boolSetToMaxBackdatePeriod)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstrBackDate = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\/\/ ** API params ** \/\/\n\t\t\t\t\t\t\tvar arrBPMPCallrefs = strRelatedBPMParents.split(\",\");\n\t\t\t\t\t\t\tfor(x in arrBPMPCallrefs)\n\t\t\t\t\t\t\t\txmlmc.SetValue(\"callref\", arrBPMPCallrefs[x]);\n\t\t\t\t\t\t\txmlmc.SetValue(\"timeSpent\", mainform.tm_timespent.value);\n\t\t\t\t\t\t\txmlmc.SetValue(\"description\", rec.updatetxt);\n\t\t\t\t\t\t\tif(_swdoc.opencall.fixcode!=\"\") xmlmc.SetValue(\"fixCode\", _swdoc.opencall.fixcode);\n\t\t\t\t\t\t\tvar boolPublicUpdate = (mainform.flg_updatepublic.text == \"1\" )? true : false;\n\t\t\t\t\t\t\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\t\t\t\t\t\t\tif(strBackDate!=0) xmlmc.SetValue(\"timeOfAction\", app.global.GetAsISO8601TimeString(strBackDate));\n\t\t\t\t\t\t\tif(rec.udsource!=\"\")\n\t\t\t\t\t\t\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\t\t\t\t\t\t\tif(rec.udcode!=\"\")\n\t\t\t\t\t\t\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\n\t\t\t\t\t\t\txmlmc.SetValue(\"markAsSLAResponse\", false);\n\t\t\t\t\t\t\tif(strUpdateDbValues!=\"\")\n\t\t\t\t\t\t\t\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\n\t\t\t\t\t\t\t\/\/ -- Invoke XMLMC API\n\t\t\t\t\t\t\tif(!xmlmc.Invoke(\"helpdesk\",strMethod))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\/\/-- if(strRelatedBPMParents!=\"\")\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/-- end of F0086107\n\t\t\t\t\t}\/\/-- end for arrcallrefs\n\t\n\t\t\t\t\t\/\/-- get related children calls for all calls we are resolving\n\t\t\t\t\tvar strRelatedChildCalls = \"\";\n\t\t\t\t\tfor(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strRelatedChildCalls!=\"\")strRelatedChildCalls+=\",\";\n\t\t\t\t\t\tvar strAddCalls = app.g.get_slave_calls(_swdoc.arrCallrefs[refcount],\"\",true);\n\t\t\t\t\t\tif(strAddCalls!=\"0\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrRelatedChildCalls+=strAddCalls;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tif(strRelatedChildCalls!=\"\")\n\t\t\t\t\t{\n\t\t\t\t\t\t\/\/--- update related Calls\n\t\t\t\t\t\t_swdoc.updatedb.updatetxt += \" \\n\" + \"This request was resolved (or closed) as part of the following parent requests (\" + _swdoc.strResolveCloseCallrefs + \")\";\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ -- Find modified values in UPDATEDB table\n\t\t\t\t\t\tvar arrExtraUpdateDbValues = new Array();\n\t\t\t\t\t\tvar strUpdateDbValues = \"\";\n\t\t\t\t\t\tif(rec = _swdoc.GetRecord(\"updatedb\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar nColCount = rec.GetCount();\n\t\t\t\t\t\t\tfor(x = 0; x < nColCount; x++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(!rec.IsModified(x) && rec.GetColumnName(x)!='udsource' && rec.GetColumnName(x)!='udcode' && rec.GetColumnName(x)!='updatetxt')\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\tarrExtraUpdateDbValues[rec.GetColumnName(x)] = rec.GetValue(x);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (fieldName in arrExtraUpdateDbValues)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrUpdateDbValues += \"<\"+fieldName+\">\"+ app.global.PrepareForXML(arrExtraUpdateDbValues[fieldName])+\"<\/\"+fieldName+\">\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ -- Resolve\/Close the call using XMLMC API\n\t\t\t\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\t\t\t\t\/\/ -- API method\n\t\t\t\t\t\tvar strMethod = \"closeCalls\";\n\t\t\t\t\t\tif(nStatus == CS_RESOLVED)\n\t\t\t\t\t\t\tstrMethod = \"resolveCalls\";\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ -- Workout \"timeOfAction\" param\n\t\t\t\t\t\tvar strBackDate = _swdoc.nBackdatePeriod;\n\t\t\t\t\t\tif(strBackDate==0 && _swdoc.boolSetToMaxBackdatePeriod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstrBackDate = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ ** API params ** \/\/\n\t\t\t\t\t\tvar arrRCCallrefs = strRelatedChildCalls.split(\",\");\n\t\t\t\t\t\tfor(x in arrRCCallrefs)\n\t\t\t\t\t\t\txmlmc.SetValue(\"callrefs\", arrRCCallrefs[x]);\n\t\t\t\t\t\txmlmc.SetValue(\"timeSpent\", mainform.tb_timespent.value);\n\t\t\t\t\t\txmlmc.SetValue(\"description\", rec.updatetxt);\n\t\t\t\t\t\tif(_swdoc.opencall.fixcode!=\"\") xmlmc.SetValue(\"fixCode\", _swdoc.opencall.fixcode);\n\t\t\t\t\t\tif(strBackDate!=0) xmlmc.SetValue(\"timeOfAction\", app.global.GetAsISO8601TimeString(strBackDate));\n\t\t\t\t\t\tvar boolPublicUpdate = (flg_updatepublic.text == \"1\" )? true : false;\n\t\t\t\t\t\txmlmc.SetValue(\"publicUpdate\", boolPublicUpdate);\n\t\t\t\t\t\tif(rec.udsource!=\"\")\n\t\t\t\t\t\t\txmlmc.SetValue(\"updateSource\", rec.udsource);\n\t\t\t\t\t\tif(rec.udcode!=\"\")\n\t\t\t\t\t\t\txmlmc.SetValue(\"updateCode\", rec.udcode);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(rec.updatetxt!=\"\")\n\t\t\t\t\t\t\txmlmc.SetValue(\"updateTxt\", rec.updatetxt);\n\t\t\t\t\t\tif(strMethod == \"resolveCalls\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\txmlmc.SetValue(\"status\", 6);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\txmlmc.SetValue(\"status\", 16);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/if(strUpdateDbValues!=\"\")\n\t\t\t\t\t\t\/\/\txmlmc.SetParamAsComplexType(\"extraUpdateDbValues\", strUpdateDbValues);\t\n\t\t\t\t\t\t\/\/ ** EO API params ** \/\/\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\/\/ -- Invoke XMLMC API\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(xmlmc.Invoke(\"VPME\",\"ITSMResolveCalls\"))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strXML = (app.bWebClient)? xmlmc._lastresult:xmlmc.GetReturnXml();\n\t\t\t\t\t\t\tvar objRes = app.XMCResult(strXML);\n\t\t\t\t\t\t\tif(!objRes.success)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tMessageBox(\"The \" + strMethod + \" API method was rejected by the server.\");\n\t\t\t\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\t\t\t\treturn;\n\t    \t\t\t\t\t}\n\t    \t\t\t\t}\n\t    \t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\/\/-- if(strRelatedChildCalls!=\"\")\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/-- DJH - Apply Support Units\n\t\t\t\t\/\/-- SG - Contract Diary - Support Unit usage audit. F0103808\n\t\t\t\t\/\/### if for some reason blank, then don't do anything either\n\t\t\t\tif((typeof mainform.tb_avail_units.value !== \"undefined\") && mainform.tb_avail_units.value!=\"Unlimited\" && mainform.tb_avail_units.value!=\"\" )\n\t\t\t\t{\n\t\t\t\t\tif((mainform.tb_avail_units.value>0) && (mainform.tb_units_assigned.value>0) && (mainform.lb_supp_contract.value!=\"\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar intUnitsAssigned=0;\n\t\t\t\t\t\tfor(var refcount = 0; refcount < _swdoc.arrCallrefs.length;refcount++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tintUnitsAssigned++;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tvar intUnits = 0;\n\t\t\t\t\t\tvar aParams = {};\n\t\t\t\t\t\taParams.udcode='Unit Usage';\n\t\t\t\t\t\taParams.contract=_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value];\n\t\t\t\t\t\taParams.callref=_swdoc.arrCallrefs[0];\n\t\n\t\t\t\t\t\tif((mainform.tb_avail_units.value*1) < (mainform.tb_units_assigned.value*intUnitsAssigned))\n\t\t\t\t\t\t{\n\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tintUnits = (mainform.tb_avail_units.value - (mainform.tb_units_assigned.value*intUnitsAssigned));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar strParams = \"units=\"+app.pfu(intUnits)+\"&contract=\"+app.pfu(_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value]);\n\t\t\t\t\t\tapp.g.submitsqs(\"form\/resolvecloseform\/update_contract_sunits\", strParams);\n\t\t\t\t\t\taParams.urem=intUnits;\n\t\t\t\t\t\taParams.uuse=(mainform.tb_units_assigned.value*intUnitsAssigned);\n\t\t\t\t\t\taParams.rel=mainform.fk_con_ser_assoc.value;\n\t\t\t\t\t\tapp.g.submitsqs(\"form\/resolvecloseform\/add_contract_diary\", aParams);\n\t\t\t\t\t}\t\n\t\t\t\t\t\n\t\t\t\t\t\/\/-- SG 25\/07\/2012\n\t\t\t\t\t\/\/ XMLMC VPME call to handle Support Unit Threshold Breaches.\n\t\t\t\t\tvar xmlmc = new XmlMethodCall;\n\t\t\t\t\tvar iTempUnitsAssigned = parseInt(mainform.tb_units_assigned.value);\n\t\t\t\t\tvar iTempUnitsAvail = parseInt(mainform.tb_avail_units.value);\n\t\t\t\t\txmlmc.SetValue(\"contractid\", mainform.lb_supp_contract.value);\n\t\t\t\t\txmlmc.SetValue(\"units_used\", (isNaN(iTempUnitsAssigned)?0:iTempUnitsAssigned) );\n\t\t\t\t\txmlmc.SetValue(\"units_remain\", (isNaN(iTempUnitsAvail)?0:iTempUnitsAvail) );\n\t\t\t\t\tif(xmlmc.Invoke(\"VPME\", \"itsmContractUnitBreach\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(xmlmc.GetReturnValue(\"res1\") == \"breach_found_alert_sent\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar aParams = {};\n\t\t\t\t\t\t\taParams.udcode='Threshold Breach Alert Sent';\n\t\t\t\t\t\t\taParams.contract=_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value];\n\t\t\t\t\t\t\taParams.callref=_swdoc.arrCallrefs[0];\n\t\t\t\t\t\t\taParams.updatetxt=xmlmc.GetReturnValue(\"res2\");\n\t\t\t\t\t\t\tapp.g.submitsqs(\"form\/resolvecloseform\/add_contract_diary\", aParams);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tMessageBox(xmlmc.GetLastError());\n\t\t\t\t\t}\n\t\t\t\t\t\/\/-- SG end of Threshold Breach Alerting\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar aParams = {};\n\t\t\t\t\taParams.udcode='Unit Usage';\n\t\t\t\t\taParams.contract=_swdoc.arrContractNameIDs[mainform.lb_supp_contract.value];\n\t\t\t\t\taParams.callref=_swdoc.arrCallrefs[0];\n\t\t\t\t\taParams.uuse=mainform.tb_units_assigned.value;\n\t\t\t\t\taParams.rel=mainform.fk_con_ser_assoc.value;\n\t\t\t\t\tapp.g.submitsqs(\"form\/resolvecloseform\/add_contract_diary\", aParams);\n\t\t\t\t}\n\t\t\t\t\n    \t\t\t\/\/ if we want to send an email to the customer AND there are file attachments, obtain the \n    \t\t\t\/\/ attachments to attach to the email as well\n    \t\t\tvar flSessionFilesInfo = \"\";\n    \t\t\tif(mainform.flg_emailcustomer.value && app.global.IsConnectedToMailServer())\n    \t\t\t{\n\t\t\t\t\t\/\/ Now, compose an email to the customer\t\t\t\t\n\t\t\t\t\tapp.global.ComposeCallUpdateEmail(arrCallInfo, \t\t\t\t\t\/\/ Array: Call reference-UdIndex\n\t\t\t\t\t\t\t\t\t\t\t_swdoc.updatedb.updatetxt, \t\/\/ Message text\n\t\t\t\t\t\t\t\t\t\t\tstrDocs, \t\t\/\/ File attachments\n\t\t\t\t\t\t\t\t\t\t\t_swdoc.updatedb.timespent,\n\t\t\t\t\t\t\t\t\t\t\t\"CloseCallMailTemplate\", \t\t\/\/ Template name\n\t\t\t\t\t\t\t\t\t\t\tTEMPLATE_CLOSECALL,\t\t\t\t\/\/ Template type\n\t\t\t\t\t\t\t\t\t\t\tfunction()\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tfuncCloseForm();\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfuncCloseForm();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t(app.bWebClient)? MessageBox(xmlmc._lastresult):MessageBox(xmlmc.GetReturnXml());\n\t\t}\n\t\tfuncCallback(false);\n\t\treturn;\n\t}\n\t\n\t\/\/-- validate the form\n\t_swdoc.ValidateForm(function(boolValidate)\n\t{\n\t\tif (!boolValidate)\n\t\t{\n\t\t\tfuncCallback(false);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/-- check profile levels\n\t\t\tif(!mainform.check_profile_levels())\n\t\t\t{\n\t\t\t\tfuncCallback(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\/\/-- confirm\n\t\t\tmainform.confirm_resolve_close(function(boolConfirmResClose)\n\t\t\t{\n\t\t\t\tif (!boolConfirmResClose)\n\t\t\t\t{\n\t\t\t\t\tfuncCallback(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfuncRestOfFunction();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\n\nfunction getReadableDatefromEpoch(dt_epochdate)\n{\n\tvar strFormattedDate = \"\";\n\tvar theDate = new Date(dt_epochdate);\n\tdateString = theDate.toString();\n\tarrDateStr = dateString.split(\" \");\n\tstrFormattedDate = arrDateStr[2] + \"\/\" + getNumericMonth(arrDateStr[1]) + \"\/\" + arrDateStr[3] + \" \" + arrDateStr[4].substr(0,2) + \":\";\n\tstrFormattedDate += arrDateStr[4].substr(3,2) + \":\" + arrDateStr[4].substr(6,2);\n\treturn strFormattedDate;\n}\n\nfunction getNumericMonth(strMonth)\n{\n\tvar arrMonth = new Array(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\");\n\tfor(i=0; i<arrMonth.length; i++)\n\t{\n\t\tif(strMonth == arrMonth[i])\n\t\t\treturn i+1;\n\t}\n}\n\nfunction replaceIllegalFileCharacters(strText)\n{\n\t\/\/-- This function is used to replace characters in the passed in string that \n\t\/\/-- are not suitable for use in filenames and return the modified string \n\t\n\tstrOutput = strText;\n\tstrReplacement = \"-\";\n\tvar i = 0;\n\t\n\twhile(i < strOutput.length)\n\t{\n\t\tstrOutput = strOutput.replace('\/', strReplacement);\n\t\tstrOutput = strOutput.replace(':', strReplacement);\n\t\tstrOutput = strOutput.replace('*', strReplacement);\n\t\tstrOutput = strOutput.replace('?', strReplacement);\n\t\tstrOutput = strOutput.replace('\"', strReplacement);\n\t\tstrOutput = strOutput.replace('\\'', strReplacement);\n\t\tstrOutput = strOutput.replace('<', strReplacement);\n\t\tstrOutput = strOutput.replace('>', strReplacement);\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn strOutput;\n}"},{"name":"cb_callaction_OnValueChanged","code":"cb_callaction_OnValueChanged(strValue)\n{\n\t\/\/-- set mode and then setup defaults for that mode\n\t_swdoc.boolClosing = (strValue!=\"Resolve Call\");\n\t_swdoc.setup_call_action();\n\n}"},{"name":"flg_customersurvey_OnValueChanged","code":"flg_customersurvey_OnValueChanged(strValue)\n{\n\t\/\/-- enable disable\n\tvar bChecked = flg_customersurvey.text == \"1\";\n\tapp._een(cb_surveys,bChecked);\n\t\n\n}"},{"name":"OnFieldValueChanged","code":"OnFieldValueChanged(strName, strValue)\n{\n\t\/\/-- This value is set when a field value has been changed.\n\t\/\/-- We check this variable on from closing to see if there are any data changes that need to be saved.\n\t_swdoc.boolFormFieldChanged = true;\n\n\n}"},{"name":"dt_actiontime_OnValueChanged","code":"dt_actiontime_OnValueChanged(strValue)\n{\n\t\/\/ -- Var used in this to calculate backDatePeriod\n\tvar nBackdatePeriod = 0;\n\t\n\t\/\/ -- Calculate the backDatePeriod for processing\n\tvar updateDateTime = mainform.dt_actiontime.text;\n\tvar updateDateTimeValue = mainform.dt_actiontime.value;\n\tnBackdatePeriod = _swdoc.intGetCurrentEpocTime - updateDateTimeValue;\n\t\n\t\/\/ -- Processing to set \"updatedb.updatetimex\" and set _swdoc level nBackdatePeriod variable for use in Resolve\/Close action\n\tvar funcProcessBackdate = function()\n\t{\n\t\tif(nBackdatePeriod==0)\n\t\t{\n\t\t\t_swdoc.updatedb.updatetimex = _swdoc.intGetCurrentEpocTime;\n\t\t}\n\t\tif(_swdoc.boolSetToMaxBackdatePeriod)\n\t\t{\n\t\t\t_swdoc.updatedb.updatetimex = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t}\n\t\t_swdoc.nBackdatePeriod = nBackdatePeriod;\t\n\t\t_swdoc.UpdateFormFromData();\n\t}\n\t\n\t\/\/ -- Deny if the user has attempted to forward the Date\/Time\n\tif(nBackdatePeriod < 0)\n\t{\n\t\tMessageBox(\"You have attempted to forward date this call update which is not allowed.\");\n\t\t_swdoc.boolSetToMaxBackdatePeriod = false;\n\t\tnBackdatePeriod=0;\n\t\tfuncProcessBackdate();\n\t}\n\telse\n\t{\t\n\t\t\/\/ -- Check that the selected Date\/Time value does not exceed the maximum allowed backDatePeriod and prompt with an option to set to allowed Date\/Time value\n\t\tif(nBackdatePeriod > app.session.GetMaxBackdatePeriodAllowed())\n\t\t{\n\t\t\tvar dTime = app.global.GetCurrentEpocTime() - app.session.GetMaxBackdatePeriodAllowed();\n\t\t\tvar strMsg = \"You have attempted to backdate this call update further than you have sufficient privileges to do so.\\n\\nDo you want to use the oldest date\/time that you are allowed: \" + app.global.ConvertDateTimeInText(app.global.GetAsISO8601TimeString(dTime));\n\t\t\tMessageBox(strMsg, MB_ICONQUESTION | MB_YESNO, function(intDecision)\n\t\t\t{\t\n\t\t\t\tif(intDecision != IDYES)\n\t\t\t\t{\n\t\t\t\t\tnBackdatePeriod = 0;\n\t\t\t\t\t_swdoc.boolSetToMaxBackdatePeriod = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\/\/ -- Maximum backdate period allowed should only be calculated when invoking the API otherwise the value will be inacurrate\n\t\t\t\t\tnBackdatePeriod = 0;\n                    _swdoc.boolSetToMaxBackdatePeriod = true;\n\t\t\t\t}\n\t\t\t\tfuncProcessBackdate();\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\/\/ -- timeOfAction param in resolveCalls API expects .value property of Date\/Time control field\n\t\t\tnBackdatePeriod = updateDateTimeValue;\n\t\t\t_swdoc.boolSetToMaxBackdatePeriod = false;\n\t\t\tfuncProcessBackdate();\n\t\t}\n\t}\t\n}"},{"name":"btnResolveClose_OnPressed","code":"btnResolveClose_OnPressed()\n{\n\tmainform.ResolveClose(function(){});\n}"},{"name":"lb_supp_contract_OnValueChanged","code":"lb_supp_contract_OnValueChanged(strValue)\n{\n\t\/\/ TODO: Add your event handler code here\n\t\/\/-- Lookup units available for selected contract\n\tif(strValue!=\"\")\n\t{\n\t\tvar recContract = new SqlRecord;\n\t\tif(recContract.GetRecord(\"contract\", _swdoc.arrContractNameIDs[strValue]))\n\t\t{\n\t\t\tvar contNumID = recContract.fk_cmdb_id;\n\t\t}\t\n\t\t_swdoc.get_support_units_available(_swdoc.arrContractNameIDs[strValue], mainform.tb_avail_units);\n\t\t_swdoc.get_support_unit_decrement(contNumID, mainform.tb_units_assigned, _swdoc.arrContractNameIDs[strValue]);\n\t\t\/\/###20120731 app._ero(mainform.tb_units_assigned,false);\n\t\tapp._een(mainform.tb_units_assigned, true);\n\t}\n\telse\n\t{\n\t\tapp._eva(mainform.tb_avail_units,0);\n\t\tapp._eva(mainform.tb_units_assigned,0);\n\t\tapp._een(mainform.tb_units_assigned,false);\n\t\tapp._evi(mainform.lbl_con_ser_assoc, false);\n\t\tapp._evi(mainform.lbl_no_con_ser_assoc, false);\n\t\tapp._evi(mainform.lbl_multi_services, false);\n\n\/*###\t\tapp._eva(mainform.tb_avail_units,0);\n\t\tapp._eva(mainform.tb_units_assigned,0);\n\t\tapp._ero(mainform.tb_units_assigned,true);\n\t\tmainform.elements['lbl_con_ser_assoc'].visible = false;\n\t\tmainform.elements['lbl_no_con_ser_assoc'].visible = false;\n*\/\n\t}\n\n}"}]}}},{"appearance":{"width":"360","height":"220","backgroundColor":"#ffffff","fillColour":"#ffffff","textColour":"#000000","font":{"@size":"8","#text":"Arial"}},"javascript":{}}]}}}